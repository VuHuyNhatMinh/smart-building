
C:\Users\Admin_PC\AppData\Local\Temp\arduino_build_628864/oled_multI_screen.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__dtors_end>
       4:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
       8:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
       c:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
      10:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
      14:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
      18:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
      1c:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
      20:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
      24:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
      28:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
      2c:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
      30:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
      34:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
      38:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
      3c:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
      40:	0c 94 89 18 	jmp	0x3112	; 0x3112 <__vector_16>
      44:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
      48:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
      4c:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
      50:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
      54:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
      58:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
      5c:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
      60:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
      64:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
      68:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
      6c:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
      70:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
      74:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
      78:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
      7c:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
      80:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>
      84:	0c 94 f4 09 	jmp	0x13e8	; 0x13e8 <__vector_33>
      88:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__bad_interrupt>

0000008c <__trampolines_end>:
__trampolines_start():
      8c:	00 00       	nop
      8e:	00 00       	nop
      90:	00 3e       	cpi	r16, 0xE0	; 224
      92:	5b 4f       	sbci	r21, 0xFB	; 251
      94:	5b 3e       	cpi	r21, 0xEB	; 235
      96:	3e 6b       	ori	r19, 0xBE	; 190
      98:	4f 6b       	ori	r20, 0xBF	; 191
      9a:	3e 1c       	adc	r3, r14
      9c:	3e 7c       	andi	r19, 0xCE	; 206
      9e:	3e 1c       	adc	r3, r14
      a0:	18 3c       	cpi	r17, 0xC8	; 200
      a2:	7e 3c       	cpi	r23, 0xCE	; 206
      a4:	18 1c       	adc	r1, r8
      a6:	57 7d       	andi	r21, 0xD7	; 215
      a8:	57 1c       	adc	r5, r7
      aa:	1c 5e       	subi	r17, 0xEC	; 236
      ac:	7f 5e       	subi	r23, 0xEF	; 239
      ae:	1c 00       	.word	0x001c	; ????
      b0:	18 3c       	cpi	r17, 0xC8	; 200
      b2:	18 00       	.word	0x0018	; ????
      b4:	ff e7       	ldi	r31, 0x7F	; 127
      b6:	c3 e7       	ldi	r28, 0x73	; 115
      b8:	ff 00       	.word	0x00ff	; ????
      ba:	18 24       	eor	r1, r8
      bc:	18 00       	.word	0x0018	; ????
      be:	ff e7       	ldi	r31, 0x7F	; 127
      c0:	db e7       	ldi	r29, 0x7B	; 123
      c2:	ff 30       	cpi	r31, 0x0F	; 15
      c4:	48 3a       	cpi	r20, 0xA8	; 168
      c6:	06 0e       	add	r0, r22
      c8:	26 29       	or	r18, r6
      ca:	79 29       	or	r23, r9
      cc:	26 40       	sbci	r18, 0x06	; 6
      ce:	7f 05       	cpc	r23, r15
      d0:	05 07       	cpc	r16, r21
      d2:	40 7f       	andi	r20, 0xF0	; 240
      d4:	05 25       	eor	r16, r5
      d6:	3f 5a       	subi	r19, 0xAF	; 175
      d8:	3c e7       	ldi	r19, 0x7C	; 124
      da:	3c 5a       	subi	r19, 0xAC	; 172
      dc:	7f 3e       	cpi	r23, 0xEF	; 239
      de:	1c 1c       	adc	r1, r12
      e0:	08 08       	sbc	r0, r8
      e2:	1c 1c       	adc	r1, r12
      e4:	3e 7f       	andi	r19, 0xFE	; 254
      e6:	14 22       	and	r1, r20
      e8:	7f 22       	and	r7, r31
      ea:	14 5f       	subi	r17, 0xF4	; 244
      ec:	5f 00       	.word	0x005f	; ????
      ee:	5f 5f       	subi	r21, 0xFF	; 255
      f0:	06 09       	sbc	r16, r6
      f2:	7f 01       	movw	r14, r30
      f4:	7f 00       	.word	0x007f	; ????
      f6:	66 89       	ldd	r22, Z+22	; 0x16
      f8:	95 6a       	ori	r25, 0xA5	; 165
      fa:	60 60       	ori	r22, 0x00	; 0
      fc:	60 60       	ori	r22, 0x00	; 0
      fe:	60 94       	com	r6
     100:	a2 ff       	sbrs	r26, 2
     102:	a2 94       	swap	r10
     104:	08 04       	cpc	r0, r8
     106:	7e 04       	cpc	r7, r14
     108:	08 10       	cpse	r0, r8
     10a:	20 7e       	andi	r18, 0xE0	; 224
     10c:	20 10       	cpse	r2, r0
     10e:	08 08       	sbc	r0, r8
     110:	2a 1c       	adc	r2, r10
     112:	08 08       	sbc	r0, r8
     114:	1c 2a       	or	r1, r28
     116:	08 08       	sbc	r0, r8
     118:	1e 10       	cpse	r1, r14
     11a:	10 10       	cpse	r1, r0
     11c:	10 0c       	add	r1, r0
     11e:	1e 0c       	add	r1, r14
     120:	1e 0c       	add	r1, r14
     122:	30 38       	cpi	r19, 0x80	; 128
     124:	3e 38       	cpi	r19, 0x8E	; 142
     126:	30 06       	cpc	r3, r16
     128:	0e 3e       	cpi	r16, 0xEE	; 238
     12a:	0e 06       	cpc	r0, r30
     12c:	00 00       	nop
     12e:	00 00       	nop
     130:	00 00       	nop
     132:	00 5f       	subi	r16, 0xF0	; 240
     134:	00 00       	nop
     136:	00 07       	cpc	r16, r16
     138:	00 07       	cpc	r16, r16
     13a:	00 14       	cp	r0, r0
     13c:	7f 14       	cp	r7, r15
     13e:	7f 14       	cp	r7, r15
     140:	24 2a       	or	r2, r20
     142:	7f 2a       	or	r7, r31
     144:	12 23       	and	r17, r18
     146:	13 08       	sbc	r1, r3
     148:	64 62       	ori	r22, 0x24	; 36
     14a:	36 49       	sbci	r19, 0x96	; 150
     14c:	56 20       	and	r5, r6
     14e:	50 00       	.word	0x0050	; ????
     150:	08 07       	cpc	r16, r24
     152:	03 00       	.word	0x0003	; ????
     154:	00 1c       	adc	r0, r0
     156:	22 41       	sbci	r18, 0x12	; 18
     158:	00 00       	nop
     15a:	41 22       	and	r4, r17
     15c:	1c 00       	.word	0x001c	; ????
     15e:	2a 1c       	adc	r2, r10
     160:	7f 1c       	adc	r7, r15
     162:	2a 08       	sbc	r2, r10
     164:	08 3e       	cpi	r16, 0xE8	; 232
     166:	08 08       	sbc	r0, r8
     168:	00 80       	ld	r0, Z
     16a:	70 30       	cpi	r23, 0x00	; 0
     16c:	00 08       	sbc	r0, r0
     16e:	08 08       	sbc	r0, r8
     170:	08 08       	sbc	r0, r8
     172:	00 00       	nop
     174:	60 60       	ori	r22, 0x00	; 0
     176:	00 20       	and	r0, r0
     178:	10 08       	sbc	r1, r0
     17a:	04 02       	muls	r16, r20
     17c:	3e 51       	subi	r19, 0x1E	; 30
     17e:	49 45       	sbci	r20, 0x59	; 89
     180:	3e 00       	.word	0x003e	; ????
     182:	42 7f       	andi	r20, 0xF2	; 242
     184:	40 00       	.word	0x0040	; ????
     186:	72 49       	sbci	r23, 0x92	; 146
     188:	49 49       	sbci	r20, 0x99	; 153
     18a:	46 21       	and	r20, r6
     18c:	41 49       	sbci	r20, 0x91	; 145
     18e:	4d 33       	cpi	r20, 0x3D	; 61
     190:	18 14       	cp	r1, r8
     192:	12 7f       	andi	r17, 0xF2	; 242
     194:	10 27       	eor	r17, r16
     196:	45 45       	sbci	r20, 0x55	; 85
     198:	45 39       	cpi	r20, 0x95	; 149
     19a:	3c 4a       	sbci	r19, 0xAC	; 172
     19c:	49 49       	sbci	r20, 0x99	; 153
     19e:	31 41       	sbci	r19, 0x11	; 17
     1a0:	21 11       	cpse	r18, r1
     1a2:	09 07       	cpc	r16, r25
     1a4:	36 49       	sbci	r19, 0x96	; 150
     1a6:	49 49       	sbci	r20, 0x99	; 153
     1a8:	36 46       	sbci	r19, 0x66	; 102
     1aa:	49 49       	sbci	r20, 0x99	; 153
     1ac:	29 1e       	adc	r2, r25
     1ae:	00 00       	nop
     1b0:	14 00       	.word	0x0014	; ????
     1b2:	00 00       	nop
     1b4:	40 34       	cpi	r20, 0x40	; 64
     1b6:	00 00       	nop
     1b8:	00 08       	sbc	r0, r0
     1ba:	14 22       	and	r1, r20
     1bc:	41 14       	cp	r4, r1
     1be:	14 14       	cp	r1, r4
     1c0:	14 14       	cp	r1, r4
     1c2:	00 41       	sbci	r16, 0x10	; 16
     1c4:	22 14       	cp	r2, r2
     1c6:	08 02       	muls	r16, r24
     1c8:	01 59       	subi	r16, 0x91	; 145
     1ca:	09 06       	cpc	r0, r25
     1cc:	3e 41       	sbci	r19, 0x1E	; 30
     1ce:	5d 59       	subi	r21, 0x9D	; 157
     1d0:	4e 7c       	andi	r20, 0xCE	; 206
     1d2:	12 11       	cpse	r17, r2
     1d4:	12 7c       	andi	r17, 0xC2	; 194
     1d6:	7f 49       	sbci	r23, 0x9F	; 159
     1d8:	49 49       	sbci	r20, 0x99	; 153
     1da:	36 3e       	cpi	r19, 0xE6	; 230
     1dc:	41 41       	sbci	r20, 0x11	; 17
     1de:	41 22       	and	r4, r17
     1e0:	7f 41       	sbci	r23, 0x1F	; 31
     1e2:	41 41       	sbci	r20, 0x11	; 17
     1e4:	3e 7f       	andi	r19, 0xFE	; 254
     1e6:	49 49       	sbci	r20, 0x99	; 153
     1e8:	49 41       	sbci	r20, 0x19	; 25
     1ea:	7f 09       	sbc	r23, r15
     1ec:	09 09       	sbc	r16, r9
     1ee:	01 3e       	cpi	r16, 0xE1	; 225
     1f0:	41 41       	sbci	r20, 0x11	; 17
     1f2:	51 73       	andi	r21, 0x31	; 49
     1f4:	7f 08       	sbc	r7, r15
     1f6:	08 08       	sbc	r0, r8
     1f8:	7f 00       	.word	0x007f	; ????
     1fa:	41 7f       	andi	r20, 0xF1	; 241
     1fc:	41 00       	.word	0x0041	; ????
     1fe:	20 40       	sbci	r18, 0x00	; 0
     200:	41 3f       	cpi	r20, 0xF1	; 241
     202:	01 7f       	andi	r16, 0xF1	; 241
     204:	08 14       	cp	r0, r8
     206:	22 41       	sbci	r18, 0x12	; 18
     208:	7f 40       	sbci	r23, 0x0F	; 15
     20a:	40 40       	sbci	r20, 0x00	; 0
     20c:	40 7f       	andi	r20, 0xF0	; 240
     20e:	02 1c       	adc	r0, r2
     210:	02 7f       	andi	r16, 0xF2	; 242
     212:	7f 04       	cpc	r7, r15
     214:	08 10       	cpse	r0, r8
     216:	7f 3e       	cpi	r23, 0xEF	; 239
     218:	41 41       	sbci	r20, 0x11	; 17
     21a:	41 3e       	cpi	r20, 0xE1	; 225
     21c:	7f 09       	sbc	r23, r15
     21e:	09 09       	sbc	r16, r9
     220:	06 3e       	cpi	r16, 0xE6	; 230
     222:	41 51       	subi	r20, 0x11	; 17
     224:	21 5e       	subi	r18, 0xE1	; 225
     226:	7f 09       	sbc	r23, r15
     228:	19 29       	or	r17, r9
     22a:	46 26       	eor	r4, r22
     22c:	49 49       	sbci	r20, 0x99	; 153
     22e:	49 32       	cpi	r20, 0x29	; 41
     230:	03 01       	movw	r0, r6
     232:	7f 01       	movw	r14, r30
     234:	03 3f       	cpi	r16, 0xF3	; 243
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	40 3f       	cpi	r20, 0xF0	; 240
     23a:	1f 20       	and	r1, r15
     23c:	40 20       	and	r4, r0
     23e:	1f 3f       	cpi	r17, 0xFF	; 255
     240:	40 38       	cpi	r20, 0x80	; 128
     242:	40 3f       	cpi	r20, 0xF0	; 240
     244:	63 14       	cp	r6, r3
     246:	08 14       	cp	r0, r8
     248:	63 03       	mulsu	r22, r19
     24a:	04 78       	andi	r16, 0x84	; 132
     24c:	04 03       	mulsu	r16, r20
     24e:	61 59       	subi	r22, 0x91	; 145
     250:	49 4d       	sbci	r20, 0xD9	; 217
     252:	43 00       	.word	0x0043	; ????
     254:	7f 41       	sbci	r23, 0x1F	; 31
     256:	41 41       	sbci	r20, 0x11	; 17
     258:	02 04       	cpc	r0, r2
     25a:	08 10       	cpse	r0, r8
     25c:	20 00       	.word	0x0020	; ????
     25e:	41 41       	sbci	r20, 0x11	; 17
     260:	41 7f       	andi	r20, 0xF1	; 241
     262:	04 02       	muls	r16, r20
     264:	01 02       	muls	r16, r17
     266:	04 40       	sbci	r16, 0x04	; 4
     268:	40 40       	sbci	r20, 0x00	; 0
     26a:	40 40       	sbci	r20, 0x00	; 0
     26c:	00 03       	mulsu	r16, r16
     26e:	07 08       	sbc	r0, r7
     270:	00 20       	and	r0, r0
     272:	54 54       	subi	r21, 0x44	; 68
     274:	78 40       	sbci	r23, 0x08	; 8
     276:	7f 28       	or	r7, r15
     278:	44 44       	sbci	r20, 0x44	; 68
     27a:	38 38       	cpi	r19, 0x88	; 136
     27c:	44 44       	sbci	r20, 0x44	; 68
     27e:	44 28       	or	r4, r4
     280:	38 44       	sbci	r19, 0x48	; 72
     282:	44 28       	or	r4, r4
     284:	7f 38       	cpi	r23, 0x8F	; 143
     286:	54 54       	subi	r21, 0x44	; 68
     288:	54 18       	sub	r5, r4
     28a:	00 08       	sbc	r0, r0
     28c:	7e 09       	sbc	r23, r14
     28e:	02 18       	sub	r0, r2
     290:	a4 a4       	ldd	r10, Z+44	; 0x2c
     292:	9c 78       	andi	r25, 0x8C	; 140
     294:	7f 08       	sbc	r7, r15
     296:	04 04       	cpc	r0, r4
     298:	78 00       	.word	0x0078	; ????
     29a:	44 7d       	andi	r20, 0xD4	; 212
     29c:	40 00       	.word	0x0040	; ????
     29e:	20 40       	sbci	r18, 0x00	; 0
     2a0:	40 3d       	cpi	r20, 0xD0	; 208
     2a2:	00 7f       	andi	r16, 0xF0	; 240
     2a4:	10 28       	or	r1, r0
     2a6:	44 00       	.word	0x0044	; ????
     2a8:	00 41       	sbci	r16, 0x10	; 16
     2aa:	7f 40       	sbci	r23, 0x0F	; 15
     2ac:	00 7c       	andi	r16, 0xC0	; 192
     2ae:	04 78       	andi	r16, 0x84	; 132
     2b0:	04 78       	andi	r16, 0x84	; 132
     2b2:	7c 08       	sbc	r7, r12
     2b4:	04 04       	cpc	r0, r4
     2b6:	78 38       	cpi	r23, 0x88	; 136
     2b8:	44 44       	sbci	r20, 0x44	; 68
     2ba:	44 38       	cpi	r20, 0x84	; 132
     2bc:	fc 18       	sub	r15, r12
     2be:	24 24       	eor	r2, r4
     2c0:	18 18       	sub	r1, r8
     2c2:	24 24       	eor	r2, r4
     2c4:	18 fc       	.word	0xfc18	; ????
     2c6:	7c 08       	sbc	r7, r12
     2c8:	04 04       	cpc	r0, r4
     2ca:	08 48       	sbci	r16, 0x88	; 136
     2cc:	54 54       	subi	r21, 0x44	; 68
     2ce:	54 24       	eor	r5, r4
     2d0:	04 04       	cpc	r0, r4
     2d2:	3f 44       	sbci	r19, 0x4F	; 79
     2d4:	24 3c       	cpi	r18, 0xC4	; 196
     2d6:	40 40       	sbci	r20, 0x00	; 0
     2d8:	20 7c       	andi	r18, 0xC0	; 192
     2da:	1c 20       	and	r1, r12
     2dc:	40 20       	and	r4, r0
     2de:	1c 3c       	cpi	r17, 0xCC	; 204
     2e0:	40 30       	cpi	r20, 0x00	; 0
     2e2:	40 3c       	cpi	r20, 0xC0	; 192
     2e4:	44 28       	or	r4, r4
     2e6:	10 28       	or	r1, r0
     2e8:	44 4c       	sbci	r20, 0xC4	; 196
     2ea:	90 90 90 7c 	lds	r9, 0x7C90	; 0x807c90 <__bss_end+0x79ae>
     2ee:	44 64       	ori	r20, 0x44	; 68
     2f0:	54 4c       	sbci	r21, 0xC4	; 196
     2f2:	44 00       	.word	0x0044	; ????
     2f4:	08 36       	cpi	r16, 0x68	; 104
     2f6:	41 00       	.word	0x0041	; ????
     2f8:	00 00       	nop
     2fa:	77 00       	.word	0x0077	; ????
     2fc:	00 00       	nop
     2fe:	41 36       	cpi	r20, 0x61	; 97
     300:	08 00       	.word	0x0008	; ????
     302:	02 01       	movw	r0, r4
     304:	02 04       	cpc	r0, r2
     306:	02 3c       	cpi	r16, 0xC2	; 194
     308:	26 23       	and	r18, r22
     30a:	26 3c       	cpi	r18, 0xC6	; 198
     30c:	1e a1       	ldd	r17, Y+38	; 0x26
     30e:	a1 61       	ori	r26, 0x11	; 17
     310:	12 3a       	cpi	r17, 0xA2	; 162
     312:	40 40       	sbci	r20, 0x00	; 0
     314:	20 7a       	andi	r18, 0xA0	; 160
     316:	38 54       	subi	r19, 0x48	; 72
     318:	54 55       	subi	r21, 0x54	; 84
     31a:	59 21       	and	r21, r9
     31c:	55 55       	subi	r21, 0x55	; 85
     31e:	79 41       	sbci	r23, 0x19	; 25
     320:	22 54       	subi	r18, 0x42	; 66
     322:	54 78       	andi	r21, 0x84	; 132
     324:	42 21       	and	r20, r2
     326:	55 54       	subi	r21, 0x45	; 69
     328:	78 40       	sbci	r23, 0x08	; 8
     32a:	20 54       	subi	r18, 0x40	; 64
     32c:	55 79       	andi	r21, 0x95	; 149
     32e:	40 0c       	add	r4, r0
     330:	1e 52       	subi	r17, 0x2E	; 46
     332:	72 12       	cpse	r7, r18
     334:	39 55       	subi	r19, 0x59	; 89
     336:	55 55       	subi	r21, 0x55	; 85
     338:	59 39       	cpi	r21, 0x99	; 153
     33a:	54 54       	subi	r21, 0x44	; 68
     33c:	54 59       	subi	r21, 0x94	; 148
     33e:	39 55       	subi	r19, 0x59	; 89
     340:	54 54       	subi	r21, 0x44	; 68
     342:	58 00       	.word	0x0058	; ????
     344:	00 45       	sbci	r16, 0x50	; 80
     346:	7c 41       	sbci	r23, 0x1C	; 28
     348:	00 02       	muls	r16, r16
     34a:	45 7d       	andi	r20, 0xD5	; 213
     34c:	42 00       	.word	0x0042	; ????
     34e:	01 45       	sbci	r16, 0x51	; 81
     350:	7c 40       	sbci	r23, 0x0C	; 12
     352:	7d 12       	cpse	r7, r29
     354:	11 12       	cpse	r1, r17
     356:	7d f0       	brhs	.+30     	; 0x376 <__trampolines_end+0x2ea>
     358:	28 25       	eor	r18, r8
     35a:	28 f0       	brcs	.+10     	; 0x366 <__trampolines_end+0x2da>
     35c:	7c 54       	subi	r23, 0x4C	; 76
     35e:	55 45       	sbci	r21, 0x55	; 85
     360:	00 20       	and	r0, r0
     362:	54 54       	subi	r21, 0x44	; 68
     364:	7c 54       	subi	r23, 0x4C	; 76
     366:	7c 0a       	sbc	r7, r28
     368:	09 7f       	andi	r16, 0xF9	; 249
     36a:	49 32       	cpi	r20, 0x29	; 41
     36c:	49 49       	sbci	r20, 0x99	; 153
     36e:	49 32       	cpi	r20, 0x29	; 41
     370:	3a 44       	sbci	r19, 0x4A	; 74
     372:	44 44       	sbci	r20, 0x44	; 68
     374:	3a 32       	cpi	r19, 0x2A	; 42
     376:	4a 48       	sbci	r20, 0x8A	; 138
     378:	48 30       	cpi	r20, 0x08	; 8
     37a:	3a 41       	sbci	r19, 0x1A	; 26
     37c:	41 21       	and	r20, r1
     37e:	7a 3a       	cpi	r23, 0xAA	; 170
     380:	42 40       	sbci	r20, 0x02	; 2
     382:	20 78       	andi	r18, 0x80	; 128
     384:	00 9d       	mul	r16, r0
     386:	a0 a0       	ldd	r10, Z+32	; 0x20
     388:	7d 3d       	cpi	r23, 0xDD	; 221
     38a:	42 42       	sbci	r20, 0x22	; 34
     38c:	42 3d       	cpi	r20, 0xD2	; 210
     38e:	3d 40       	sbci	r19, 0x0D	; 13
     390:	40 40       	sbci	r20, 0x00	; 0
     392:	3d 3c       	cpi	r19, 0xCD	; 205
     394:	24 ff       	sbrs	r18, 4
     396:	24 24       	eor	r2, r4
     398:	48 7e       	andi	r20, 0xE8	; 232
     39a:	49 43       	sbci	r20, 0x39	; 57
     39c:	66 2b       	or	r22, r22
     39e:	2f fc       	.word	0xfc2f	; ????
     3a0:	2f 2b       	or	r18, r31
     3a2:	ff 09       	sbc	r31, r15
     3a4:	29 f6       	brne	.-118    	; 0x330 <__trampolines_end+0x2a4>
     3a6:	20 c0       	rjmp	.+64     	; 0x3e8 <__trampolines_end+0x35c>
     3a8:	88 7e       	andi	r24, 0xE8	; 232
     3aa:	09 03       	fmul	r16, r17
     3ac:	20 54       	subi	r18, 0x40	; 64
     3ae:	54 79       	andi	r21, 0x94	; 148
     3b0:	41 00       	.word	0x0041	; ????
     3b2:	00 44       	sbci	r16, 0x40	; 64
     3b4:	7d 41       	sbci	r23, 0x1D	; 29
     3b6:	30 48       	sbci	r19, 0x80	; 128
     3b8:	48 4a       	sbci	r20, 0xA8	; 168
     3ba:	32 38       	cpi	r19, 0x82	; 130
     3bc:	40 40       	sbci	r20, 0x00	; 0
     3be:	22 7a       	andi	r18, 0xA2	; 162
     3c0:	00 7a       	andi	r16, 0xA0	; 160
     3c2:	0a 0a       	sbc	r0, r26
     3c4:	72 7d       	andi	r23, 0xD2	; 210
     3c6:	0d 19       	sub	r16, r13
     3c8:	31 7d       	andi	r19, 0xD1	; 209
     3ca:	26 29       	or	r18, r6
     3cc:	29 2f       	mov	r18, r25
     3ce:	28 26       	eor	r2, r24
     3d0:	29 29       	or	r18, r9
     3d2:	29 26       	eor	r2, r25
     3d4:	30 48       	sbci	r19, 0x80	; 128
     3d6:	4d 40       	sbci	r20, 0x0D	; 13
     3d8:	20 38       	cpi	r18, 0x80	; 128
     3da:	08 08       	sbc	r0, r8
     3dc:	08 08       	sbc	r0, r8
     3de:	08 08       	sbc	r0, r8
     3e0:	08 08       	sbc	r0, r8
     3e2:	38 2f       	mov	r19, r24
     3e4:	10 c8       	rjmp	.-4064   	; 0xfffff406 <__eeprom_end+0xff7ef406>
     3e6:	ac ba       	out	0x1c, r10	; 28
     3e8:	2f 10       	cpse	r2, r15
     3ea:	28 34       	cpi	r18, 0x48	; 72
     3ec:	fa 00       	.word	0x00fa	; ????
     3ee:	00 7b       	andi	r16, 0xB0	; 176
     3f0:	00 00       	nop
     3f2:	08 14       	cp	r0, r8
     3f4:	2a 14       	cp	r2, r10
     3f6:	22 22       	and	r2, r18
     3f8:	14 2a       	or	r1, r20
     3fa:	14 08       	sbc	r1, r4
     3fc:	55 00       	.word	0x0055	; ????
     3fe:	55 00       	.word	0x0055	; ????
     400:	55 aa       	std	Z+53, r5	; 0x35
     402:	55 aa       	std	Z+53, r5	; 0x35
     404:	55 aa       	std	Z+53, r5	; 0x35
     406:	ff 55       	subi	r31, 0x5F	; 95
     408:	ff 55       	subi	r31, 0x5F	; 95
     40a:	ff 00       	.word	0x00ff	; ????
     40c:	00 00       	nop
     40e:	ff 00       	.word	0x00ff	; ????
     410:	10 10       	cpse	r1, r0
     412:	10 ff       	sbrs	r17, 0
     414:	00 14       	cp	r0, r0
     416:	14 14       	cp	r1, r4
     418:	ff 00       	.word	0x00ff	; ????
     41a:	10 10       	cpse	r1, r0
     41c:	ff 00       	.word	0x00ff	; ????
     41e:	ff 10       	cpse	r15, r15
     420:	10 f0       	brcs	.+4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     422:	10 f0       	brcs	.+4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     424:	14 14       	cp	r1, r4
     426:	14 fc       	sbrc	r1, 4
     428:	00 14       	cp	r0, r0
     42a:	14 f7       	brge	.-60     	; 0x3f0 <__trampolines_end+0x364>
     42c:	00 ff       	sbrs	r16, 0
     42e:	00 00       	nop
     430:	ff 00       	.word	0x00ff	; ????
     432:	ff 14       	cp	r15, r15
     434:	14 f4       	brge	.+4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     436:	04 fc       	sbrc	r0, 4
     438:	14 14       	cp	r1, r4
     43a:	17 10       	cpse	r1, r7
     43c:	1f 10       	cpse	r1, r15
     43e:	10 1f       	adc	r17, r16
     440:	10 1f       	adc	r17, r16
     442:	14 14       	cp	r1, r4
     444:	14 1f       	adc	r17, r20
     446:	00 10       	cpse	r0, r0
     448:	10 10       	cpse	r1, r0
     44a:	f0 00       	.word	0x00f0	; ????
     44c:	00 00       	nop
     44e:	00 1f       	adc	r16, r16
     450:	10 10       	cpse	r1, r0
     452:	10 10       	cpse	r1, r0
     454:	1f 10       	cpse	r1, r15
     456:	10 10       	cpse	r1, r0
     458:	10 f0       	brcs	.+4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     45a:	10 00       	.word	0x0010	; ????
     45c:	00 00       	nop
     45e:	ff 10       	cpse	r15, r15
     460:	10 10       	cpse	r1, r0
     462:	10 10       	cpse	r1, r0
     464:	10 10       	cpse	r1, r0
     466:	10 10       	cpse	r1, r0
     468:	ff 10       	cpse	r15, r15
     46a:	00 00       	nop
     46c:	00 ff       	sbrs	r16, 0
     46e:	14 00       	.word	0x0014	; ????
     470:	00 ff       	sbrs	r16, 0
     472:	00 ff       	sbrs	r16, 0
     474:	00 00       	nop
     476:	1f 10       	cpse	r1, r15
     478:	17 00       	.word	0x0017	; ????
     47a:	00 fc       	sbrc	r0, 0
     47c:	04 f4       	brge	.+0      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     47e:	14 14       	cp	r1, r4
     480:	17 10       	cpse	r1, r7
     482:	17 14       	cp	r1, r7
     484:	14 f4       	brge	.+4      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     486:	04 f4       	brge	.+0      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     488:	00 00       	nop
     48a:	ff 00       	.word	0x00ff	; ????
     48c:	f7 14       	cp	r15, r7
     48e:	14 14       	cp	r1, r4
     490:	14 14       	cp	r1, r4
     492:	14 14       	cp	r1, r4
     494:	f7 00       	.word	0x00f7	; ????
     496:	f7 14       	cp	r15, r7
     498:	14 14       	cp	r1, r4
     49a:	17 14       	cp	r1, r7
     49c:	10 10       	cpse	r1, r0
     49e:	1f 10       	cpse	r1, r15
     4a0:	1f 14       	cp	r1, r15
     4a2:	14 14       	cp	r1, r4
     4a4:	f4 14       	cp	r15, r4
     4a6:	10 10       	cpse	r1, r0
     4a8:	f0 10       	cpse	r15, r0
     4aa:	f0 00       	.word	0x00f0	; ????
     4ac:	00 1f       	adc	r16, r16
     4ae:	10 1f       	adc	r17, r16
     4b0:	00 00       	nop
     4b2:	00 1f       	adc	r16, r16
     4b4:	14 00       	.word	0x0014	; ????
     4b6:	00 00       	nop
     4b8:	fc 14       	cp	r15, r12
     4ba:	00 00       	nop
     4bc:	f0 10       	cpse	r15, r0
     4be:	f0 10       	cpse	r15, r0
     4c0:	10 ff       	sbrs	r17, 0
     4c2:	10 ff       	sbrs	r17, 0
     4c4:	14 14       	cp	r1, r4
     4c6:	14 ff       	sbrs	r17, 4
     4c8:	14 10       	cpse	r1, r4
     4ca:	10 10       	cpse	r1, r0
     4cc:	1f 00       	.word	0x001f	; ????
     4ce:	00 00       	nop
     4d0:	00 f0       	brcs	.+0      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4d2:	10 ff       	sbrs	r17, 0
     4d4:	ff ff       	.word	0xffff	; ????
     4d6:	ff ff       	.word	0xffff	; ????
     4d8:	f0 f0       	brcs	.+60     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     4da:	f0 f0       	brcs	.+60     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
     4dc:	f0 ff       	sbrs	r31, 0
     4de:	ff ff       	.word	0xffff	; ????
     4e0:	00 00       	nop
     4e2:	00 00       	nop
     4e4:	00 ff       	sbrs	r16, 0
     4e6:	ff 0f       	add	r31, r31
     4e8:	0f 0f       	add	r16, r31
     4ea:	0f 0f       	add	r16, r31
     4ec:	38 44       	sbci	r19, 0x48	; 72
     4ee:	44 38       	cpi	r20, 0x84	; 132
     4f0:	44 fc       	sbrc	r4, 4
     4f2:	4a 4a       	sbci	r20, 0xAA	; 170
     4f4:	4a 34       	cpi	r20, 0x4A	; 74
     4f6:	7e 02       	muls	r23, r30
     4f8:	02 06       	cpc	r0, r18
     4fa:	06 02       	muls	r16, r22
     4fc:	7e 02       	muls	r23, r30
     4fe:	7e 02       	muls	r23, r30
     500:	63 55       	subi	r22, 0x53	; 83
     502:	49 41       	sbci	r20, 0x19	; 25
     504:	63 38       	cpi	r22, 0x83	; 131
     506:	44 44       	sbci	r20, 0x44	; 68
     508:	3c 04       	cpc	r3, r12
     50a:	40 7e       	andi	r20, 0xE0	; 224
     50c:	20 1e       	adc	r2, r16
     50e:	20 06       	cpc	r2, r16
     510:	02 7e       	andi	r16, 0xE2	; 226
     512:	02 02       	muls	r16, r18
     514:	99 a5       	ldd	r25, Y+41	; 0x29
     516:	e7 a5       	ldd	r30, Z+47	; 0x2f
     518:	99 1c       	adc	r9, r9
     51a:	2a 49       	sbci	r18, 0x9A	; 154
     51c:	2a 1c       	adc	r2, r10
     51e:	4c 72       	andi	r20, 0x2C	; 44
     520:	01 72       	andi	r16, 0x21	; 33
     522:	4c 30       	cpi	r20, 0x0C	; 12
     524:	4a 4d       	sbci	r20, 0xDA	; 218
     526:	4d 30       	cpi	r20, 0x0D	; 13
     528:	30 48       	sbci	r19, 0x80	; 128
     52a:	78 48       	sbci	r23, 0x88	; 136
     52c:	30 bc       	out	0x20, r3	; 32
     52e:	62 5a       	subi	r22, 0xA2	; 162
     530:	46 3d       	cpi	r20, 0xD6	; 214
     532:	3e 49       	sbci	r19, 0x9E	; 158
     534:	49 49       	sbci	r20, 0x99	; 153
     536:	00 7e       	andi	r16, 0xE0	; 224
     538:	01 01       	movw	r0, r2
     53a:	01 7e       	andi	r16, 0xE1	; 225
     53c:	2a 2a       	or	r2, r26
     53e:	2a 2a       	or	r2, r26
     540:	2a 44       	sbci	r18, 0x4A	; 74
     542:	44 5f       	subi	r20, 0xF4	; 244
     544:	44 44       	sbci	r20, 0x44	; 68
     546:	40 51       	subi	r20, 0x10	; 16
     548:	4a 44       	sbci	r20, 0x4A	; 74
     54a:	40 40       	sbci	r20, 0x00	; 0
     54c:	44 4a       	sbci	r20, 0xA4	; 164
     54e:	51 40       	sbci	r21, 0x01	; 1
     550:	00 00       	nop
     552:	ff 01       	movw	r30, r30
     554:	03 e0       	ldi	r16, 0x03	; 3
     556:	80 ff       	sbrs	r24, 0
     558:	00 00       	nop
     55a:	08 08       	sbc	r0, r8
     55c:	6b 6b       	ori	r22, 0xBB	; 187
     55e:	08 36       	cpi	r16, 0x68	; 104
     560:	12 36       	cpi	r17, 0x62	; 98
     562:	24 36       	cpi	r18, 0x64	; 100
     564:	06 0f       	add	r16, r22
     566:	09 0f       	add	r16, r25
     568:	06 00       	.word	0x0006	; ????
     56a:	00 18       	sub	r0, r0
     56c:	18 00       	.word	0x0018	; ????
     56e:	00 00       	nop
     570:	10 10       	cpse	r1, r0
     572:	00 30       	cpi	r16, 0x00	; 0
     574:	40 ff       	sbrs	r20, 0
     576:	01 01       	movw	r0, r2
     578:	00 1f       	adc	r16, r16
     57a:	01 01       	movw	r0, r2
     57c:	1e 00       	.word	0x001e	; ????
     57e:	19 1d       	adc	r17, r9
     580:	17 12       	cpse	r1, r23
     582:	00 3c       	cpi	r16, 0xC0	; 192
     584:	3c 3c       	cpi	r19, 0xCC	; 204
     586:	3c 00       	.word	0x003c	; ????
     588:	00 00       	nop
	...

0000058c <Adafruit_SSD1306::display()::dlist1>:
     58c:	22 00 ff 21 00                                      "..!.

00000591 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)::postmask>:
     591:	00 01 03 07 0f 1f 3f 7f                             ......?.

00000599 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)::premask>:
     599:	00 80 c0 e0 f0 f8 fc fe                             ........

000005a1 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init5>:
     5a1:	db 40 a4 a6 2e af                                   .@....

000005a7 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init3>:
     5a7:	20 00 a1 c8                                          ...

000005ab <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init2>:
     5ab:	d3 00 40 8d                                         ..@.

000005af <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init1>:
     5af:	ae d5 80 a8                                         ....

000005b3 <splash2_data>:
     5b3:	00 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
     5c3:	00 e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
     5d3:	e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f0     ................
	...
     5ef:	00 03 f0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     5ff:	07 f0 00 00 00 00 00 00 00 00 00 00 00 00 00 07     ................
     60f:	f8 00 00 00 00 00 00 00 00 00 00 00 00 00 0f f8     ................
     61f:	00 00 00 03 c0 00 7e 00 00 01 e0 00 7f 0f f8 00     ......~.........
     62f:	00 00 03 c0 00 fe 00 00 01 e0 00 ff ef f8 00 00     ................
     63f:	00 03 c0 00 fe 00 00 01 e0 00 ff ff f8 00 00 00     ................
     64f:	03 c0 00 f0 00 00 00 0f 00 7f fe 7f c0 00 00 03     ................
     65f:	c0 00 f0 00 00 00 0f 00 3f fe 7f f8 3f f1 fb cf     ........?...?...
     66f:	fc fe f3 bc 3d ef e0 1f fe 7f ff 7f fb ff df fe     ....=...........
     67f:	fe ff bc 3d ef e0 1f c6 ff ff 7f fb ff df fe fe     ...=............
     68f:	ff bc 3d ef e0 0f e3 c7 fe 78 7b c3 de 1e f0 ff     ..=......x{.....
     69f:	bc 3d ef 00 07 ff 87 fc 78 7b c3 de 1e f0 f8 3c     .=......x{.....<
     6af:	3d ef 00 01 ff ff f0 00 7b c3 c0 1e f0 f0 3c 3d     =.......{.....<=
     6bf:	ef 00 01 f3 7f e0 3f fb c3 cf fe f0 f0 3c 3d ef     ......?......<=.
     6cf:	00 03 e3 3f 80 7f fb c3 df fe f0 f0 3c 3d ef 00     ...?........<=..
     6df:	07 e7 3c 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07     ..<.x{.....<=...
     6ef:	ff be 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07 ff     ...x{.....<=....
     6ff:	fe 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 0f ff fe     ..x{.....<=.....
     70f:	00 7f fb ff df fe f0 f0 3f fd ef e0 0f ff ff 00     ........?.......
     71f:	7f fb ff df fe f0 f0 3f fd ef e0 0f f9 ff 00 3e     .......?.......>
     72f:	79 f9 cf 9e f0 f0 1f 3d e7 e0 1f f1 ff 00 00 00     y......=........
	...
     747:	00 1f 80 ff 00 7f ff ff ff ff ff ff ff ff ff e0     ................
     757:	1c 00 7f 00 7f ff ff ff fe b4 6d 88 8d 18 e0 00     ..........m.....
     767:	00 1f 00 7f ff ff ff fe 95 ad 7d b5 77 e0 00 00     ..........}.w...
     777:	0f 00 7f ff ff ff fe a5 ad 9d 8d 19 e0 00 00 06     ................
     787:	00 7f ff ff ff fe b5 ad ed b5 7e e0                 ..........~.

00000793 <splash1_data>:
     793:	00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00     ................
     7a3:	03 80 00 00 00 00 00 00 00 00 00 07 c0 00 00 00     ................
     7b3:	00 00 00 00 00 00 07 c0 00 00 00 00 00 00 00 00     ................
     7c3:	00 0f c0 00 00 00 00 00 00 00 00 00 1f e0 00 00     ................
     7d3:	00 00 00 00 00 00 00 1f e0 00 00 00 00 00 00 00     ................
     7e3:	00 00 3f e0 00 00 00 00 00 00 00 00 00 3f f0 00     ..?..........?..
	...
     7fb:	7f f0 00 00 00 00 00 00 00 1f f8 7f f0 00 00 00     ................
     80b:	00 00 00 00 3f fe 7f f0 00 00 00 00 00 00 00 3f     ....?..........?
     81b:	ff 7f f0 00 00 00 00 00 00 00 1f ff fb e0 00 00     ................
     82b:	00 00 00 00 00 0f ff f9 ff c0 00 00 00 00 00 00     ................
     83b:	0f ff f9 ff f8 00 00 00 00 00 00 07 ff f1 ff ff     ................
     84b:	00 00 00 00 00 00 03 fc 73 ff ff 80 00 00 00 00     ........s.......
     85b:	00 01 fe 3f ff ff 80 00 00 00 00 00 00 ff 1e 0f     ...?............
     86b:	ff 00 00 00 00 00 00 00 7f fe 1f fc 00 00 00 00     ................
     87b:	00 00 00 3f ff ff f8 00 00 00 00 00 00 00 0f df     ...?............
     88b:	ff e0 00 00 00 00 00 00 00 1f 19 ff c0 00 00 00     ................
     89b:	00 00 00 00 3f 3c ff 00 00 00 00 00 00 00 00 7e     ....?<.........~
     8ab:	7c f8 00 00 00 00 00 00 00 00 7f fe 7c 00 00 00     |...........|...
     8bb:	00 00 00 00 00 ff ff fc 00 00 00 00 00 00 00 00     ................
     8cb:	ff ff fe 00 00 00 00 00 00 00 00 ff ff fe 00 00     ................
     8db:	00 00 00 00 00 01 ff ef fe 00 00 00 00 00 00 00     ................
     8eb:	01 ff cf fe 00 00 00 00 00 00 00 03 ff 07 fe 00     ................
     8fb:	00 00 00 00 00 00 03 fc 07 fe 00 00 00 00 00 00     ................
     90b:	00 03 f0 03 fe 00 00 00 00 00 00 00 01 80 00 fe     ................
	...
     923:	00 00 7e 00 00 00 00 00 00 00 00 00 00 3e 00 00     ..~..........>..
	...
     93b:	0c 00 00 00 00 00 00 07 80 00 fc 00 00 03 c0 00     ................
     94b:	00 00 07 80 01 fc 00 00 03 c0 00 00 00 07 80 01     ................
     95b:	fc 00 00 03 c0 00 00 00 07 80 01 e0 00 00 00 1e     ................
     96b:	00 00 00 07 80 01 e0 00 00 00 1e 00 7f e3 f7 9f     ................
     97b:	f9 fd e7 78 7b df c0 ff f7 ff bf fd fd ff 78 7b     ...x{.........x{
     98b:	df c0 ff f7 ff bf fd fd ff 78 7b df c0 f0 f7 87     .........x{.....
     99b:	bc 3d e1 ff 78 7b de 00 f0 f7 87 bc 3d e1 f0 78     .=..x{......=..x
     9ab:	7b de 00 00 f7 87 80 3d e1 e0 78 7b de 00 7f f7     {......=..x{....
     9bb:	87 9f fd e1 e0 78 7b de 00 ff f7 87 bf fd e1 e0     .....x{.........
     9cb:	78 7b de 00 f0 f7 87 bc 3d e1 e0 78 7b de 00 f0     x{......=..x{...
     9db:	f7 87 bc 3d e1 e0 78 7b de 00 f0 f7 87 bc 3d e1     ...=..x{......=.
     9eb:	e0 78 7b de 00 ff f7 ff bf fd e1 e0 7f fb df c0     .x{.............
     9fb:	ff f7 ff bf fd e1 e0 7f fb df c0 7c f3 f3 9f 3d     ...........|...=
     a0b:	e1 e0 3e 7b cf c0 00 00 00 00 00 00 00 00 00 00     ..>{............
     a1b:	00 ff ff ff ff ff ff ff ff ff ff c0 ff ff ff ff     ................
     a2b:	fd 68 db 11 1a 31 c0 ff ff ff ff fd 2b 5a fb 6a     .h...1......+Z.j
     a3b:	ef c0 ff ff ff ff fd 4b 5b 3b 1a 33 c0 ff ff ff     .......K[;.3....
     a4b:	ff fd 6b 5b db 6a fd c0                             ..k[.j..

00000a53 <digital_pin_to_timer_PGM>:
     a53:	00 00 00 0a 0b 0c 00 00 00 00 00 00 01 04 05 06     ................
	...

00000a88 <digital_pin_to_bit_mask_PGM>:
     a88:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
     a98:	08 10 01 02 04 08 10 20 40 80 01 02 01 02 04 08     ....... @.......
     aa8:	10 20 40 80 04 80 40 20 10 08 04 02 01 01 02 04     . @...@ ........
     ab8:	08 10 20 40 80                                      .. @.

00000abd <digital_pin_to_port_PGM>:
     abd:	05 05 05 05 05 05 05 05 02 02 02 02 02 02 02 02     ................
     acd:	07 07 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
     add:	03 03 03 03 07 01 01 01 01 01 01 01 01 06 06 06     ................
     aed:	06 06 06 06 06                                      .....

00000af2 <port_to_input_PGM>:
     af2:	00 00 39 00 36 00 33 00 30 00 21 00 20 00 63 00     ..9.6.3.0.!. .c.

00000b02 <port_to_output_PGM>:
     b02:	00 00 3b 00 38 00 35 00 32 00 23 00 62 00 65 00     ..;.8.5.2.#.b.e.

00000b12 <port_to_mode_PGM>:
     b12:	00 00 3a 00 37 00 34 00 31 00 22 00 61 00 64 00     ..:.7.4.1.".a.d.

00000b22 <__ctors_start>:
__ctors_start():
     b22:	bd 07       	cpc	r27, r29
     b24:	1a 09       	sbc	r17, r10

00000b26 <__ctors_end>:
__dtors_start():
     b26:	ed 07       	cpc	r30, r29

00000b28 <__dtors_end>:
__dtors_end():
     b28:	11 24       	eor	r1, r1
     b2a:	1f be       	out	0x3f, r1	; 63
     b2c:	cf ef       	ldi	r28, 0xFF	; 255
     b2e:	d0 e1       	ldi	r29, 0x10	; 16
     b30:	de bf       	out	0x3e, r29	; 62
     b32:	cd bf       	out	0x3d, r28	; 61

00000b34 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     b34:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     b36:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     b38:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     b3a:	ea eb       	ldi	r30, 0xBA	; 186
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     b3c:	f7 e3       	ldi	r31, 0x37	; 55
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     b3e:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     b40:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     b42:	02 c0       	rjmp	.+4      	; 0xb48 <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     b44:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     b46:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     b48:	ae 3b       	cpi	r26, 0xBE	; 190
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     b4a:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     b4c:	d9 f7       	brne	.-10     	; 0xb44 <__do_copy_data+0x10>

00000b4e <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     b4e:	22 e0       	ldi	r18, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     b50:	ae eb       	ldi	r26, 0xBE	; 190
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     b52:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     b54:	01 c0       	rjmp	.+2      	; 0xb58 <.do_clear_bss_start>

00000b56 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     b56:	1d 92       	st	X+, r1

00000b58 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     b58:	a2 3e       	cpi	r26, 0xE2	; 226
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     b5a:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     b5c:	e1 f7       	brne	.-8      	; 0xb56 <.do_clear_bss_loop>

00000b5e <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     b5e:	15 e0       	ldi	r17, 0x05	; 5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     b60:	c3 e9       	ldi	r28, 0x93	; 147
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     b62:	d5 e0       	ldi	r29, 0x05	; 5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     b66:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     b68:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     b6a:	0e 94 96 1a 	call	0x352c	; 0x352c <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     b6e:	c1 39       	cpi	r28, 0x91	; 145
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     b70:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     b72:	c9 f7       	brne	.-14     	; 0xb66 <__do_global_ctors+0x8>
     b74:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <main>
     b78:	0c 94 d0 1b 	jmp	0x37a0	; 0x37a0 <__do_global_dtors>

00000b7c <__bad_interrupt>:
__vector_22():
     b7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000b80 <setup>:
setup():
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:29
boolean last_up=LOW;            
boolean last_down = LOW;
boolean current_down = LOW;
// khai bao chuong trinh con doc gia tri cam bien

void setup() {
     b80:	0f 93       	push	r16
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:30
  Wire.begin();
     b82:	81 e1       	ldi	r24, 0x11	; 17
     b84:	92 e0       	ldi	r25, 0x02	; 2
     b86:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <TwoWire::begin()>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:31
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); //Start the OLED display
     b8a:	01 e0       	ldi	r16, 0x01	; 1
     b8c:	21 e0       	ldi	r18, 0x01	; 1
     b8e:	4c e3       	ldi	r20, 0x3C	; 60
     b90:	62 e0       	ldi	r22, 0x02	; 2
     b92:	82 ec       	ldi	r24, 0xC2	; 194
     b94:	91 e0       	ldi	r25, 0x01	; 1
     b96:	0e 94 0e 14 	call	0x281c	; 0x281c <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:32
  display.clearDisplay();
     b9a:	82 ec       	ldi	r24, 0xC2	; 194
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <Adafruit_SSD1306::clearDisplay()>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:33
  display.display();
     ba2:	82 ec       	ldi	r24, 0xC2	; 194
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <Adafruit_SSD1306::display()>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:34
  pinMode(44, OUTPUT);
     baa:	61 e0       	ldi	r22, 0x01	; 1
     bac:	8c e2       	ldi	r24, 0x2C	; 44
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:36

}
     bae:	0f 91       	pop	r16
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:34
void setup() {
  Wire.begin();
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); //Start the OLED display
  display.clearDisplay();
  display.display();
  pinMode(44, OUTPUT);
     bb0:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <pinMode>

00000bb4 <debounce(bool, int)>:
_Z8debouncebi():
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:41
}


   //---- De-bouncing function for all buttons----//
boolean debounce(boolean last, int pin)
{
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	c8 2f       	mov	r28, r24
     bba:	d6 2f       	mov	r29, r22
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:42
boolean current = digitalRead(pin);
     bbc:	86 2f       	mov	r24, r22
     bbe:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <digitalRead>
     bc2:	21 e0       	ldi	r18, 0x01	; 1
     bc4:	89 2b       	or	r24, r25
     bc6:	09 f4       	brne	.+2      	; 0xbca <debounce(bool, int)+0x16>
     bc8:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:43
if (last != current)
     bca:	2c 17       	cp	r18, r28
     bcc:	69 f0       	breq	.+26     	; 0xbe8 <debounce(bool, int)+0x34>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:45
{
delay(5);
     bce:	65 e0       	ldi	r22, 0x05	; 5
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <delay>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:46
current = digitalRead(pin);
     bda:	8d 2f       	mov	r24, r29
     bdc:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <digitalRead>
     be0:	c1 e0       	ldi	r28, 0x01	; 1
     be2:	89 2b       	or	r24, r25
     be4:	09 f4       	brne	.+2      	; 0xbe8 <debounce(bool, int)+0x34>
     be6:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:49
}
return current;
}
     be8:	8c 2f       	mov	r24, r28
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	08 95       	ret

00000bf0 <button()>:
_Z6buttonv():
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:58
button();
hienthi(); 

}//loop end
void button(){
  current_up = debounce(last_up, up);         //Debounce for Up button
     bf0:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <up>
     bf4:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <up+0x1>
     bf8:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <last_up>
     bfc:	0e 94 da 05 	call	0xbb4	; 0xbb4 <debounce(bool, int)>
     c00:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <current_up>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:59
  current_down = debounce(last_down, down);   //Debounce for Down button
     c04:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <down>
     c08:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <down+0x1>
     c0c:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <last_down>
     c10:	0e 94 da 05 	call	0xbb4	; 0xbb4 <debounce(bool, int)>
     c14:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <__data_end>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:64

//----Page counter function to move pages----//

//Page Up
    if (last_up== LOW && current_up == HIGH){  //When up button is pressed
     c18:	20 91 c0 01 	lds	r18, 0x01C0	; 0x8001c0 <last_up>
     c1c:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <current_up>
     c20:	21 11       	cpse	r18, r1
     c22:	0f c0       	rjmp	.+30     	; 0xc42 <button()+0x52>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:64 (discriminator 1)
     c24:	99 23       	and	r25, r25
     c26:	69 f0       	breq	.+26     	; 0xc42 <button()+0x52>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:66
                        //When page is changed, lcd clear to print new page  
      if(page_counter <8){              //Page counter never higher than 3(total of pages)
     c28:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <page_counter>
     c2c:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <page_counter+0x1>
     c30:	28 30       	cpi	r18, 0x08	; 8
     c32:	31 05       	cpc	r19, r1
     c34:	f4 f4       	brge	.+60     	; 0xc72 <button()+0x82>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:67
      page_counter= page_counter +1;   //Page up
     c36:	2f 5f       	subi	r18, 0xFF	; 255
     c38:	3f 4f       	sbci	r19, 0xFF	; 255
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:71
      
      }
      else{
      page_counter= 8;  
     c3a:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <page_counter+0x1>
     c3e:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <page_counter>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:75
      }
  }
  
    last_up = current_up;
     c42:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <last_up>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:78

//Page Down
    if (last_down== LOW && current_down == HIGH){ //When down button is pressed
     c46:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <last_down>
     c4a:	91 11       	cpse	r25, r1
     c4c:	0f c0       	rjmp	.+30     	; 0xc6c <button()+0x7c>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:78 (discriminator 1)
     c4e:	88 23       	and	r24, r24
     c50:	69 f0       	breq	.+26     	; 0xc6c <button()+0x7c>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:80
                          //When page is changed, lcd clear to print new page    
      if(page_counter >1){              //Page counter never lower than 1 (total of pages)
     c52:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <page_counter>
     c56:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <page_counter+0x1>
     c5a:	22 30       	cpi	r18, 0x02	; 2
     c5c:	31 05       	cpc	r19, r1
     c5e:	64 f0       	brlt	.+24     	; 0xc78 <button()+0x88>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:81
      page_counter= page_counter -1;   //Page down
     c60:	21 50       	subi	r18, 0x01	; 1
     c62:	31 09       	sbc	r19, r1
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:85
      
      }
      else{
      page_counter= 1;  
     c64:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <page_counter+0x1>
     c68:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <page_counter>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:89
      }
  }
    
    last_down = current_down;
     c6c:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <last_down>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:90
  }
     c70:	08 95       	ret
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:71
      if(page_counter <8){              //Page counter never higher than 3(total of pages)
      page_counter= page_counter +1;   //Page up
      
      }
      else{
      page_counter= 8;  
     c72:	28 e0       	ldi	r18, 0x08	; 8
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	e1 cf       	rjmp	.-62     	; 0xc3a <button()+0x4a>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:85
      if(page_counter >1){              //Page counter never lower than 1 (total of pages)
      page_counter= page_counter -1;   //Page down
      
      }
      else{
      page_counter= 1;  
     c78:	21 e0       	ldi	r18, 0x01	; 1
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	f3 cf       	rjmp	.-26     	; 0xc64 <button()+0x74>

00000c7e <hienthi()>:
_Z7hienthiv():
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:93
    
    last_down = current_down;
  }

void hienthi(){
   switch (page_counter) {
     c7e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <page_counter>
     c82:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <page_counter+0x1>
     c86:	31 97       	sbiw	r30, 0x01	; 1
     c88:	e8 30       	cpi	r30, 0x08	; 8
     c8a:	f1 05       	cpc	r31, r1
     c8c:	08 f0       	brcs	.+2      	; 0xc90 <hienthi()+0x12>
     c8e:	70 c1       	rjmp	.+736    	; 0xf70 <hienthi()+0x2f2>
     c90:	e4 5b       	subi	r30, 0xB4	; 180
     c92:	f9 4f       	sbci	r31, 0xF9	; 249
     c94:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__tablejump2__>
     c98:	54 06       	cpc	r5, r20
     c9a:	b8 07       	cpc	r27, r24
     c9c:	97 06       	cpc	r9, r23
     c9e:	b7 06       	cpc	r11, r23
     ca0:	f3 06       	cpc	r15, r19
     ca2:	33 07       	cpc	r19, r19
     ca4:	53 07       	cpc	r21, r19
     ca6:	88 07       	cpc	r24, r24
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:97
//------- Switch function to write and show what you want---//
   case 1:
  {     //SHT31 temperature and himidity
      display.clearDisplay();
     ca8:	82 ec       	ldi	r24, 0xC2	; 194
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <Adafruit_SSD1306::clearDisplay()>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:98
      display.setTextSize(2);
     cb0:	62 e0       	ldi	r22, 0x02	; 2
     cb2:	82 ec       	ldi	r24, 0xC2	; 194
     cb4:	91 e0       	ldi	r25, 0x01	; 1
     cb6:	0e 94 73 11 	call	0x22e6	; 0x22e6 <Adafruit_GFX::setTextSize(unsigned char)>
_ZN12Adafruit_GFX12setTextColorEj():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:134
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <display+0x13>
     cc2:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <display+0x12>
     cc6:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <display+0x11>
     cca:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <display+0x10>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:122
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
     cce:	85 e0       	ldi	r24, 0x05	; 5
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <display+0xd>
     cd6:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <display+0xc>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:123
    cursor_y = y;
     cda:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <display+0xf>
     cde:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <display+0xe>
_Z7hienthiv():
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:102
      display.setTextColor(WHITE);
      display.setCursor(5, 0);
      //display.print(now.hour(), DEC);
      display.print(":igh");
     ce2:	6c e0       	ldi	r22, 0x0C	; 12
     ce4:	71 e0       	ldi	r23, 0x01	; 1
     ce6:	82 ec       	ldi	r24, 0xC2	; 194
     ce8:	91 e0       	ldi	r25, 0x01	; 1
     cea:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <Print::print(char const*)>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:104
     // display.print(now.minute(), DEC);
      display.print(":");
     cee:	69 e1       	ldi	r22, 0x19	; 25
     cf0:	71 e0       	ldi	r23, 0x01	; 1
     cf2:	82 ec       	ldi	r24, 0xC2	; 194
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <Print::print(char const*)>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:122
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
     cfa:	8c e3       	ldi	r24, 0x3C	; 60
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <display+0xd>
     d02:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <display+0xc>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:123
    cursor_y = y;
     d06:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <display+0xf>
     d0a:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <display+0xe>
_Z7hienthiv():
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:108
     // display.print(now.second(), DEC);
      display.setCursor(60, 0);
      //display.print(now.year(), DEC);
      display.print(":");
     d0e:	69 e1       	ldi	r22, 0x19	; 25
     d10:	71 e0       	ldi	r23, 0x01	; 1
     d12:	82 ec       	ldi	r24, 0xC2	; 194
     d14:	91 e0       	ldi	r25, 0x01	; 1
     d16:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <Print::print(char const*)>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:110
      //display.print(now.month(), DEC);
      display.print(":");
     d1a:	69 e1       	ldi	r22, 0x19	; 25
     d1c:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:211
    display.setTextColor(WHITE);             
    display.setCursor(0,20);           //Setting the cursor position
    display.print("CO2:");              //Display the temperature and humidity as "T: 24.64 C
    //display.print(CO2);               //                                         H: 59.12 %"
    display.setCursor(0,45);           //Setting the cursor position
    display.print("ppm"); 
     d1e:	82 ec       	ldi	r24, 0xC2	; 194
     d20:	91 e0       	ldi	r25, 0x01	; 1
     d22:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <Print::print(char const*)>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:212
    display.display();   
     d26:	82 ec       	ldi	r24, 0xC2	; 194
     d28:	91 e0       	ldi	r25, 0x01	; 1
     d2a:	0c 94 85 17 	jmp	0x2f0a	; 0x2f0a <Adafruit_SSD1306::display()>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:134
}
    
    break;
case 3:
{ //TSL2561 light
      display.clearDisplay();            //Clear the display everytime
     d2e:	82 ec       	ldi	r24, 0xC2	; 194
     d30:	91 e0       	ldi	r25, 0x01	; 1
     d32:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <Adafruit_SSD1306::clearDisplay()>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:135
      display.setTextSize(2);            //Setting the text size and color         
     d36:	62 e0       	ldi	r22, 0x02	; 2
     d38:	82 ec       	ldi	r24, 0xC2	; 194
     d3a:	91 e0       	ldi	r25, 0x01	; 1
     d3c:	0e 94 73 11 	call	0x22e6	; 0x22e6 <Adafruit_GFX::setTextSize(unsigned char)>
_ZN12Adafruit_GFX12setTextColorEj():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:134
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <display+0x13>
     d48:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <display+0x12>
     d4c:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <display+0x11>
     d50:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <display+0x10>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:122
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
     d54:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <display+0xd>
     d58:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <display+0xc>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:123
    cursor_y = y;
     d5c:	84 e1       	ldi	r24, 0x14	; 20
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <display+0xf>
     d64:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <display+0xe>
_Z7hienthiv():
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:138
      display.setTextColor(WHITE);             
      display.setCursor(0,20);           //Setting the cursor position
      display.print("Lux");              //Display the temperature and humidity as "T: 24.64 C              //                                         H: 59.12 %"
     d68:	61 e1       	ldi	r22, 0x11	; 17
     d6a:	71 e0       	ldi	r23, 0x01	; 1
     d6c:	d8 cf       	rjmp	.-80     	; 0xd1e <hienthi()+0xa0>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:145
      display.display();  
    }
    break;
case 4:
   {   //CCS811 eCO2 and TVOC
      display.clearDisplay();
     d6e:	82 ec       	ldi	r24, 0xC2	; 194
     d70:	91 e0       	ldi	r25, 0x01	; 1
     d72:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <Adafruit_SSD1306::clearDisplay()>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:146
      display.setTextSize(2);
     d76:	62 e0       	ldi	r22, 0x02	; 2
     d78:	82 ec       	ldi	r24, 0xC2	; 194
     d7a:	91 e0       	ldi	r25, 0x01	; 1
     d7c:	0e 94 73 11 	call	0x22e6	; 0x22e6 <Adafruit_GFX::setTextSize(unsigned char)>
_ZN12Adafruit_GFX12setTextColorEj():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:134
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <display+0x13>
     d88:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <display+0x12>
     d8c:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <display+0x11>
     d90:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <display+0x10>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:122
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
     d94:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <display+0xd>
     d98:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <display+0xc>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:123
    cursor_y = y;
     d9c:	84 e1       	ldi	r24, 0x14	; 20
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <display+0xf>
     da4:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <display+0xe>
_Z7hienthiv():
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:149
      display.setTextColor(WHITE);
      display.setCursor(0,20);           //Setting the cursor position
      display.print("eCO2:");              //Display the temperature and humidity as "T: 24.64 C
     da8:	65 e1       	ldi	r22, 0x15	; 21
     daa:	71 e0       	ldi	r23, 0x01	; 1
     dac:	82 ec       	ldi	r24, 0xC2	; 194
     dae:	91 e0       	ldi	r25, 0x01	; 1
     db0:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <Print::print(char const*)>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:151
      //display.print(t);               //                                         H: 59.12 %"
      display.print(" ppm");
     db4:	6b e1       	ldi	r22, 0x1B	; 27
     db6:	71 e0       	ldi	r23, 0x01	; 1
     db8:	82 ec       	ldi	r24, 0xC2	; 194
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <Print::print(char const*)>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:122
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
     dc0:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <display+0xd>
     dc4:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <display+0xc>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:123
    cursor_y = y;
     dc8:	8d e2       	ldi	r24, 0x2D	; 45
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <display+0xf>
     dd0:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <display+0xe>
_Z7hienthiv():
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:153
      display.setCursor(0,45); 
      display.print("TVOC:");
     dd4:	60 e2       	ldi	r22, 0x20	; 32
     dd6:	71 e0       	ldi	r23, 0x01	; 1
     dd8:	82 ec       	ldi	r24, 0xC2	; 194
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <Print::print(char const*)>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:155
      //display.print(h);
      display.print(" ppb");
     de0:	66 e2       	ldi	r22, 0x26	; 38
     de2:	71 e0       	ldi	r23, 0x01	; 1
     de4:	9c cf       	rjmp	.-200    	; 0xd1e <hienthi()+0xa0>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:161
      display.display();  
    }
    break;
case 5:
   {   //TCS34725 color red, green, blue
      display.clearDisplay();            //Clear the display everytime
     de6:	82 ec       	ldi	r24, 0xC2	; 194
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <Adafruit_SSD1306::clearDisplay()>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:162
      display.setTextSize(2);            //Setting the text size and color         
     dee:	62 e0       	ldi	r22, 0x02	; 2
     df0:	82 ec       	ldi	r24, 0xC2	; 194
     df2:	91 e0       	ldi	r25, 0x01	; 1
     df4:	0e 94 73 11 	call	0x22e6	; 0x22e6 <Adafruit_GFX::setTextSize(unsigned char)>
_ZN12Adafruit_GFX12setTextColorEj():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:134
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <display+0x13>
     e00:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <display+0x12>
     e04:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <display+0x11>
     e08:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <display+0x10>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:122
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
     e0c:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <display+0xd>
     e10:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <display+0xc>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:123
    cursor_y = y;
     e14:	8c e0       	ldi	r24, 0x0C	; 12
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <display+0xf>
     e1c:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <display+0xe>
_Z7hienthiv():
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:165
      display.setTextColor(WHITE);             
      display.setCursor(0,12);           //Setting the cursor position
      display.print("Red: ");              //Display the temperature and humidity as "T: 24.64 C
     e20:	6b e2       	ldi	r22, 0x2B	; 43
     e22:	71 e0       	ldi	r23, 0x01	; 1
     e24:	82 ec       	ldi	r24, 0xC2	; 194
     e26:	91 e0       	ldi	r25, 0x01	; 1
     e28:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <Print::print(char const*)>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:122
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
     e2c:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <display+0xd>
     e30:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <display+0xc>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:123
    cursor_y = y;
     e34:	8d e1       	ldi	r24, 0x1D	; 29
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <display+0xf>
     e3c:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <display+0xe>
_Z7hienthiv():
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:168
      //display.print(r);               //                                         H: 59.12 %"
      display.setCursor(0,29); 
      display.print("Green: ");
     e40:	61 e3       	ldi	r22, 0x31	; 49
     e42:	71 e0       	ldi	r23, 0x01	; 1
     e44:	82 ec       	ldi	r24, 0xC2	; 194
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <Print::print(char const*)>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:122
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
     e4c:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <display+0xd>
     e50:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <display+0xc>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:123
    cursor_y = y;
     e54:	80 e3       	ldi	r24, 0x30	; 48
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <display+0xf>
     e5c:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <display+0xe>
_Z7hienthiv():
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:171
     // display.print(g);
      display.setCursor(0,48); 
      display.print("Blue: ");
     e60:	69 e3       	ldi	r22, 0x39	; 57
     e62:	71 e0       	ldi	r23, 0x01	; 1
     e64:	5c cf       	rjmp	.-328    	; 0xd1e <hienthi()+0xa0>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:178
      display.display();  
    }
    break;
case 6:
   {   //MAX 9814 sound db
      display.clearDisplay();            //Clear the display everytime
     e66:	82 ec       	ldi	r24, 0xC2	; 194
     e68:	91 e0       	ldi	r25, 0x01	; 1
     e6a:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <Adafruit_SSD1306::clearDisplay()>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:179
      display.setTextSize(2);            //Setting the text size and color         
     e6e:	62 e0       	ldi	r22, 0x02	; 2
     e70:	82 ec       	ldi	r24, 0xC2	; 194
     e72:	91 e0       	ldi	r25, 0x01	; 1
     e74:	0e 94 73 11 	call	0x22e6	; 0x22e6 <Adafruit_GFX::setTextSize(unsigned char)>
_ZN12Adafruit_GFX12setTextColorEj():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:134
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <display+0x13>
     e80:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <display+0x12>
     e84:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <display+0x11>
     e88:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <display+0x10>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:122
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
     e8c:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <display+0xd>
     e90:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <display+0xc>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:123
    cursor_y = y;
     e94:	84 e1       	ldi	r24, 0x14	; 20
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <display+0xf>
     e9c:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <display+0xe>
_Z7hienthiv():
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:182
      display.setTextColor(WHITE);             
      display.setCursor(0,20);           //Setting the cursor position
      display.print("Volt:");              //Display the temperature and humidity as "T: 24.64 C
     ea0:	60 e4       	ldi	r22, 0x40	; 64
     ea2:	71 e0       	ldi	r23, 0x01	; 1
     ea4:	3c cf       	rjmp	.-392    	; 0xd1e <hienthi()+0xa0>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:190
      display.display();  
    }
    break;
 case 7:
   {   //GP2Y1010 dust
    display.clearDisplay();
     ea6:	82 ec       	ldi	r24, 0xC2	; 194
     ea8:	91 e0       	ldi	r25, 0x01	; 1
     eaa:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <Adafruit_SSD1306::clearDisplay()>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:191
    display.setTextSize(2);            //Setting the text size and color         
     eae:	62 e0       	ldi	r22, 0x02	; 2
     eb0:	82 ec       	ldi	r24, 0xC2	; 194
     eb2:	91 e0       	ldi	r25, 0x01	; 1
     eb4:	0e 94 73 11 	call	0x22e6	; 0x22e6 <Adafruit_GFX::setTextSize(unsigned char)>
_ZN12Adafruit_GFX12setTextColorEj():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:134
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <display+0x13>
     ec0:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <display+0x12>
     ec4:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <display+0x11>
     ec8:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <display+0x10>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:122
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
     ecc:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <display+0xd>
     ed0:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <display+0xc>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:123
    cursor_y = y;
     ed4:	84 e1       	ldi	r24, 0x14	; 20
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <display+0xf>
     edc:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <display+0xe>
_Z7hienthiv():
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:194
    display.setTextColor(WHITE);             
    display.setCursor(0,20);           //Setting the cursor position
    display.print("DUST:");              //Display the temperature and humidity as "T: 24.64 C
     ee0:	66 e4       	ldi	r22, 0x46	; 70
     ee2:	71 e0       	ldi	r23, 0x01	; 1
     ee4:	82 ec       	ldi	r24, 0xC2	; 194
     ee6:	91 e0       	ldi	r25, 0x01	; 1
     ee8:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <Print::print(char const*)>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:196
    //display.print(dustDensity);
    display.setTextSize(1); 
     eec:	61 e0       	ldi	r22, 0x01	; 1
     eee:	82 ec       	ldi	r24, 0xC2	; 194
     ef0:	91 e0       	ldi	r25, 0x01	; 1
     ef2:	0e 94 73 11 	call	0x22e6	; 0x22e6 <Adafruit_GFX::setTextSize(unsigned char)>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:122
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
     ef6:	88 e2       	ldi	r24, 0x28	; 40
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <display+0xd>
     efe:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <display+0xc>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:123
    cursor_y = y;
     f02:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <display+0xf>
     f06:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <display+0xe>
_Z7hienthiv():
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:198
    display.setCursor(40,40  );
    display.print(" mg/m3");
     f0a:	6c e4       	ldi	r22, 0x4C	; 76
     f0c:	71 e0       	ldi	r23, 0x01	; 1
     f0e:	07 cf       	rjmp	.-498    	; 0xd1e <hienthi()+0xa0>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:204
    display.display(); 
    }  
    break; 
case 8:
   {   //MH19 CO2
    display.clearDisplay();            //Clear the display everytime
     f10:	82 ec       	ldi	r24, 0xC2	; 194
     f12:	91 e0       	ldi	r25, 0x01	; 1
     f14:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <Adafruit_SSD1306::clearDisplay()>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:205
    display.setTextSize(2);            //Setting the text size and color         
     f18:	62 e0       	ldi	r22, 0x02	; 2
     f1a:	82 ec       	ldi	r24, 0xC2	; 194
     f1c:	91 e0       	ldi	r25, 0x01	; 1
     f1e:	0e 94 73 11 	call	0x22e6	; 0x22e6 <Adafruit_GFX::setTextSize(unsigned char)>
_ZN12Adafruit_GFX12setTextColorEj():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:134
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <display+0x13>
     f2a:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <display+0x12>
     f2e:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <display+0x11>
     f32:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <display+0x10>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:122
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
     f36:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <display+0xd>
     f3a:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <display+0xc>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:123
    cursor_y = y;
     f3e:	84 e1       	ldi	r24, 0x14	; 20
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <display+0xf>
     f46:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <display+0xe>
_Z7hienthiv():
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:208
    display.setTextColor(WHITE);             
    display.setCursor(0,20);           //Setting the cursor position
    display.print("CO2:");              //Display the temperature and humidity as "T: 24.64 C
     f4a:	66 e1       	ldi	r22, 0x16	; 22
     f4c:	71 e0       	ldi	r23, 0x01	; 1
     f4e:	82 ec       	ldi	r24, 0xC2	; 194
     f50:	91 e0       	ldi	r25, 0x01	; 1
     f52:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <Print::print(char const*)>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:122
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
     f56:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <display+0xd>
     f5a:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <display+0xc>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:123
    cursor_y = y;
     f5e:	8d e2       	ldi	r24, 0x2D	; 45
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <display+0xf>
     f66:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <display+0xe>
_Z7hienthiv():
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:211
    //display.print(CO2);               //                                         H: 59.12 %"
    display.setCursor(0,45);           //Setting the cursor position
    display.print("ppm"); 
     f6a:	6c e1       	ldi	r22, 0x1C	; 28
     f6c:	71 e0       	ldi	r23, 0x01	; 1
     f6e:	d7 ce       	rjmp	.-594    	; 0xd1e <hienthi()+0xa0>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:216
    display.display();   
    }
    break;
   } //end switch
}
     f70:	08 95       	ret

00000f72 <loop>:
loop():
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:53
return current;
}


void loop() {    
button();
     f72:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <button()>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:54
hienthi(); 
     f76:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <hienthi()>

00000f7a <_GLOBAL__sub_I_sht31>:
_GLOBAL__sub_I_sht31():
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:216
    display.print("ppm"); 
    display.display();   
    }
    break;
   } //end switch
}
     f7a:	8f 92       	push	r8
     f7c:	9f 92       	push	r9
     f7e:	af 92       	push	r10
     f80:	bf 92       	push	r11
     f82:	cf 92       	push	r12
     f84:	df 92       	push	r13
     f86:	ef 92       	push	r14
     f88:	ff 92       	push	r15
     f8a:	0f 93       	push	r16
__static_initialization_and_destruction_0():
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:6
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>       // ssd1306 oled library
#include <Adafruit_SSD1306.h>  
#include "Adafruit_SHT31.h"
 Adafruit_SHT31 sht31 = Adafruit_SHT31();
     f8c:	61 e1       	ldi	r22, 0x11	; 17
     f8e:	72 e0       	ldi	r23, 0x02	; 2
     f90:	82 e0       	ldi	r24, 0x02	; 2
     f92:	92 e0       	ldi	r25, 0x02	; 2
     f94:	0e 94 78 18 	call	0x30f0	; 0x30f0 <Adafruit_SHT31::Adafruit_SHT31(TwoWire*)>
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:13
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET    -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
     f98:	80 ea       	ldi	r24, 0xA0	; 160
     f9a:	88 2e       	mov	r8, r24
     f9c:	86 e8       	ldi	r24, 0x86	; 134
     f9e:	98 2e       	mov	r9, r24
     fa0:	aa 24       	eor	r10, r10
     fa2:	a3 94       	inc	r10
     fa4:	b1 2c       	mov	r11, r1
     fa6:	90 e8       	ldi	r25, 0x80	; 128
     fa8:	c9 2e       	mov	r12, r25
     faa:	9a e1       	ldi	r25, 0x1A	; 26
     fac:	d9 2e       	mov	r13, r25
     fae:	96 e0       	ldi	r25, 0x06	; 6
     fb0:	e9 2e       	mov	r14, r25
     fb2:	f1 2c       	mov	r15, r1
     fb4:	0f ef       	ldi	r16, 0xFF	; 255
     fb6:	21 e1       	ldi	r18, 0x11	; 17
     fb8:	32 e0       	ldi	r19, 0x02	; 2
     fba:	40 e4       	ldi	r20, 0x40	; 64
     fbc:	60 e8       	ldi	r22, 0x80	; 128
     fbe:	82 ec       	ldi	r24, 0xC2	; 194
     fc0:	91 e0       	ldi	r25, 0x01	; 1
     fc2:	0e 94 56 12 	call	0x24ac	; 0x24ac <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)>
_GLOBAL__sub_I_sht31():
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:216
    display.print("ppm"); 
    display.display();   
    }
    break;
   } //end switch
}
     fc6:	0f 91       	pop	r16
     fc8:	ff 90       	pop	r15
     fca:	ef 90       	pop	r14
     fcc:	df 90       	pop	r13
     fce:	cf 90       	pop	r12
     fd0:	bf 90       	pop	r11
     fd2:	af 90       	pop	r10
     fd4:	9f 90       	pop	r9
     fd6:	8f 90       	pop	r8
     fd8:	08 95       	ret

00000fda <_GLOBAL__sub_D_sht31>:
_GLOBAL__sub_D_sht31():
C:\Users\Admin_PC\OneDrive\Desktop\oled_multI_screen/oled_multI_screen.ino:13
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET    -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
     fda:	82 ec       	ldi	r24, 0xC2	; 194
     fdc:	91 e0       	ldi	r25, 0x01	; 1
     fde:	0c 94 a1 12 	jmp	0x2542	; 0x2542 <Adafruit_SSD1306::~Adafruit_SSD1306()>

00000fe2 <SPIClass::begin()>:
_ZN8SPIClass5beginEv():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\SPI\src/SPI.cpp:27
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
     fe2:	cf 93       	push	r28
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\SPI\src/SPI.cpp:28
  uint8_t sreg = SREG;
     fe4:	cf b7       	in	r28, 0x3f	; 63
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\SPI\src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
     fe6:	f8 94       	cli
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\SPI\src/SPI.cpp:30
  if (!initialized) {
     fe8:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <SPIClass::initialized>
     fec:	81 11       	cpse	r24, r1
     fee:	23 c0       	rjmp	.+70     	; 0x1036 <SPIClass::begin()+0x54>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\SPI\src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
     ff0:	e5 ec       	ldi	r30, 0xC5	; 197
     ff2:	fa e0       	ldi	r31, 0x0A	; 10
     ff4:	84 91       	lpm	r24, Z
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\SPI\src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
     ff6:	e0 e9       	ldi	r30, 0x90	; 144
     ff8:	fa e0       	ldi	r31, 0x0A	; 10
     ffa:	94 91       	lpm	r25, Z
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\SPI\src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
     ffc:	e8 2f       	mov	r30, r24
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	ee 0f       	add	r30, r30
    1002:	ff 1f       	adc	r31, r31
    1004:	ee 5e       	subi	r30, 0xEE	; 238
    1006:	f4 4f       	sbci	r31, 0xF4	; 244
    1008:	a5 91       	lpm	r26, Z+
    100a:	b4 91       	lpm	r27, Z
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\SPI\src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    100c:	ec 91       	ld	r30, X
    100e:	e9 23       	and	r30, r25
    1010:	21 f4       	brne	.+8      	; 0x101a <SPIClass::begin()+0x38>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\SPI\src/SPI.cpp:39
      digitalWrite(SS, HIGH);
    1012:	61 e0       	ldi	r22, 0x01	; 1
    1014:	88 e0       	ldi	r24, 0x08	; 8
    1016:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\SPI\src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    101a:	61 e0       	ldi	r22, 0x01	; 1
    101c:	88 e0       	ldi	r24, 0x08	; 8
    101e:	0e 94 8a 19 	call	0x3314	; 0x3314 <pinMode>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\SPI\src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    1022:	6c 9a       	sbi	0x0d, 4	; 13
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\SPI\src/SPI.cpp:51
    SPCR |= _BV(SPE);
    1024:	6e 9a       	sbi	0x0d, 6	; 13
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\SPI\src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    1026:	61 e0       	ldi	r22, 0x01	; 1
    1028:	89 e0       	ldi	r24, 0x09	; 9
    102a:	0e 94 8a 19 	call	0x3314	; 0x3314 <pinMode>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\SPI\src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
    102e:	61 e0       	ldi	r22, 0x01	; 1
    1030:	8a e0       	ldi	r24, 0x0A	; 10
    1032:	0e 94 8a 19 	call	0x3314	; 0x3314 <pinMode>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\SPI\src/SPI.cpp:62
  }
  initialized++; // reference count
    1036:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <SPIClass::initialized>
    103a:	8f 5f       	subi	r24, 0xFF	; 255
    103c:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <SPIClass::initialized>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\SPI\src/SPI.cpp:63
  SREG = sreg;
    1040:	cf bf       	out	0x3f, r28	; 63
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\SPI\src/SPI.cpp:64
}
    1042:	cf 91       	pop	r28
    1044:	08 95       	ret

00001046 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src/Wire.cpp:326

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	08 95       	ret

0000104c <TwoWire::available()>:
_ZN7TwoWire9availableEv():
    104c:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <TwoWire::rxBufferLength>
    1050:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <TwoWire::rxBufferIndex>
    1054:	89 1b       	sub	r24, r25
    1056:	99 0b       	sbc	r25, r25
    1058:	08 95       	ret

0000105a <TwoWire::read()>:
_ZN7TwoWire4readEv():
    105a:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <TwoWire::rxBufferIndex>
    105e:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <TwoWire::rxBufferLength>
    1062:	2f ef       	ldi	r18, 0xFF	; 255
    1064:	3f ef       	ldi	r19, 0xFF	; 255
    1066:	98 17       	cp	r25, r24
    1068:	48 f4       	brcc	.+18     	; 0x107c <TwoWire::read()+0x22>
    106a:	e9 2f       	mov	r30, r25
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	e9 5b       	subi	r30, 0xB9	; 185
    1070:	fd 4f       	sbci	r31, 0xFD	; 253
    1072:	20 81       	ld	r18, Z
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	9f 5f       	subi	r25, 0xFF	; 255
    1078:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <TwoWire::rxBufferIndex>
    107c:	c9 01       	movw	r24, r18
    107e:	08 95       	ret

00001080 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
    1080:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <TwoWire::rxBufferIndex>
    1084:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <TwoWire::rxBufferLength>
    1088:	e8 17       	cp	r30, r24
    108a:	30 f4       	brcc	.+12     	; 0x1098 <TwoWire::peek()+0x18>
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	e9 5b       	subi	r30, 0xB9	; 185
    1090:	fd 4f       	sbci	r31, 0xFD	; 253
    1092:	80 81       	ld	r24, Z
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	08 95       	ret
    1098:	8f ef       	ldi	r24, 0xFF	; 255
    109a:	9f ef       	ldi	r25, 0xFF	; 255
    109c:	08 95       	ret

0000109e <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
    109e:	08 95       	ret

000010a0 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	ec 01       	movw	r28, r24
    10a6:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <TwoWire::user_onReceive>
    10aa:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <TwoWire::user_onReceive+0x1>
    10ae:	30 97       	sbiw	r30, 0x00	; 0
    10b0:	f1 f0       	breq	.+60     	; 0x10ee <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
    10b2:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <TwoWire::rxBufferIndex>
    10b6:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <TwoWire::rxBufferLength>
    10ba:	98 17       	cp	r25, r24
    10bc:	c0 f0       	brcs	.+48     	; 0x10ee <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	29 2f       	mov	r18, r25
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	26 17       	cp	r18, r22
    10c6:	37 07       	cpc	r19, r23
    10c8:	54 f4       	brge	.+20     	; 0x10de <TwoWire::onReceiveService(unsigned char*, int)+0x3e>
    10ca:	de 01       	movw	r26, r28
    10cc:	a2 0f       	add	r26, r18
    10ce:	b3 1f       	adc	r27, r19
    10d0:	4c 91       	ld	r20, X
    10d2:	29 5b       	subi	r18, 0xB9	; 185
    10d4:	3d 4f       	sbci	r19, 0xFD	; 253
    10d6:	d9 01       	movw	r26, r18
    10d8:	4c 93       	st	X, r20
    10da:	9f 5f       	subi	r25, 0xFF	; 255
    10dc:	f1 cf       	rjmp	.-30     	; 0x10c0 <TwoWire::onReceiveService(unsigned char*, int)+0x20>
    10de:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <TwoWire::rxBufferIndex>
    10e2:	60 93 45 02 	sts	0x0245, r22	; 0x800245 <TwoWire::rxBufferLength>
    10e6:	cb 01       	movw	r24, r22
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	09 94       	ijmp
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	08 95       	ret

000010f4 <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
    10f4:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <TwoWire::user_onRequest>
    10f8:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <TwoWire::user_onRequest+0x1>
    10fc:	30 97       	sbiw	r30, 0x00	; 0
    10fe:	29 f0       	breq	.+10     	; 0x110a <__stack+0xb>
    1100:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <TwoWire::txBufferIndex>
    1104:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <TwoWire::txBufferLength>
    1108:	09 94       	ijmp
    110a:	08 95       	ret

0000110c <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
    110c:	cf 93       	push	r28
    110e:	df 93       	push	r29
    1110:	1f 92       	push	r1
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	69 83       	std	Y+1, r22	; 0x01
    1118:	20 91 21 02 	lds	r18, 0x0221	; 0x800221 <TwoWire::transmitting>
    111c:	22 23       	and	r18, r18
    111e:	f9 f0       	breq	.+62     	; 0x115e <TwoWire::write(unsigned char)+0x52>
    1120:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <TwoWire::txBufferLength>
    1124:	20 32       	cpi	r18, 0x20	; 32
    1126:	58 f0       	brcs	.+22     	; 0x113e <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
    1128:	21 e0       	ldi	r18, 0x01	; 1
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	fc 01       	movw	r30, r24
    112e:	33 83       	std	Z+3, r19	; 0x03
    1130:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	0f 90       	pop	r0
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	08 95       	ret
    113e:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <TwoWire::txBufferIndex>
    1142:	e8 2f       	mov	r30, r24
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	ec 5d       	subi	r30, 0xDC	; 220
    1148:	fd 4f       	sbci	r31, 0xFD	; 253
    114a:	99 81       	ldd	r25, Y+1	; 0x01
    114c:	90 83       	st	Z, r25
    114e:	8f 5f       	subi	r24, 0xFF	; 255
    1150:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <TwoWire::txBufferIndex>
    1154:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <TwoWire::txBufferLength>
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	ec cf       	rjmp	.-40     	; 0x1136 <TwoWire::write(unsigned char)+0x2a>
    115e:	61 e0       	ldi	r22, 0x01	; 1
    1160:	ce 01       	movw	r24, r28
    1162:	01 96       	adiw	r24, 0x01	; 1
    1164:	0e 94 b3 09 	call	0x1366	; 0x1366 <twi_transmit>
    1168:	f7 cf       	rjmp	.-18     	; 0x1158 <TwoWire::write(unsigned char)+0x4c>

0000116a <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
    116a:	cf 92       	push	r12
    116c:	df 92       	push	r13
    116e:	ef 92       	push	r14
    1170:	ff 92       	push	r15
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	7c 01       	movw	r14, r24
    117c:	cb 01       	movw	r24, r22
    117e:	8a 01       	movw	r16, r20
    1180:	20 91 21 02 	lds	r18, 0x0221	; 0x800221 <TwoWire::transmitting>
    1184:	22 23       	and	r18, r18
    1186:	89 f0       	breq	.+34     	; 0x11aa <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    1188:	eb 01       	movw	r28, r22
    118a:	6b 01       	movw	r12, r22
    118c:	c4 0e       	add	r12, r20
    118e:	d5 1e       	adc	r13, r21
    1190:	cc 15       	cp	r28, r12
    1192:	dd 05       	cpc	r29, r13
    1194:	69 f0       	breq	.+26     	; 0x11b0 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    1196:	69 91       	ld	r22, Y+
    1198:	d7 01       	movw	r26, r14
    119a:	ed 91       	ld	r30, X+
    119c:	fc 91       	ld	r31, X
    119e:	01 90       	ld	r0, Z+
    11a0:	f0 81       	ld	r31, Z
    11a2:	e0 2d       	mov	r30, r0
    11a4:	c7 01       	movw	r24, r14
    11a6:	09 95       	icall
    11a8:	f3 cf       	rjmp	.-26     	; 0x1190 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
    11aa:	64 2f       	mov	r22, r20
    11ac:	0e 94 b3 09 	call	0x1366	; 0x1366 <twi_transmit>
    11b0:	c8 01       	movw	r24, r16
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	1f 91       	pop	r17
    11b8:	0f 91       	pop	r16
    11ba:	ff 90       	pop	r15
    11bc:	ef 90       	pop	r14
    11be:	df 90       	pop	r13
    11c0:	cf 90       	pop	r12
    11c2:	08 95       	ret

000011c4 <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
    11c4:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <TwoWire::rxBufferIndex>
    11c8:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <TwoWire::rxBufferLength>
    11cc:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <TwoWire::txBufferIndex>
    11d0:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <TwoWire::txBufferLength>
    11d4:	0e 94 2b 09 	call	0x1256	; 0x1256 <twi_init>
    11d8:	8a e7       	ldi	r24, 0x7A	; 122
    11da:	98 e0       	ldi	r25, 0x08	; 8
    11dc:	0e 94 df 09 	call	0x13be	; 0x13be <twi_attachSlaveTxEvent>
    11e0:	80 e5       	ldi	r24, 0x50	; 80
    11e2:	98 e0       	ldi	r25, 0x08	; 8
    11e4:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <twi_attachSlaveRxEvent>

000011e8 <TwoWire::setClock(unsigned long)>:
_ZN7TwoWire8setClockEm():
    11e8:	cb 01       	movw	r24, r22
    11ea:	ba 01       	movw	r22, r20
    11ec:	0c 94 49 09 	jmp	0x1292	; 0x1292 <twi_setFrequency>

000011f0 <TwoWire::beginTransmission(unsigned char)>:
_ZN7TwoWire17beginTransmissionEh():
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <TwoWire::transmitting>
    11f6:	60 93 44 02 	sts	0x0244, r22	; 0x800244 <TwoWire::txAddress>
    11fa:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <TwoWire::txBufferIndex>
    11fe:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <TwoWire::txBufferLength>
    1202:	08 95       	ret

00001204 <TwoWire::beginTransmission(int)>:
_ZN7TwoWire17beginTransmissionEi():
    1204:	0c 94 f8 08 	jmp	0x11f0	; 0x11f0 <TwoWire::beginTransmission(unsigned char)>

00001208 <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
    1208:	0f 93       	push	r16
    120a:	06 2f       	mov	r16, r22
    120c:	21 e0       	ldi	r18, 0x01	; 1
    120e:	40 91 22 02 	lds	r20, 0x0222	; 0x800222 <TwoWire::txBufferLength>
    1212:	64 e2       	ldi	r22, 0x24	; 36
    1214:	72 e0       	ldi	r23, 0x02	; 2
    1216:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <TwoWire::txAddress>
    121a:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <twi_writeTo>
    121e:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <TwoWire::txBufferIndex>
    1222:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <TwoWire::txBufferLength>
    1226:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <TwoWire::transmitting>
    122a:	0f 91       	pop	r16
    122c:	08 95       	ret

0000122e <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
    122e:	61 e0       	ldi	r22, 0x01	; 1
    1230:	0c 94 04 09 	jmp	0x1208	; 0x1208 <TwoWire::endTransmission(unsigned char)>

00001234 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1234:	e1 e1       	ldi	r30, 0x11	; 17
    1236:	f2 e0       	ldi	r31, 0x02	; 2
    1238:	13 82       	std	Z+3, r1	; 0x03
    123a:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    123c:	88 ee       	ldi	r24, 0xE8	; 232
    123e:	93 e0       	ldi	r25, 0x03	; 3
    1240:	a0 e0       	ldi	r26, 0x00	; 0
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	84 83       	std	Z+4, r24	; 0x04
    1246:	95 83       	std	Z+5, r25	; 0x05
    1248:	a6 83       	std	Z+6, r26	; 0x06
    124a:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src/Wire.cpp:49
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    124c:	87 e5       	ldi	r24, 0x57	; 87
    124e:	91 e0       	ldi	r25, 0x01	; 1
    1250:	91 83       	std	Z+1, r25	; 0x01
    1252:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src/Wire.cpp:330
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1254:	08 95       	ret

00001256 <twi_init>:
twi_init():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1256:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <twi_state>
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <twi_sendStop>
    1260:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <twi_inRepStart>
    1264:	61 e0       	ldi	r22, 0x01	; 1
    1266:	83 e1       	ldi	r24, 0x13	; 19
    1268:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
    126c:	61 e0       	ldi	r22, 0x01	; 1
    126e:	82 e1       	ldi	r24, 0x12	; 18
    1270:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
    1274:	e1 e7       	ldi	r30, 0x71	; 113
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	8e 7f       	andi	r24, 0xFE	; 254
    127c:	80 83       	st	Z, r24
    127e:	80 81       	ld	r24, Z
    1280:	8d 7f       	andi	r24, 0xFD	; 253
    1282:	80 83       	st	Z, r24
    1284:	88 e4       	ldi	r24, 0x48	; 72
    1286:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    128a:	85 e4       	ldi	r24, 0x45	; 69
    128c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1290:	08 95       	ret

00001292 <twi_setFrequency>:
twi_setFrequency():
    1292:	9b 01       	movw	r18, r22
    1294:	ac 01       	movw	r20, r24
    1296:	60 e0       	ldi	r22, 0x00	; 0
    1298:	74 e2       	ldi	r23, 0x24	; 36
    129a:	84 ef       	ldi	r24, 0xF4	; 244
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <__udivmodsi4>
    12a2:	20 51       	subi	r18, 0x10	; 16
    12a4:	31 09       	sbc	r19, r1
    12a6:	41 09       	sbc	r20, r1
    12a8:	51 09       	sbc	r21, r1
    12aa:	56 95       	lsr	r21
    12ac:	47 95       	ror	r20
    12ae:	37 95       	ror	r19
    12b0:	27 95       	ror	r18
    12b2:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    12b6:	08 95       	ret

000012b8 <twi_writeTo>:
twi_writeTo():
    12b8:	0f 93       	push	r16
    12ba:	41 32       	cpi	r20, 0x21	; 33
    12bc:	08 f0       	brcs	.+2      	; 0x12c0 <twi_writeTo+0x8>
    12be:	4b c0       	rjmp	.+150    	; 0x1356 <twi_writeTo+0x9e>
    12c0:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <twi_state>
    12c4:	91 11       	cpse	r25, r1
    12c6:	fc cf       	rjmp	.-8      	; 0x12c0 <twi_writeTo+0x8>
    12c8:	92 e0       	ldi	r25, 0x02	; 2
    12ca:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <twi_state>
    12ce:	00 93 d2 02 	sts	0x02D2, r16	; 0x8002d2 <twi_sendStop>
    12d2:	9f ef       	ldi	r25, 0xFF	; 255
    12d4:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <twi_error>
    12d8:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <twi_masterBufferIndex>
    12dc:	40 93 ab 02 	sts	0x02AB, r20	; 0x8002ab <twi_masterBufferLength>
    12e0:	36 2f       	mov	r19, r22
    12e2:	ad ea       	ldi	r26, 0xAD	; 173
    12e4:	b2 e0       	ldi	r27, 0x02	; 2
    12e6:	fb 01       	movw	r30, r22
    12e8:	9e 2f       	mov	r25, r30
    12ea:	93 1b       	sub	r25, r19
    12ec:	94 17       	cp	r25, r20
    12ee:	70 f1       	brcs	.+92     	; 0x134c <twi_writeTo+0x94>
    12f0:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <twi_slarw>
    12f4:	90 91 d3 02 	lds	r25, 0x02D3	; 0x8002d3 <twi_slarw>
    12f8:	88 0f       	add	r24, r24
    12fa:	89 2b       	or	r24, r25
    12fc:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <twi_slarw>
    1300:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <twi_inRepStart>
    1304:	81 30       	cpi	r24, 0x01	; 1
    1306:	29 f5       	brne	.+74     	; 0x1352 <twi_writeTo+0x9a>
    1308:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <twi_inRepStart>
    130c:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <twi_slarw>
    1310:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    1314:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1318:	83 fd       	sbrc	r24, 3
    131a:	f8 cf       	rjmp	.-16     	; 0x130c <twi_writeTo+0x54>
    131c:	85 ec       	ldi	r24, 0xC5	; 197
    131e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1322:	22 23       	and	r18, r18
    1324:	21 f0       	breq	.+8      	; 0x132e <twi_writeTo+0x76>
    1326:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <twi_state>
    132a:	82 30       	cpi	r24, 0x02	; 2
    132c:	d1 f3       	breq	.-12     	; 0x1322 <twi_writeTo+0x6a>
    132e:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <twi_error>
    1332:	8f 3f       	cpi	r24, 0xFF	; 255
    1334:	91 f0       	breq	.+36     	; 0x135a <twi_writeTo+0xa2>
    1336:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <twi_error>
    133a:	80 32       	cpi	r24, 0x20	; 32
    133c:	81 f0       	breq	.+32     	; 0x135e <twi_writeTo+0xa6>
    133e:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <twi_error>
    1342:	80 33       	cpi	r24, 0x30	; 48
    1344:	71 f0       	breq	.+28     	; 0x1362 <twi_writeTo+0xaa>
    1346:	84 e0       	ldi	r24, 0x04	; 4
    1348:	0f 91       	pop	r16
    134a:	08 95       	ret
    134c:	91 91       	ld	r25, Z+
    134e:	9d 93       	st	X+, r25
    1350:	cb cf       	rjmp	.-106    	; 0x12e8 <twi_writeTo+0x30>
    1352:	85 ee       	ldi	r24, 0xE5	; 229
    1354:	e4 cf       	rjmp	.-56     	; 0x131e <twi_writeTo+0x66>
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	f7 cf       	rjmp	.-18     	; 0x1348 <twi_writeTo+0x90>
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	f5 cf       	rjmp	.-22     	; 0x1348 <twi_writeTo+0x90>
    135e:	82 e0       	ldi	r24, 0x02	; 2
    1360:	f3 cf       	rjmp	.-26     	; 0x1348 <twi_writeTo+0x90>
    1362:	83 e0       	ldi	r24, 0x03	; 3
    1364:	f1 cf       	rjmp	.-30     	; 0x1348 <twi_writeTo+0x90>

00001366 <twi_transmit>:
twi_transmit():
    1366:	20 91 89 02 	lds	r18, 0x0289	; 0x800289 <twi_txBufferLength>
    136a:	26 0f       	add	r18, r22
    136c:	33 27       	eor	r19, r19
    136e:	33 1f       	adc	r19, r19
    1370:	21 32       	cpi	r18, 0x21	; 33
    1372:	31 05       	cpc	r19, r1
    1374:	ec f4       	brge	.+58     	; 0x13b0 <twi_transmit+0x4a>
    1376:	20 91 d4 02 	lds	r18, 0x02D4	; 0x8002d4 <twi_state>
    137a:	fc 01       	movw	r30, r24
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	24 30       	cpi	r18, 0x04	; 4
    1382:	69 f0       	breq	.+26     	; 0x139e <twi_transmit+0x38>
    1384:	82 e0       	ldi	r24, 0x02	; 2
    1386:	08 95       	ret
    1388:	a0 91 89 02 	lds	r26, 0x0289	; 0x800289 <twi_txBufferLength>
    138c:	21 91       	ld	r18, Z+
    138e:	ac 01       	movw	r20, r24
    1390:	45 57       	subi	r20, 0x75	; 117
    1392:	5d 4f       	sbci	r21, 0xFD	; 253
    1394:	a4 0f       	add	r26, r20
    1396:	b5 2f       	mov	r27, r21
    1398:	b1 1d       	adc	r27, r1
    139a:	2c 93       	st	X, r18
    139c:	01 96       	adiw	r24, 0x01	; 1
    139e:	86 17       	cp	r24, r22
    13a0:	98 f3       	brcs	.-26     	; 0x1388 <twi_transmit+0x22>
    13a2:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <twi_txBufferLength>
    13a6:	68 0f       	add	r22, r24
    13a8:	60 93 89 02 	sts	0x0289, r22	; 0x800289 <twi_txBufferLength>
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	08 95       	ret
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	08 95       	ret

000013b4 <twi_attachSlaveRxEvent>:
twi_attachSlaveRxEvent():
    13b4:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <twi_onSlaveReceive+0x1>
    13b8:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <twi_onSlaveReceive>
    13bc:	08 95       	ret

000013be <twi_attachSlaveTxEvent>:
twi_attachSlaveTxEvent():
    13be:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <twi_onSlaveTransmit+0x1>
    13c2:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <twi_onSlaveTransmit>
    13c6:	08 95       	ret

000013c8 <twi_stop>:
twi_stop():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    13c8:	85 ed       	ldi	r24, 0xD5	; 213
    13ca:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:376

  // wait for stop condition to be executed on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    13ce:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    13d2:	84 fd       	sbrc	r24, 4
    13d4:	fc cf       	rjmp	.-8      	; 0x13ce <twi_stop+0x6>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    13d6:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <twi_state>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:382
}
    13da:	08 95       	ret

000013dc <twi_releaseBus>:
twi_releaseBus():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    13dc:	85 ec       	ldi	r24, 0xC5	; 197
    13de:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    13e2:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <twi_state>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:397
}
    13e6:	08 95       	ret

000013e8 <__vector_33>:
__vector_33():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:400

ISR(TWI_vect)
{
    13e8:	1f 92       	push	r1
    13ea:	0f 92       	push	r0
    13ec:	0f b6       	in	r0, 0x3f	; 63
    13ee:	0f 92       	push	r0
    13f0:	11 24       	eor	r1, r1
    13f2:	0b b6       	in	r0, 0x3b	; 59
    13f4:	0f 92       	push	r0
    13f6:	2f 93       	push	r18
    13f8:	3f 93       	push	r19
    13fa:	4f 93       	push	r20
    13fc:	5f 93       	push	r21
    13fe:	6f 93       	push	r22
    1400:	7f 93       	push	r23
    1402:	8f 93       	push	r24
    1404:	9f 93       	push	r25
    1406:	af 93       	push	r26
    1408:	bf 93       	push	r27
    140a:	ef 93       	push	r30
    140c:	ff 93       	push	r31
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:401
  switch(TW_STATUS){
    140e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1412:	88 7f       	andi	r24, 0xF8	; 248
    1414:	80 36       	cpi	r24, 0x60	; 96
    1416:	09 f4       	brne	.+2      	; 0x141a <__vector_33+0x32>
    1418:	4e c0       	rjmp	.+156    	; 0x14b6 <__vector_33+0xce>
    141a:	08 f0       	brcs	.+2      	; 0x141e <__vector_33+0x36>
    141c:	41 c0       	rjmp	.+130    	; 0x14a0 <__vector_33+0xb8>
    141e:	88 32       	cpi	r24, 0x28	; 40
    1420:	09 f4       	brne	.+2      	; 0x1424 <__vector_33+0x3c>
    1422:	aa c0       	rjmp	.+340    	; 0x1578 <__vector_33+0x190>
    1424:	28 f5       	brcc	.+74     	; 0x1470 <__vector_33+0x88>
    1426:	80 31       	cpi	r24, 0x10	; 16
    1428:	09 f4       	brne	.+2      	; 0x142c <__vector_33+0x44>
    142a:	9e c0       	rjmp	.+316    	; 0x1568 <__vector_33+0x180>
    142c:	c8 f4       	brcc	.+50     	; 0x1460 <__vector_33+0x78>
    142e:	88 23       	and	r24, r24
    1430:	09 f4       	brne	.+2      	; 0x1434 <__vector_33+0x4c>
    1432:	fb c0       	rjmp	.+502    	; 0x162a <__vector_33+0x242>
    1434:	88 30       	cpi	r24, 0x08	; 8
    1436:	09 f4       	brne	.+2      	; 0x143a <__vector_33+0x52>
    1438:	97 c0       	rjmp	.+302    	; 0x1568 <__vector_33+0x180>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    143a:	ff 91       	pop	r31
    143c:	ef 91       	pop	r30
    143e:	bf 91       	pop	r27
    1440:	af 91       	pop	r26
    1442:	9f 91       	pop	r25
    1444:	8f 91       	pop	r24
    1446:	7f 91       	pop	r23
    1448:	6f 91       	pop	r22
    144a:	5f 91       	pop	r21
    144c:	4f 91       	pop	r20
    144e:	3f 91       	pop	r19
    1450:	2f 91       	pop	r18
    1452:	0f 90       	pop	r0
    1454:	0b be       	out	0x3b, r0	; 59
    1456:	0f 90       	pop	r0
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	0f 90       	pop	r0
    145c:	1f 90       	pop	r1
    145e:	18 95       	reti
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1460:	88 31       	cpi	r24, 0x18	; 24
    1462:	09 f4       	brne	.+2      	; 0x1466 <__vector_33+0x7e>
    1464:	89 c0       	rjmp	.+274    	; 0x1578 <__vector_33+0x190>
    1466:	80 32       	cpi	r24, 0x20	; 32
    1468:	41 f7       	brne	.-48     	; 0x143a <__vector_33+0x52>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    146a:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <twi_error>
    146e:	15 c0       	rjmp	.+42     	; 0x149a <__vector_33+0xb2>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1470:	80 34       	cpi	r24, 0x40	; 64
    1472:	09 f4       	brne	.+2      	; 0x1476 <__vector_33+0x8e>
    1474:	9e c0       	rjmp	.+316    	; 0x15b2 <__vector_33+0x1ca>
    1476:	48 f4       	brcc	.+18     	; 0x148a <__vector_33+0xa2>
    1478:	80 33       	cpi	r24, 0x30	; 48
    147a:	b9 f3       	breq	.-18     	; 0x146a <__vector_33+0x82>
    147c:	88 33       	cpi	r24, 0x38	; 56
    147e:	e9 f6       	brne	.-70     	; 0x143a <__vector_33+0x52>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1480:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <twi_error>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:441
      twi_releaseBus();
    1484:	0e 94 ee 09 	call	0x13dc	; 0x13dc <twi_releaseBus>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:442
      break;
    1488:	d8 cf       	rjmp	.-80     	; 0x143a <__vector_33+0x52>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    148a:	80 35       	cpi	r24, 0x50	; 80
    148c:	09 f4       	brne	.+2      	; 0x1490 <__vector_33+0xa8>
    148e:	85 c0       	rjmp	.+266    	; 0x159a <__vector_33+0x1b2>
    1490:	88 35       	cpi	r24, 0x58	; 88
    1492:	09 f4       	brne	.+2      	; 0x1496 <__vector_33+0xae>
    1494:	96 c0       	rjmp	.+300    	; 0x15c2 <__vector_33+0x1da>
    1496:	88 34       	cpi	r24, 0x48	; 72
    1498:	81 f6       	brne	.-96     	; 0x143a <__vector_33+0x52>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    149a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <twi_stop>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:562
      break;
  }
}
    149e:	cd cf       	rjmp	.-102    	; 0x143a <__vector_33+0x52>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    14a0:	88 39       	cpi	r24, 0x98	; 152
    14a2:	09 f4       	brne	.+2      	; 0x14a6 <__vector_33+0xbe>
    14a4:	8c c0       	rjmp	.+280    	; 0x15be <__vector_33+0x1d6>
    14a6:	38 f5       	brcc	.+78     	; 0x14f6 <__vector_33+0x10e>
    14a8:	88 37       	cpi	r24, 0x78	; 120
    14aa:	29 f0       	breq	.+10     	; 0x14b6 <__vector_33+0xce>
    14ac:	50 f4       	brcc	.+20     	; 0x14c2 <__vector_33+0xda>
    14ae:	88 36       	cpi	r24, 0x68	; 104
    14b0:	11 f0       	breq	.+4      	; 0x14b6 <__vector_33+0xce>
    14b2:	80 37       	cpi	r24, 0x70	; 112
    14b4:	11 f6       	brne	.-124    	; 0x143a <__vector_33+0x52>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    14b6:	83 e0       	ldi	r24, 0x03	; 3
    14b8:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <twi_state>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    14bc:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <twi_rxBufferIndex>
    14c0:	57 c0       	rjmp	.+174    	; 0x1570 <__vector_33+0x188>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    14c2:	88 38       	cpi	r24, 0x88	; 136
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <__vector_33+0xe0>
    14c6:	7b c0       	rjmp	.+246    	; 0x15be <__vector_33+0x1d6>
    14c8:	80 39       	cpi	r24, 0x90	; 144
    14ca:	19 f0       	breq	.+6      	; 0x14d2 <__vector_33+0xea>
    14cc:	80 38       	cpi	r24, 0x80	; 128
    14ce:	09 f0       	breq	.+2      	; 0x14d2 <__vector_33+0xea>
    14d0:	b4 cf       	rjmp	.-152    	; 0x143a <__vector_33+0x52>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    14d2:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <twi_rxBufferIndex>
    14d6:	80 32       	cpi	r24, 0x20	; 32
    14d8:	08 f0       	brcs	.+2      	; 0x14dc <__vector_33+0xf4>
    14da:	71 c0       	rjmp	.+226    	; 0x15be <__vector_33+0x1d6>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    14dc:	e0 91 68 02 	lds	r30, 0x0268	; 0x800268 <twi_rxBufferIndex>
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	8e 0f       	add	r24, r30
    14e4:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <twi_rxBufferIndex>
    14e8:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	e7 59       	subi	r30, 0x97	; 151
    14f0:	fd 4f       	sbci	r31, 0xFD	; 253
    14f2:	80 83       	st	Z, r24
    14f4:	3d c0       	rjmp	.+122    	; 0x1570 <__vector_33+0x188>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    14f6:	80 3b       	cpi	r24, 0xB0	; 176
    14f8:	39 f0       	breq	.+14     	; 0x1508 <__vector_33+0x120>
    14fa:	e0 f4       	brcc	.+56     	; 0x1534 <__vector_33+0x14c>
    14fc:	80 3a       	cpi	r24, 0xA0	; 160
    14fe:	09 f4       	brne	.+2      	; 0x1502 <__vector_33+0x11a>
    1500:	79 c0       	rjmp	.+242    	; 0x15f4 <__vector_33+0x20c>
    1502:	88 3a       	cpi	r24, 0xA8	; 168
    1504:	09 f0       	breq	.+2      	; 0x1508 <__vector_33+0x120>
    1506:	99 cf       	rjmp	.-206    	; 0x143a <__vector_33+0x52>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:521

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1508:	84 e0       	ldi	r24, 0x04	; 4
    150a:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <twi_state>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    150e:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <twi_txBufferIndex>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1512:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <twi_txBufferLength>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1516:	e0 91 cf 02 	lds	r30, 0x02CF	; 0x8002cf <twi_onSlaveTransmit>
    151a:	f0 91 d0 02 	lds	r31, 0x02D0	; 0x8002d0 <twi_onSlaveTransmit+0x1>
    151e:	09 95       	icall
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1520:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <twi_txBufferLength>
    1524:	81 11       	cpse	r24, r1
    1526:	0f c0       	rjmp	.+30     	; 0x1546 <__vector_33+0x15e>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:531
        twi_txBufferLength = 1;
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <twi_txBufferLength>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    152e:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <twi_txBuffer>
    1532:	09 c0       	rjmp	.+18     	; 0x1546 <__vector_33+0x15e>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1534:	80 3c       	cpi	r24, 0xC0	; 192
    1536:	09 f4       	brne	.+2      	; 0x153a <__vector_33+0x152>
    1538:	76 c0       	rjmp	.+236    	; 0x1626 <__vector_33+0x23e>
    153a:	88 3c       	cpi	r24, 0xC8	; 200
    153c:	09 f4       	brne	.+2      	; 0x1540 <__vector_33+0x158>
    153e:	73 c0       	rjmp	.+230    	; 0x1626 <__vector_33+0x23e>
    1540:	88 3b       	cpi	r24, 0xB8	; 184
    1542:	09 f0       	breq	.+2      	; 0x1546 <__vector_33+0x15e>
    1544:	7a cf       	rjmp	.-268    	; 0x143a <__vector_33+0x52>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1546:	e0 91 8a 02 	lds	r30, 0x028A	; 0x80028a <twi_txBufferIndex>
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	8e 0f       	add	r24, r30
    154e:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <twi_txBufferIndex>
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	e5 57       	subi	r30, 0x75	; 117
    1556:	fd 4f       	sbci	r31, 0xFD	; 253
    1558:	80 81       	ld	r24, Z
    155a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    155e:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <twi_txBufferIndex>
    1562:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <twi_txBufferLength>
    1566:	29 c0       	rjmp	.+82     	; 0x15ba <__vector_33+0x1d2>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1568:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <twi_slarw>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    156c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
twi_reply():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1570:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1572:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1576:	61 cf       	rjmp	.-318    	; 0x143a <__vector_33+0x52>
__vector_33():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1578:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <twi_masterBufferIndex>
    157c:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <twi_masterBufferLength>
    1580:	98 17       	cp	r25, r24
    1582:	58 f5       	brcc	.+86     	; 0x15da <__vector_33+0x1f2>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1584:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <twi_masterBufferIndex>
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	8e 0f       	add	r24, r30
    158c:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <twi_masterBufferIndex>
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	e3 55       	subi	r30, 0x53	; 83
    1594:	fd 4f       	sbci	r31, 0xFD	; 253
    1596:	80 81       	ld	r24, Z
    1598:	e9 cf       	rjmp	.-46     	; 0x156c <__vector_33+0x184>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    159a:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <twi_masterBufferIndex>
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	8e 0f       	add	r24, r30
    15a2:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <twi_masterBufferIndex>
    15a6:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	e3 55       	subi	r30, 0x53	; 83
    15ae:	fd 4f       	sbci	r31, 0xFD	; 253
    15b0:	80 83       	st	Z, r24
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    15b2:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <twi_masterBufferIndex>
    15b6:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <twi_masterBufferLength>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    15ba:	98 17       	cp	r25, r24
    15bc:	c8 f2       	brcs	.-78     	; 0x1570 <__vector_33+0x188>
twi_reply():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    15be:	85 e8       	ldi	r24, 0x85	; 133
    15c0:	d8 cf       	rjmp	.-80     	; 0x1572 <__vector_33+0x18a>
__vector_33():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    15c2:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <twi_masterBufferIndex>
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	8e 0f       	add	r24, r30
    15ca:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <twi_masterBufferIndex>
    15ce:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	e3 55       	subi	r30, 0x53	; 83
    15d6:	fd 4f       	sbci	r31, 0xFD	; 253
    15d8:	80 83       	st	Z, r24
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:460
  if (twi_sendStop)
    15da:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <twi_sendStop>
    15de:	81 11       	cpse	r24, r1
    15e0:	5c cf       	rjmp	.-328    	; 0x149a <__vector_33+0xb2>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <twi_inRepStart>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    15e8:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    15ea:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
__vector_33():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    15ee:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <twi_state>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:552
      break;
    15f2:	23 cf       	rjmp	.-442    	; 0x143a <__vector_33+0x52>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:501
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    15f4:	0e 94 ee 09 	call	0x13dc	; 0x13dc <twi_releaseBus>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:503
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    15f8:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <twi_rxBufferIndex>
    15fc:	80 32       	cpi	r24, 0x20	; 32
    15fe:	30 f4       	brcc	.+12     	; 0x160c <__vector_33+0x224>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1600:	e0 91 68 02 	lds	r30, 0x0268	; 0x800268 <twi_rxBufferIndex>
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	e7 59       	subi	r30, 0x97	; 151
    1608:	fd 4f       	sbci	r31, 0xFD	; 253
    160a:	10 82       	st	Z, r1
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    160c:	60 91 68 02 	lds	r22, 0x0268	; 0x800268 <twi_rxBufferIndex>
    1610:	70 e0       	ldi	r23, 0x00	; 0
    1612:	e0 91 cd 02 	lds	r30, 0x02CD	; 0x8002cd <twi_onSlaveReceive>
    1616:	f0 91 ce 02 	lds	r31, 0x02CE	; 0x8002ce <twi_onSlaveReceive+0x1>
    161a:	89 e6       	ldi	r24, 0x69	; 105
    161c:	92 e0       	ldi	r25, 0x02	; 2
    161e:	09 95       	icall
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1620:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <twi_rxBufferIndex>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:510
      break;
    1624:	0a cf       	rjmp	.-492    	; 0x143a <__vector_33+0x52>
twi_reply():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1626:	85 ec       	ldi	r24, 0xC5	; 197
    1628:	e0 cf       	rjmp	.-64     	; 0x15ea <__vector_33+0x202>
__vector_33():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\Wire\src\utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    162a:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <twi_error>
    162e:	35 cf       	rjmp	.-406    	; 0x149a <__vector_33+0xb2>

00001630 <Print::flush()>:
_ZN5Print5flushEv():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1118
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size) {
  drawChar(x, y, c, color, bg, size, size);
}
    1630:	08 95       	ret

00001632 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)>:
_ZN12Adafruit_GFX9writeLineEiiiij():
    1632:	2f 92       	push	r2
    1634:	3f 92       	push	r3
    1636:	4f 92       	push	r4
    1638:	5f 92       	push	r5
    163a:	6f 92       	push	r6
    163c:	7f 92       	push	r7
    163e:	8f 92       	push	r8
    1640:	9f 92       	push	r9
    1642:	af 92       	push	r10
    1644:	bf 92       	push	r11
    1646:	cf 92       	push	r12
    1648:	df 92       	push	r13
    164a:	ef 92       	push	r14
    164c:	ff 92       	push	r15
    164e:	0f 93       	push	r16
    1650:	1f 93       	push	r17
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	00 d0       	rcall	.+0      	; 0x1658 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x26>
    1658:	00 d0       	rcall	.+0      	; 0x165a <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x28>
    165a:	00 d0       	rcall	.+0      	; 0x165c <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x2a>
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	3c 01       	movw	r6, r24
    1662:	6a 01       	movw	r12, r20
    1664:	3e 83       	std	Y+6, r19	; 0x06
    1666:	2d 83       	std	Y+5, r18	; 0x05
    1668:	fc 82       	std	Y+4, r15	; 0x04
    166a:	eb 82       	std	Y+3, r14	; 0x03
    166c:	58 01       	movw	r10, r16
    166e:	a4 1a       	sub	r10, r20
    1670:	b5 0a       	sbc	r11, r21
    1672:	b7 fe       	sbrs	r11, 7
    1674:	03 c0       	rjmp	.+6      	; 0x167c <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x4a>
    1676:	b1 94       	neg	r11
    1678:	a1 94       	neg	r10
    167a:	b1 08       	sbc	r11, r1
    167c:	8d 80       	ldd	r8, Y+5	; 0x05
    167e:	9e 80       	ldd	r9, Y+6	; 0x06
    1680:	86 1a       	sub	r8, r22
    1682:	97 0a       	sbc	r9, r23
    1684:	97 fe       	sbrs	r9, 7
    1686:	03 c0       	rjmp	.+6      	; 0x168e <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x5c>
    1688:	91 94       	neg	r9
    168a:	81 94       	neg	r8
    168c:	91 08       	sbc	r9, r1
    168e:	8a 14       	cp	r8, r10
    1690:	9b 04       	cpc	r9, r11
    1692:	5c f0       	brlt	.+22     	; 0x16aa <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x78>
    1694:	90 2f       	mov	r25, r16
    1696:	81 2f       	mov	r24, r17
    1698:	0d 81       	ldd	r16, Y+5	; 0x05
    169a:	1e 81       	ldd	r17, Y+6	; 0x06
    169c:	9d 83       	std	Y+5, r25	; 0x05
    169e:	8e 83       	std	Y+6, r24	; 0x06
    16a0:	9c 2d       	mov	r25, r12
    16a2:	8d 2d       	mov	r24, r13
    16a4:	6b 01       	movw	r12, r22
    16a6:	69 2f       	mov	r22, r25
    16a8:	78 2f       	mov	r23, r24
    16aa:	0c 15       	cp	r16, r12
    16ac:	1d 05       	cpc	r17, r13
    16ae:	5c f0       	brlt	.+22     	; 0x16c6 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x94>
    16b0:	9d 81       	ldd	r25, Y+5	; 0x05
    16b2:	8e 81       	ldd	r24, Y+6	; 0x06
    16b4:	7e 83       	std	Y+6, r23	; 0x06
    16b6:	6d 83       	std	Y+5, r22	; 0x05
    16b8:	69 2f       	mov	r22, r25
    16ba:	78 2f       	mov	r23, r24
    16bc:	90 2f       	mov	r25, r16
    16be:	81 2f       	mov	r24, r17
    16c0:	86 01       	movw	r16, r12
    16c2:	c9 2e       	mov	r12, r25
    16c4:	d8 2e       	mov	r13, r24
    16c6:	16 01       	movw	r2, r12
    16c8:	20 1a       	sub	r2, r16
    16ca:	31 0a       	sbc	r3, r17
    16cc:	2b 01       	movw	r4, r22
    16ce:	2d 81       	ldd	r18, Y+5	; 0x05
    16d0:	3e 81       	ldd	r19, Y+6	; 0x06
    16d2:	42 1a       	sub	r4, r18
    16d4:	53 0a       	sbc	r5, r19
    16d6:	57 fe       	sbrs	r5, 7
    16d8:	03 c0       	rjmp	.+6      	; 0x16e0 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xae>
    16da:	51 94       	neg	r5
    16dc:	41 94       	neg	r4
    16de:	51 08       	sbc	r5, r1
    16e0:	71 01       	movw	r14, r2
    16e2:	37 fe       	sbrs	r3, 7
    16e4:	03 c0       	rjmp	.+6      	; 0x16ec <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xba>
    16e6:	3f ef       	ldi	r19, 0xFF	; 255
    16e8:	e3 1a       	sub	r14, r19
    16ea:	f3 0a       	sbc	r15, r19
    16ec:	f5 94       	asr	r15
    16ee:	e7 94       	ror	r14
    16f0:	8d 81       	ldd	r24, Y+5	; 0x05
    16f2:	9e 81       	ldd	r25, Y+6	; 0x06
    16f4:	86 17       	cp	r24, r22
    16f6:	97 07       	cpc	r25, r23
    16f8:	5c f5       	brge	.+86     	; 0x1750 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x11e>
    16fa:	a1 e0       	ldi	r26, 0x01	; 1
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	ba 83       	std	Y+2, r27	; 0x02
    1700:	a9 83       	std	Y+1, r26	; 0x01
    1702:	c0 16       	cp	r12, r16
    1704:	d1 06       	cpc	r13, r17
    1706:	4c f1       	brlt	.+82     	; 0x175a <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x128>
    1708:	d3 01       	movw	r26, r6
    170a:	ed 91       	ld	r30, X+
    170c:	fc 91       	ld	r31, X
    170e:	04 84       	ldd	r0, Z+12	; 0x0c
    1710:	f5 85       	ldd	r31, Z+13	; 0x0d
    1712:	e0 2d       	mov	r30, r0
    1714:	2b 81       	ldd	r18, Y+3	; 0x03
    1716:	3c 81       	ldd	r19, Y+4	; 0x04
    1718:	a8 01       	movw	r20, r16
    171a:	6d 81       	ldd	r22, Y+5	; 0x05
    171c:	7e 81       	ldd	r23, Y+6	; 0x06
    171e:	8a 14       	cp	r8, r10
    1720:	9b 04       	cpc	r9, r11
    1722:	1c f0       	brlt	.+6      	; 0x172a <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xf8>
    1724:	4d 81       	ldd	r20, Y+5	; 0x05
    1726:	5e 81       	ldd	r21, Y+6	; 0x06
    1728:	b8 01       	movw	r22, r16
    172a:	c3 01       	movw	r24, r6
    172c:	09 95       	icall
    172e:	e4 18       	sub	r14, r4
    1730:	f5 08       	sbc	r15, r5
    1732:	f7 fe       	sbrs	r15, 7
    1734:	0a c0       	rjmp	.+20     	; 0x174a <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x118>
    1736:	2d 81       	ldd	r18, Y+5	; 0x05
    1738:	3e 81       	ldd	r19, Y+6	; 0x06
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	9a 81       	ldd	r25, Y+2	; 0x02
    173e:	28 0f       	add	r18, r24
    1740:	39 1f       	adc	r19, r25
    1742:	3e 83       	std	Y+6, r19	; 0x06
    1744:	2d 83       	std	Y+5, r18	; 0x05
    1746:	e2 0c       	add	r14, r2
    1748:	f3 1c       	adc	r15, r3
    174a:	0f 5f       	subi	r16, 0xFF	; 255
    174c:	1f 4f       	sbci	r17, 0xFF	; 255
    174e:	d9 cf       	rjmp	.-78     	; 0x1702 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xd0>
    1750:	2f ef       	ldi	r18, 0xFF	; 255
    1752:	3f ef       	ldi	r19, 0xFF	; 255
    1754:	3a 83       	std	Y+2, r19	; 0x02
    1756:	29 83       	std	Y+1, r18	; 0x01
    1758:	d4 cf       	rjmp	.-88     	; 0x1702 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xd0>
    175a:	26 96       	adiw	r28, 0x06	; 6
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	de bf       	out	0x3e, r29	; 62
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	cd bf       	out	0x3d, r28	; 61
    1766:	df 91       	pop	r29
    1768:	cf 91       	pop	r28
    176a:	1f 91       	pop	r17
    176c:	0f 91       	pop	r16
    176e:	ff 90       	pop	r15
    1770:	ef 90       	pop	r14
    1772:	df 90       	pop	r13
    1774:	cf 90       	pop	r12
    1776:	bf 90       	pop	r11
    1778:	af 90       	pop	r10
    177a:	9f 90       	pop	r9
    177c:	8f 90       	pop	r8
    177e:	7f 90       	pop	r7
    1780:	6f 90       	pop	r6
    1782:	5f 90       	pop	r5
    1784:	4f 90       	pop	r4
    1786:	3f 90       	pop	r3
    1788:	2f 90       	pop	r2
    178a:	08 95       	ret

0000178c <Adafruit_GFX::startWrite()>:
_ZN12Adafruit_GFX10startWriteEv():
    178c:	08 95       	ret

0000178e <Adafruit_GFX::writePixel(int, int, unsigned int)>:
_ZN12Adafruit_GFX10writePixelEiij():
    178e:	dc 01       	movw	r26, r24
    1790:	ed 91       	ld	r30, X+
    1792:	fc 91       	ld	r31, X
    1794:	00 84       	ldd	r0, Z+8	; 0x08
    1796:	f1 85       	ldd	r31, Z+9	; 0x09
    1798:	e0 2d       	mov	r30, r0
    179a:	09 94       	ijmp

0000179c <Adafruit_GFX::writeFastVLine(int, int, int, unsigned int)>:
_ZN12Adafruit_GFX14writeFastVLineEiiij():
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	dc 01       	movw	r26, r24
    17a2:	ed 91       	ld	r30, X+
    17a4:	fc 91       	ld	r31, X
    17a6:	04 8c       	ldd	r0, Z+28	; 0x1c
    17a8:	f5 8d       	ldd	r31, Z+29	; 0x1d
    17aa:	e0 2d       	mov	r30, r0
    17ac:	09 95       	icall
    17ae:	1f 91       	pop	r17
    17b0:	0f 91       	pop	r16
    17b2:	08 95       	ret

000017b4 <Adafruit_GFX::writeFastHLine(int, int, int, unsigned int)>:
_ZN12Adafruit_GFX14writeFastHLineEiiij():
    17b4:	0f 93       	push	r16
    17b6:	1f 93       	push	r17
    17b8:	dc 01       	movw	r26, r24
    17ba:	ed 91       	ld	r30, X+
    17bc:	fc 91       	ld	r31, X
    17be:	06 8c       	ldd	r0, Z+30	; 0x1e
    17c0:	f7 8d       	ldd	r31, Z+31	; 0x1f
    17c2:	e0 2d       	mov	r30, r0
    17c4:	09 95       	icall
    17c6:	1f 91       	pop	r17
    17c8:	0f 91       	pop	r16
    17ca:	08 95       	ret

000017cc <Adafruit_GFX::writeFillRect(int, int, int, int, unsigned int)>:
_ZN12Adafruit_GFX13writeFillRectEiiiij():
    17cc:	ef 92       	push	r14
    17ce:	ff 92       	push	r15
    17d0:	0f 93       	push	r16
    17d2:	1f 93       	push	r17
    17d4:	dc 01       	movw	r26, r24
    17d6:	ed 91       	ld	r30, X+
    17d8:	fc 91       	ld	r31, X
    17da:	00 a0       	ldd	r0, Z+32	; 0x20
    17dc:	f1 a1       	ldd	r31, Z+33	; 0x21
    17de:	e0 2d       	mov	r30, r0
    17e0:	09 95       	icall
    17e2:	1f 91       	pop	r17
    17e4:	0f 91       	pop	r16
    17e6:	ff 90       	pop	r15
    17e8:	ef 90       	pop	r14
    17ea:	08 95       	ret

000017ec <Adafruit_GFX::drawFastVLine(int, int, int, unsigned int)>:
_ZN12Adafruit_GFX13drawFastVLineEiiij():
    17ec:	8f 92       	push	r8
    17ee:	9f 92       	push	r9
    17f0:	af 92       	push	r10
    17f2:	bf 92       	push	r11
    17f4:	cf 92       	push	r12
    17f6:	df 92       	push	r13
    17f8:	ef 92       	push	r14
    17fa:	ff 92       	push	r15
    17fc:	0f 93       	push	r16
    17fe:	1f 93       	push	r17
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
    1804:	ec 01       	movw	r28, r24
    1806:	5b 01       	movw	r10, r22
    1808:	4a 01       	movw	r8, r20
    180a:	69 01       	movw	r12, r18
    180c:	78 01       	movw	r14, r16
    180e:	e8 81       	ld	r30, Y
    1810:	f9 81       	ldd	r31, Y+1	; 0x01
    1812:	02 84       	ldd	r0, Z+10	; 0x0a
    1814:	f3 85       	ldd	r31, Z+11	; 0x0b
    1816:	e0 2d       	mov	r30, r0
    1818:	09 95       	icall
    181a:	c8 0c       	add	r12, r8
    181c:	d9 1c       	adc	r13, r9
    181e:	86 01       	movw	r16, r12
    1820:	01 50       	subi	r16, 0x01	; 1
    1822:	11 09       	sbc	r17, r1
    1824:	e8 81       	ld	r30, Y
    1826:	f9 81       	ldd	r31, Y+1	; 0x01
    1828:	04 88       	ldd	r0, Z+20	; 0x14
    182a:	f5 89       	ldd	r31, Z+21	; 0x15
    182c:	e0 2d       	mov	r30, r0
    182e:	95 01       	movw	r18, r10
    1830:	a4 01       	movw	r20, r8
    1832:	b5 01       	movw	r22, r10
    1834:	ce 01       	movw	r24, r28
    1836:	09 95       	icall
    1838:	e8 81       	ld	r30, Y
    183a:	f9 81       	ldd	r31, Y+1	; 0x01
    183c:	06 88       	ldd	r0, Z+22	; 0x16
    183e:	f7 89       	ldd	r31, Z+23	; 0x17
    1840:	e0 2d       	mov	r30, r0
    1842:	ce 01       	movw	r24, r28
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	1f 91       	pop	r17
    184a:	0f 91       	pop	r16
    184c:	ff 90       	pop	r15
    184e:	ef 90       	pop	r14
    1850:	df 90       	pop	r13
    1852:	cf 90       	pop	r12
    1854:	bf 90       	pop	r11
    1856:	af 90       	pop	r10
    1858:	9f 90       	pop	r9
    185a:	8f 90       	pop	r8
    185c:	09 94       	ijmp

0000185e <Adafruit_GFX::drawFastHLine(int, int, int, unsigned int)>:
_ZN12Adafruit_GFX13drawFastHLineEiiij():
    185e:	8f 92       	push	r8
    1860:	9f 92       	push	r9
    1862:	af 92       	push	r10
    1864:	bf 92       	push	r11
    1866:	cf 92       	push	r12
    1868:	df 92       	push	r13
    186a:	ef 92       	push	r14
    186c:	ff 92       	push	r15
    186e:	0f 93       	push	r16
    1870:	1f 93       	push	r17
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	ec 01       	movw	r28, r24
    1878:	5b 01       	movw	r10, r22
    187a:	4a 01       	movw	r8, r20
    187c:	69 01       	movw	r12, r18
    187e:	e8 81       	ld	r30, Y
    1880:	f9 81       	ldd	r31, Y+1	; 0x01
    1882:	02 84       	ldd	r0, Z+10	; 0x0a
    1884:	f3 85       	ldd	r31, Z+11	; 0x0b
    1886:	e0 2d       	mov	r30, r0
    1888:	09 95       	icall
    188a:	95 01       	movw	r18, r10
    188c:	2c 0d       	add	r18, r12
    188e:	3d 1d       	adc	r19, r13
    1890:	21 50       	subi	r18, 0x01	; 1
    1892:	31 09       	sbc	r19, r1
    1894:	e8 81       	ld	r30, Y
    1896:	f9 81       	ldd	r31, Y+1	; 0x01
    1898:	04 88       	ldd	r0, Z+20	; 0x14
    189a:	f5 89       	ldd	r31, Z+21	; 0x15
    189c:	e0 2d       	mov	r30, r0
    189e:	78 01       	movw	r14, r16
    18a0:	84 01       	movw	r16, r8
    18a2:	a4 01       	movw	r20, r8
    18a4:	b5 01       	movw	r22, r10
    18a6:	ce 01       	movw	r24, r28
    18a8:	09 95       	icall
    18aa:	e8 81       	ld	r30, Y
    18ac:	f9 81       	ldd	r31, Y+1	; 0x01
    18ae:	06 88       	ldd	r0, Z+22	; 0x16
    18b0:	f7 89       	ldd	r31, Z+23	; 0x17
    18b2:	e0 2d       	mov	r30, r0
    18b4:	ce 01       	movw	r24, r28
    18b6:	df 91       	pop	r29
    18b8:	cf 91       	pop	r28
    18ba:	1f 91       	pop	r17
    18bc:	0f 91       	pop	r16
    18be:	ff 90       	pop	r15
    18c0:	ef 90       	pop	r14
    18c2:	df 90       	pop	r13
    18c4:	cf 90       	pop	r12
    18c6:	bf 90       	pop	r11
    18c8:	af 90       	pop	r10
    18ca:	9f 90       	pop	r9
    18cc:	8f 90       	pop	r8
    18ce:	09 94       	ijmp

000018d0 <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)>:
_ZN12Adafruit_GFX8fillRectEiiiij():
    18d0:	4f 92       	push	r4
    18d2:	5f 92       	push	r5
    18d4:	6f 92       	push	r6
    18d6:	7f 92       	push	r7
    18d8:	8f 92       	push	r8
    18da:	9f 92       	push	r9
    18dc:	af 92       	push	r10
    18de:	bf 92       	push	r11
    18e0:	cf 92       	push	r12
    18e2:	df 92       	push	r13
    18e4:	ef 92       	push	r14
    18e6:	ff 92       	push	r15
    18e8:	0f 93       	push	r16
    18ea:	1f 93       	push	r17
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	6c 01       	movw	r12, r24
    18f2:	2b 01       	movw	r4, r22
    18f4:	5a 01       	movw	r10, r20
    18f6:	39 01       	movw	r6, r18
    18f8:	48 01       	movw	r8, r16
    18fa:	dc 01       	movw	r26, r24
    18fc:	ed 91       	ld	r30, X+
    18fe:	fc 91       	ld	r31, X
    1900:	02 84       	ldd	r0, Z+10	; 0x0a
    1902:	f3 85       	ldd	r31, Z+11	; 0x0b
    1904:	e0 2d       	mov	r30, r0
    1906:	09 95       	icall
    1908:	e2 01       	movw	r28, r4
    190a:	64 0c       	add	r6, r4
    190c:	75 1c       	adc	r7, r5
    190e:	d6 01       	movw	r26, r12
    1910:	ed 91       	ld	r30, X+
    1912:	fc 91       	ld	r31, X
    1914:	c6 15       	cp	r28, r6
    1916:	d7 05       	cpc	r29, r7
    1918:	5c f4       	brge	.+22     	; 0x1930 <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)+0x60>
    191a:	00 88       	ldd	r0, Z+16	; 0x10
    191c:	f1 89       	ldd	r31, Z+17	; 0x11
    191e:	e0 2d       	mov	r30, r0
    1920:	87 01       	movw	r16, r14
    1922:	94 01       	movw	r18, r8
    1924:	a5 01       	movw	r20, r10
    1926:	be 01       	movw	r22, r28
    1928:	c6 01       	movw	r24, r12
    192a:	09 95       	icall
    192c:	21 96       	adiw	r28, 0x01	; 1
    192e:	ef cf       	rjmp	.-34     	; 0x190e <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)+0x3e>
    1930:	06 88       	ldd	r0, Z+22	; 0x16
    1932:	f7 89       	ldd	r31, Z+23	; 0x17
    1934:	e0 2d       	mov	r30, r0
    1936:	c6 01       	movw	r24, r12
    1938:	df 91       	pop	r29
    193a:	cf 91       	pop	r28
    193c:	1f 91       	pop	r17
    193e:	0f 91       	pop	r16
    1940:	ff 90       	pop	r15
    1942:	ef 90       	pop	r14
    1944:	df 90       	pop	r13
    1946:	cf 90       	pop	r12
    1948:	bf 90       	pop	r11
    194a:	af 90       	pop	r10
    194c:	9f 90       	pop	r9
    194e:	8f 90       	pop	r8
    1950:	7f 90       	pop	r7
    1952:	6f 90       	pop	r6
    1954:	5f 90       	pop	r5
    1956:	4f 90       	pop	r4
    1958:	09 94       	ijmp

0000195a <Adafruit_GFX::fillScreen(unsigned int)>:
_ZN12Adafruit_GFX10fillScreenEj():
    195a:	ef 92       	push	r14
    195c:	ff 92       	push	r15
    195e:	0f 93       	push	r16
    1960:	1f 93       	push	r17
    1962:	dc 01       	movw	r26, r24
    1964:	1a 96       	adiw	r26, 0x0a	; 10
    1966:	0d 91       	ld	r16, X+
    1968:	1c 91       	ld	r17, X
    196a:	1b 97       	sbiw	r26, 0x0b	; 11
    196c:	18 96       	adiw	r26, 0x08	; 8
    196e:	2d 91       	ld	r18, X+
    1970:	3c 91       	ld	r19, X
    1972:	19 97       	sbiw	r26, 0x09	; 9
    1974:	ed 91       	ld	r30, X+
    1976:	fc 91       	ld	r31, X
    1978:	00 a0       	ldd	r0, Z+32	; 0x20
    197a:	f1 a1       	ldd	r31, Z+33	; 0x21
    197c:	e0 2d       	mov	r30, r0
    197e:	7b 01       	movw	r14, r22
    1980:	50 e0       	ldi	r21, 0x00	; 0
    1982:	40 e0       	ldi	r20, 0x00	; 0
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	60 e0       	ldi	r22, 0x00	; 0
    1988:	09 95       	icall
    198a:	1f 91       	pop	r17
    198c:	0f 91       	pop	r16
    198e:	ff 90       	pop	r15
    1990:	ef 90       	pop	r14
    1992:	08 95       	ret

00001994 <Adafruit_GFX::drawRect(int, int, int, int, unsigned int)>:
_ZN12Adafruit_GFX8drawRectEiiiij():
    1994:	6f 92       	push	r6
    1996:	7f 92       	push	r7
    1998:	8f 92       	push	r8
    199a:	9f 92       	push	r9
    199c:	af 92       	push	r10
    199e:	bf 92       	push	r11
    19a0:	cf 92       	push	r12
    19a2:	df 92       	push	r13
    19a4:	ef 92       	push	r14
    19a6:	ff 92       	push	r15
    19a8:	0f 93       	push	r16
    19aa:	1f 93       	push	r17
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	ec 01       	movw	r28, r24
    19b2:	6b 01       	movw	r12, r22
    19b4:	5a 01       	movw	r10, r20
    19b6:	39 01       	movw	r6, r18
    19b8:	48 01       	movw	r8, r16
    19ba:	e8 81       	ld	r30, Y
    19bc:	f9 81       	ldd	r31, Y+1	; 0x01
    19be:	02 84       	ldd	r0, Z+10	; 0x0a
    19c0:	f3 85       	ldd	r31, Z+11	; 0x0b
    19c2:	e0 2d       	mov	r30, r0
    19c4:	09 95       	icall
    19c6:	e8 81       	ld	r30, Y
    19c8:	f9 81       	ldd	r31, Y+1	; 0x01
    19ca:	02 88       	ldd	r0, Z+18	; 0x12
    19cc:	f3 89       	ldd	r31, Z+19	; 0x13
    19ce:	e0 2d       	mov	r30, r0
    19d0:	87 01       	movw	r16, r14
    19d2:	93 01       	movw	r18, r6
    19d4:	a5 01       	movw	r20, r10
    19d6:	b6 01       	movw	r22, r12
    19d8:	ce 01       	movw	r24, r28
    19da:	09 95       	icall
    19dc:	a5 01       	movw	r20, r10
    19de:	48 0d       	add	r20, r8
    19e0:	59 1d       	adc	r21, r9
    19e2:	41 50       	subi	r20, 0x01	; 1
    19e4:	51 09       	sbc	r21, r1
    19e6:	e8 81       	ld	r30, Y
    19e8:	f9 81       	ldd	r31, Y+1	; 0x01
    19ea:	02 88       	ldd	r0, Z+18	; 0x12
    19ec:	f3 89       	ldd	r31, Z+19	; 0x13
    19ee:	e0 2d       	mov	r30, r0
    19f0:	93 01       	movw	r18, r6
    19f2:	b6 01       	movw	r22, r12
    19f4:	ce 01       	movw	r24, r28
    19f6:	09 95       	icall
    19f8:	e8 81       	ld	r30, Y
    19fa:	f9 81       	ldd	r31, Y+1	; 0x01
    19fc:	00 88       	ldd	r0, Z+16	; 0x10
    19fe:	f1 89       	ldd	r31, Z+17	; 0x11
    1a00:	e0 2d       	mov	r30, r0
    1a02:	94 01       	movw	r18, r8
    1a04:	a5 01       	movw	r20, r10
    1a06:	b6 01       	movw	r22, r12
    1a08:	ce 01       	movw	r24, r28
    1a0a:	09 95       	icall
    1a0c:	c6 0c       	add	r12, r6
    1a0e:	d7 1c       	adc	r13, r7
    1a10:	b6 01       	movw	r22, r12
    1a12:	61 50       	subi	r22, 0x01	; 1
    1a14:	71 09       	sbc	r23, r1
    1a16:	e8 81       	ld	r30, Y
    1a18:	f9 81       	ldd	r31, Y+1	; 0x01
    1a1a:	00 88       	ldd	r0, Z+16	; 0x10
    1a1c:	f1 89       	ldd	r31, Z+17	; 0x11
    1a1e:	e0 2d       	mov	r30, r0
    1a20:	94 01       	movw	r18, r8
    1a22:	a5 01       	movw	r20, r10
    1a24:	ce 01       	movw	r24, r28
    1a26:	09 95       	icall
    1a28:	e8 81       	ld	r30, Y
    1a2a:	f9 81       	ldd	r31, Y+1	; 0x01
    1a2c:	06 88       	ldd	r0, Z+22	; 0x16
    1a2e:	f7 89       	ldd	r31, Z+23	; 0x17
    1a30:	e0 2d       	mov	r30, r0
    1a32:	ce 01       	movw	r24, r28
    1a34:	df 91       	pop	r29
    1a36:	cf 91       	pop	r28
    1a38:	1f 91       	pop	r17
    1a3a:	0f 91       	pop	r16
    1a3c:	ff 90       	pop	r15
    1a3e:	ef 90       	pop	r14
    1a40:	df 90       	pop	r13
    1a42:	cf 90       	pop	r12
    1a44:	bf 90       	pop	r11
    1a46:	af 90       	pop	r10
    1a48:	9f 90       	pop	r9
    1a4a:	8f 90       	pop	r8
    1a4c:	7f 90       	pop	r7
    1a4e:	6f 90       	pop	r6
    1a50:	09 94       	ijmp

00001a52 <Adafruit_GFX::invertDisplay(bool)>:
_ZN12Adafruit_GFX13invertDisplayEb():
    1a52:	08 95       	ret

00001a54 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)>:
_ZN12Adafruit_GFX8drawLineEiiiij():
    1a54:	6f 92       	push	r6
    1a56:	7f 92       	push	r7
    1a58:	8f 92       	push	r8
    1a5a:	9f 92       	push	r9
    1a5c:	af 92       	push	r10
    1a5e:	bf 92       	push	r11
    1a60:	cf 92       	push	r12
    1a62:	df 92       	push	r13
    1a64:	ef 92       	push	r14
    1a66:	ff 92       	push	r15
    1a68:	0f 93       	push	r16
    1a6a:	1f 93       	push	r17
    1a6c:	cf 93       	push	r28
    1a6e:	df 93       	push	r29
    1a70:	5c 01       	movw	r10, r24
    1a72:	eb 01       	movw	r28, r22
    1a74:	6a 01       	movw	r12, r20
    1a76:	49 01       	movw	r8, r18
    1a78:	38 01       	movw	r6, r16
    1a7a:	87 01       	movw	r16, r14
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	ed 91       	ld	r30, X+
    1a80:	fc 91       	ld	r31, X
    1a82:	62 17       	cp	r22, r18
    1a84:	73 07       	cpc	r23, r19
    1a86:	19 f5       	brne	.+70     	; 0x1ace <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x7a>
    1a88:	64 16       	cp	r6, r20
    1a8a:	75 06       	cpc	r7, r21
    1a8c:	2c f0       	brlt	.+10     	; 0x1a98 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x44>
    1a8e:	96 2d       	mov	r25, r6
    1a90:	87 2d       	mov	r24, r7
    1a92:	3a 01       	movw	r6, r20
    1a94:	c9 2e       	mov	r12, r25
    1a96:	d8 2e       	mov	r13, r24
    1a98:	96 01       	movw	r18, r12
    1a9a:	26 19       	sub	r18, r6
    1a9c:	37 09       	sbc	r19, r7
    1a9e:	2f 5f       	subi	r18, 0xFF	; 255
    1aa0:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa2:	04 8c       	ldd	r0, Z+28	; 0x1c
    1aa4:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1aa6:	e0 2d       	mov	r30, r0
    1aa8:	a3 01       	movw	r20, r6
    1aaa:	be 01       	movw	r22, r28
    1aac:	c5 01       	movw	r24, r10
    1aae:	09 95       	icall
    1ab0:	df 91       	pop	r29
    1ab2:	cf 91       	pop	r28
    1ab4:	1f 91       	pop	r17
    1ab6:	0f 91       	pop	r16
    1ab8:	ff 90       	pop	r15
    1aba:	ef 90       	pop	r14
    1abc:	df 90       	pop	r13
    1abe:	cf 90       	pop	r12
    1ac0:	bf 90       	pop	r11
    1ac2:	af 90       	pop	r10
    1ac4:	9f 90       	pop	r9
    1ac6:	8f 90       	pop	r8
    1ac8:	7f 90       	pop	r7
    1aca:	6f 90       	pop	r6
    1acc:	08 95       	ret
    1ace:	46 15       	cp	r20, r6
    1ad0:	57 05       	cpc	r21, r7
    1ad2:	91 f4       	brne	.+36     	; 0x1af8 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0xa4>
    1ad4:	26 17       	cp	r18, r22
    1ad6:	37 07       	cpc	r19, r23
    1ad8:	24 f0       	brlt	.+8      	; 0x1ae2 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x8e>
    1ada:	89 2d       	mov	r24, r9
    1adc:	4b 01       	movw	r8, r22
    1ade:	c2 2f       	mov	r28, r18
    1ae0:	d8 2f       	mov	r29, r24
    1ae2:	9e 01       	movw	r18, r28
    1ae4:	28 19       	sub	r18, r8
    1ae6:	39 09       	sbc	r19, r9
    1ae8:	2f 5f       	subi	r18, 0xFF	; 255
    1aea:	3f 4f       	sbci	r19, 0xFF	; 255
    1aec:	06 8c       	ldd	r0, Z+30	; 0x1e
    1aee:	f7 8d       	ldd	r31, Z+31	; 0x1f
    1af0:	e0 2d       	mov	r30, r0
    1af2:	a6 01       	movw	r20, r12
    1af4:	b4 01       	movw	r22, r8
    1af6:	da cf       	rjmp	.-76     	; 0x1aac <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x58>
    1af8:	02 84       	ldd	r0, Z+10	; 0x0a
    1afa:	f3 85       	ldd	r31, Z+11	; 0x0b
    1afc:	e0 2d       	mov	r30, r0
    1afe:	09 95       	icall
    1b00:	d5 01       	movw	r26, r10
    1b02:	ed 91       	ld	r30, X+
    1b04:	fc 91       	ld	r31, X
    1b06:	04 88       	ldd	r0, Z+20	; 0x14
    1b08:	f5 89       	ldd	r31, Z+21	; 0x15
    1b0a:	e0 2d       	mov	r30, r0
    1b0c:	83 01       	movw	r16, r6
    1b0e:	94 01       	movw	r18, r8
    1b10:	a6 01       	movw	r20, r12
    1b12:	be 01       	movw	r22, r28
    1b14:	c5 01       	movw	r24, r10
    1b16:	09 95       	icall
    1b18:	d5 01       	movw	r26, r10
    1b1a:	ed 91       	ld	r30, X+
    1b1c:	fc 91       	ld	r31, X
    1b1e:	06 88       	ldd	r0, Z+22	; 0x16
    1b20:	f7 89       	ldd	r31, Z+23	; 0x17
    1b22:	e0 2d       	mov	r30, r0
    1b24:	c5 01       	movw	r24, r10
    1b26:	df 91       	pop	r29
    1b28:	cf 91       	pop	r28
    1b2a:	1f 91       	pop	r17
    1b2c:	0f 91       	pop	r16
    1b2e:	ff 90       	pop	r15
    1b30:	ef 90       	pop	r14
    1b32:	df 90       	pop	r13
    1b34:	cf 90       	pop	r12
    1b36:	bf 90       	pop	r11
    1b38:	af 90       	pop	r10
    1b3a:	9f 90       	pop	r9
    1b3c:	8f 90       	pop	r8
    1b3e:	7f 90       	pop	r7
    1b40:	6f 90       	pop	r6
    1b42:	09 94       	ijmp

00001b44 <Adafruit_GFX::setRotation(unsigned char)>:
_ZN12Adafruit_GFX11setRotationEh():
    1b44:	fc 01       	movw	r30, r24
    1b46:	63 70       	andi	r22, 0x03	; 3
    1b48:	66 8b       	std	Z+22, r22	; 0x16
    1b4a:	84 81       	ldd	r24, Z+4	; 0x04
    1b4c:	95 81       	ldd	r25, Z+5	; 0x05
    1b4e:	26 81       	ldd	r18, Z+6	; 0x06
    1b50:	37 81       	ldd	r19, Z+7	; 0x07
    1b52:	61 30       	cpi	r22, 0x01	; 1
    1b54:	39 f0       	breq	.+14     	; 0x1b64 <Adafruit_GFX::setRotation(unsigned char)+0x20>
    1b56:	63 30       	cpi	r22, 0x03	; 3
    1b58:	29 f0       	breq	.+10     	; 0x1b64 <Adafruit_GFX::setRotation(unsigned char)+0x20>
    1b5a:	91 87       	std	Z+9, r25	; 0x09
    1b5c:	80 87       	std	Z+8, r24	; 0x08
    1b5e:	33 87       	std	Z+11, r19	; 0x0b
    1b60:	22 87       	std	Z+10, r18	; 0x0a
    1b62:	08 95       	ret
    1b64:	31 87       	std	Z+9, r19	; 0x09
    1b66:	20 87       	std	Z+8, r18	; 0x08
    1b68:	93 87       	std	Z+11, r25	; 0x0b
    1b6a:	82 87       	std	Z+10, r24	; 0x0a
    1b6c:	08 95       	ret

00001b6e <Adafruit_GFX::Adafruit_GFX(int, int)>:
_ZN12Adafruit_GFXC2Eii():
    1b6e:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
    1b70:	13 82       	std	Z+3, r1	; 0x03
    1b72:	12 82       	std	Z+2, r1	; 0x02
_ZN12Adafruit_GFXC2Eii():
    1b74:	89 e6       	ldi	r24, 0x69	; 105
    1b76:	91 e0       	ldi	r25, 0x01	; 1
    1b78:	91 83       	std	Z+1, r25	; 0x01
    1b7a:	80 83       	st	Z, r24
    1b7c:	75 83       	std	Z+5, r23	; 0x05
    1b7e:	64 83       	std	Z+4, r22	; 0x04
    1b80:	57 83       	std	Z+7, r21	; 0x07
    1b82:	46 83       	std	Z+6, r20	; 0x06
    1b84:	71 87       	std	Z+9, r23	; 0x09
    1b86:	60 87       	std	Z+8, r22	; 0x08
    1b88:	53 87       	std	Z+11, r21	; 0x0b
    1b8a:	42 87       	std	Z+10, r20	; 0x0a
    1b8c:	16 8a       	std	Z+22, r1	; 0x16
    1b8e:	15 86       	std	Z+13, r1	; 0x0d
    1b90:	14 86       	std	Z+12, r1	; 0x0c
    1b92:	17 86       	std	Z+15, r1	; 0x0f
    1b94:	16 86       	std	Z+14, r1	; 0x0e
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	85 8b       	std	Z+21, r24	; 0x15
    1b9a:	84 8b       	std	Z+20, r24	; 0x14
    1b9c:	2f ef       	ldi	r18, 0xFF	; 255
    1b9e:	3f ef       	ldi	r19, 0xFF	; 255
    1ba0:	33 8b       	std	Z+19, r19	; 0x13
    1ba2:	22 8b       	std	Z+18, r18	; 0x12
    1ba4:	31 8b       	std	Z+17, r19	; 0x11
    1ba6:	20 8b       	std	Z+16, r18	; 0x10
    1ba8:	87 8b       	std	Z+23, r24	; 0x17
    1baa:	10 8e       	std	Z+24, r1	; 0x18
    1bac:	12 8e       	std	Z+26, r1	; 0x1a
    1bae:	11 8e       	std	Z+25, r1	; 0x19
    1bb0:	08 95       	ret

00001bb2 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int)>:
_ZN12Adafruit_GFX10drawBitmapEiiPKhiij():
    1bb2:	3f 92       	push	r3
    1bb4:	4f 92       	push	r4
    1bb6:	5f 92       	push	r5
    1bb8:	6f 92       	push	r6
    1bba:	7f 92       	push	r7
    1bbc:	8f 92       	push	r8
    1bbe:	9f 92       	push	r9
    1bc0:	af 92       	push	r10
    1bc2:	bf 92       	push	r11
    1bc4:	cf 92       	push	r12
    1bc6:	df 92       	push	r13
    1bc8:	ef 92       	push	r14
    1bca:	ff 92       	push	r15
    1bcc:	0f 93       	push	r16
    1bce:	1f 93       	push	r17
    1bd0:	cf 93       	push	r28
    1bd2:	df 93       	push	r29
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	2a 97       	sbiw	r28, 0x0a	; 10
    1bda:	0f b6       	in	r0, 0x3f	; 63
    1bdc:	f8 94       	cli
    1bde:	de bf       	out	0x3e, r29	; 62
    1be0:	0f be       	out	0x3f, r0	; 63
    1be2:	cd bf       	out	0x3d, r28	; 61
    1be4:	9a 87       	std	Y+10, r25	; 0x0a
    1be6:	89 87       	std	Y+9, r24	; 0x09
    1be8:	7e 83       	std	Y+6, r23	; 0x06
    1bea:	6d 83       	std	Y+5, r22	; 0x05
    1bec:	58 87       	std	Y+8, r21	; 0x08
    1bee:	4f 83       	std	Y+7, r20	; 0x07
    1bf0:	29 01       	movw	r4, r18
    1bf2:	37 01       	movw	r6, r14
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	ed 91       	ld	r30, X+
    1bf8:	fc 91       	ld	r31, X
    1bfa:	02 84       	ldd	r0, Z+10	; 0x0a
    1bfc:	f3 85       	ldd	r31, Z+11	; 0x0b
    1bfe:	e0 2d       	mov	r30, r0
    1c00:	09 95       	icall
    1c02:	c8 01       	movw	r24, r16
    1c04:	07 96       	adiw	r24, 0x07	; 7
    1c06:	97 fd       	sbrc	r25, 7
    1c08:	07 96       	adiw	r24, 0x07	; 7
    1c0a:	9c 01       	movw	r18, r24
    1c0c:	93 e0       	ldi	r25, 0x03	; 3
    1c0e:	35 95       	asr	r19
    1c10:	27 95       	ror	r18
    1c12:	9a 95       	dec	r25
    1c14:	e1 f7       	brne	.-8      	; 0x1c0e <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int)+0x5c>
    1c16:	3a 83       	std	Y+2, r19	; 0x02
    1c18:	29 83       	std	Y+1, r18	; 0x01
    1c1a:	91 2c       	mov	r9, r1
    1c1c:	81 2c       	mov	r8, r1
    1c1e:	b1 2c       	mov	r11, r1
    1c20:	a1 2c       	mov	r10, r1
    1c22:	31 2c       	mov	r3, r1
    1c24:	8f 81       	ldd	r24, Y+7	; 0x07
    1c26:	98 85       	ldd	r25, Y+8	; 0x08
    1c28:	8a 0d       	add	r24, r10
    1c2a:	9b 1d       	adc	r25, r11
    1c2c:	9c 83       	std	Y+4, r25	; 0x04
    1c2e:	8b 83       	std	Y+3, r24	; 0x03
    1c30:	a6 14       	cp	r10, r6
    1c32:	b7 04       	cpc	r11, r7
    1c34:	ac f5       	brge	.+106    	; 0x1ca0 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int)+0xee>
    1c36:	f1 2c       	mov	r15, r1
    1c38:	e1 2c       	mov	r14, r1
    1c3a:	e0 16       	cp	r14, r16
    1c3c:	f1 06       	cpc	r15, r17
    1c3e:	44 f5       	brge	.+80     	; 0x1c90 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int)+0xde>
    1c40:	c7 01       	movw	r24, r14
    1c42:	87 70       	andi	r24, 0x07	; 7
    1c44:	99 27       	eor	r25, r25
    1c46:	33 0c       	add	r3, r3
    1c48:	89 2b       	or	r24, r25
    1c4a:	59 f4       	brne	.+22     	; 0x1c62 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int)+0xb0>
    1c4c:	f7 01       	movw	r30, r14
    1c4e:	83 e0       	ldi	r24, 0x03	; 3
    1c50:	f5 95       	asr	r31
    1c52:	e7 95       	ror	r30
    1c54:	8a 95       	dec	r24
    1c56:	e1 f7       	brne	.-8      	; 0x1c50 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int)+0x9e>
    1c58:	e8 0d       	add	r30, r8
    1c5a:	f9 1d       	adc	r31, r9
    1c5c:	e4 0d       	add	r30, r4
    1c5e:	f5 1d       	adc	r31, r5
    1c60:	34 90       	lpm	r3, Z
    1c62:	37 fe       	sbrs	r3, 7
    1c64:	11 c0       	rjmp	.+34     	; 0x1c88 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int)+0xd6>
    1c66:	a9 85       	ldd	r26, Y+9	; 0x09
    1c68:	ba 85       	ldd	r27, Y+10	; 0x0a
    1c6a:	ed 91       	ld	r30, X+
    1c6c:	fc 91       	ld	r31, X
    1c6e:	11 97       	sbiw	r26, 0x01	; 1
    1c70:	04 84       	ldd	r0, Z+12	; 0x0c
    1c72:	f5 85       	ldd	r31, Z+13	; 0x0d
    1c74:	e0 2d       	mov	r30, r0
    1c76:	96 01       	movw	r18, r12
    1c78:	4b 81       	ldd	r20, Y+3	; 0x03
    1c7a:	5c 81       	ldd	r21, Y+4	; 0x04
    1c7c:	6d 81       	ldd	r22, Y+5	; 0x05
    1c7e:	7e 81       	ldd	r23, Y+6	; 0x06
    1c80:	6e 0d       	add	r22, r14
    1c82:	7f 1d       	adc	r23, r15
    1c84:	cd 01       	movw	r24, r26
    1c86:	09 95       	icall
    1c88:	bf ef       	ldi	r27, 0xFF	; 255
    1c8a:	eb 1a       	sub	r14, r27
    1c8c:	fb 0a       	sbc	r15, r27
    1c8e:	d5 cf       	rjmp	.-86     	; 0x1c3a <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int)+0x88>
    1c90:	2f ef       	ldi	r18, 0xFF	; 255
    1c92:	a2 1a       	sub	r10, r18
    1c94:	b2 0a       	sbc	r11, r18
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9a:	88 0e       	add	r8, r24
    1c9c:	99 1e       	adc	r9, r25
    1c9e:	c2 cf       	rjmp	.-124    	; 0x1c24 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int)+0x72>
    1ca0:	a9 85       	ldd	r26, Y+9	; 0x09
    1ca2:	ba 85       	ldd	r27, Y+10	; 0x0a
    1ca4:	ed 91       	ld	r30, X+
    1ca6:	fc 91       	ld	r31, X
    1ca8:	11 97       	sbiw	r26, 0x01	; 1
    1caa:	06 88       	ldd	r0, Z+22	; 0x16
    1cac:	f7 89       	ldd	r31, Z+23	; 0x17
    1cae:	e0 2d       	mov	r30, r0
    1cb0:	cd 01       	movw	r24, r26
    1cb2:	2a 96       	adiw	r28, 0x0a	; 10
    1cb4:	0f b6       	in	r0, 0x3f	; 63
    1cb6:	f8 94       	cli
    1cb8:	de bf       	out	0x3e, r29	; 62
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	cd bf       	out	0x3d, r28	; 61
    1cbe:	df 91       	pop	r29
    1cc0:	cf 91       	pop	r28
    1cc2:	1f 91       	pop	r17
    1cc4:	0f 91       	pop	r16
    1cc6:	ff 90       	pop	r15
    1cc8:	ef 90       	pop	r14
    1cca:	df 90       	pop	r13
    1ccc:	cf 90       	pop	r12
    1cce:	bf 90       	pop	r11
    1cd0:	af 90       	pop	r10
    1cd2:	9f 90       	pop	r9
    1cd4:	8f 90       	pop	r8
    1cd6:	7f 90       	pop	r7
    1cd8:	6f 90       	pop	r6
    1cda:	5f 90       	pop	r5
    1cdc:	4f 90       	pop	r4
    1cde:	3f 90       	pop	r3
    1ce0:	09 94       	ijmp

00001ce2 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>:
_ZN12Adafruit_GFX8drawCharEiihjjhh():
    1ce2:	2f 92       	push	r2
    1ce4:	3f 92       	push	r3
    1ce6:	4f 92       	push	r4
    1ce8:	5f 92       	push	r5
    1cea:	6f 92       	push	r6
    1cec:	7f 92       	push	r7
    1cee:	8f 92       	push	r8
    1cf0:	9f 92       	push	r9
    1cf2:	af 92       	push	r10
    1cf4:	bf 92       	push	r11
    1cf6:	cf 92       	push	r12
    1cf8:	df 92       	push	r13
    1cfa:	ef 92       	push	r14
    1cfc:	ff 92       	push	r15
    1cfe:	0f 93       	push	r16
    1d00:	1f 93       	push	r17
    1d02:	cf 93       	push	r28
    1d04:	df 93       	push	r29
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
    1d0a:	6a 97       	sbiw	r28, 0x1a	; 26
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	de bf       	out	0x3e, r29	; 62
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	cd bf       	out	0x3d, r28	; 61
    1d16:	9a 8f       	std	Y+26, r25	; 0x1a
    1d18:	89 8f       	std	Y+25, r24	; 0x19
    1d1a:	7a 83       	std	Y+2, r23	; 0x02
    1d1c:	69 83       	std	Y+1, r22	; 0x01
    1d1e:	4a 01       	movw	r8, r20
    1d20:	d2 2e       	mov	r13, r18
    1d22:	18 87       	std	Y+8, r17	; 0x08
    1d24:	0f 83       	std	Y+7, r16	; 0x07
    1d26:	37 01       	movw	r6, r14
    1d28:	bc 2c       	mov	r11, r12
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	59 96       	adiw	r26, 0x19	; 25
    1d2e:	2d 91       	ld	r18, X+
    1d30:	3c 91       	ld	r19, X
    1d32:	5a 97       	sbiw	r26, 0x1a	; 26
    1d34:	21 15       	cp	r18, r1
    1d36:	31 05       	cpc	r19, r1
    1d38:	09 f0       	breq	.+2      	; 0x1d3c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x5a>
    1d3a:	15 c1       	rjmp	.+554    	; 0x1f66 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x284>
    1d3c:	18 96       	adiw	r26, 0x08	; 8
    1d3e:	8d 91       	ld	r24, X+
    1d40:	9c 91       	ld	r25, X
    1d42:	19 97       	sbiw	r26, 0x09	; 9
    1d44:	68 17       	cp	r22, r24
    1d46:	79 07       	cpc	r23, r25
    1d48:	0c f0       	brlt	.+2      	; 0x1d4c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x6a>
    1d4a:	d7 c1       	rjmp	.+942    	; 0x20fa <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    1d4c:	1a 96       	adiw	r26, 0x0a	; 10
    1d4e:	8d 91       	ld	r24, X+
    1d50:	9c 91       	ld	r25, X
    1d52:	48 17       	cp	r20, r24
    1d54:	59 07       	cpc	r21, r25
    1d56:	0c f0       	brlt	.+2      	; 0x1d5a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x78>
    1d58:	d0 c1       	rjmp	.+928    	; 0x20fa <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    1d5a:	4c 2c       	mov	r4, r12
    1d5c:	51 2c       	mov	r5, r1
    1d5e:	b6 e0       	ldi	r27, 0x06	; 6
    1d60:	cb 9e       	mul	r12, r27
    1d62:	60 0d       	add	r22, r0
    1d64:	71 1d       	adc	r23, r1
    1d66:	11 24       	eor	r1, r1
    1d68:	7c 87       	std	Y+12, r23	; 0x0c
    1d6a:	6b 87       	std	Y+11, r22	; 0x0b
    1d6c:	16 16       	cp	r1, r22
    1d6e:	17 06       	cpc	r1, r23
    1d70:	0c f0       	brlt	.+2      	; 0x1d74 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x92>
    1d72:	c3 c1       	rjmp	.+902    	; 0x20fa <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    1d74:	ea 2d       	mov	r30, r10
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	fa 87       	std	Y+10, r31	; 0x0a
    1d7a:	e9 87       	std	Y+9, r30	; 0x09
    1d7c:	93 e0       	ldi	r25, 0x03	; 3
    1d7e:	ee 0f       	add	r30, r30
    1d80:	ff 1f       	adc	r31, r31
    1d82:	9a 95       	dec	r25
    1d84:	e1 f7       	brne	.-8      	; 0x1d7e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x9c>
    1d86:	f8 8b       	std	Y+16, r31	; 0x10
    1d88:	ef 87       	std	Y+15, r30	; 0x0f
    1d8a:	cf 01       	movw	r24, r30
    1d8c:	84 0f       	add	r24, r20
    1d8e:	95 1f       	adc	r25, r21
    1d90:	18 16       	cp	r1, r24
    1d92:	19 06       	cpc	r1, r25
    1d94:	0c f0       	brlt	.+2      	; 0x1d98 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xb6>
    1d96:	b1 c1       	rjmp	.+866    	; 0x20fa <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    1d98:	a9 8d       	ldd	r26, Y+25	; 0x19
    1d9a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1d9c:	58 96       	adiw	r26, 0x18	; 24
    1d9e:	8c 91       	ld	r24, X
    1da0:	81 11       	cpse	r24, r1
    1da2:	04 c0       	rjmp	.+8      	; 0x1dac <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xca>
    1da4:	bf ea       	ldi	r27, 0xAF	; 175
    1da6:	bd 15       	cp	r27, r13
    1da8:	08 f4       	brcc	.+2      	; 0x1dac <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xca>
    1daa:	d3 94       	inc	r13
    1dac:	a9 8d       	ldd	r26, Y+25	; 0x19
    1dae:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1db0:	ed 91       	ld	r30, X+
    1db2:	fc 91       	ld	r31, X
    1db4:	11 97       	sbiw	r26, 0x01	; 1
    1db6:	02 84       	ldd	r0, Z+10	; 0x0a
    1db8:	f3 85       	ldd	r31, Z+11	; 0x0b
    1dba:	e0 2d       	mov	r30, r0
    1dbc:	cd 01       	movw	r24, r26
    1dbe:	09 95       	icall
    1dc0:	b5 e0       	ldi	r27, 0x05	; 5
    1dc2:	db 9e       	mul	r13, r27
    1dc4:	c0 01       	movw	r24, r0
    1dc6:	11 24       	eor	r1, r1
    1dc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dca:	fa 81       	ldd	r31, Y+2	; 0x02
    1dcc:	fc 83       	std	Y+4, r31	; 0x04
    1dce:	eb 83       	std	Y+3, r30	; 0x03
    1dd0:	31 2c       	mov	r3, r1
    1dd2:	21 2c       	mov	r2, r1
    1dd4:	9c 01       	movw	r18, r24
    1dd6:	24 57       	subi	r18, 0x74	; 116
    1dd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dda:	38 8f       	std	Y+24, r19	; 0x18
    1ddc:	2f 8b       	std	Y+23, r18	; 0x17
    1dde:	4a 2d       	mov	r20, r10
    1de0:	50 e0       	ldi	r21, 0x00	; 0
    1de2:	5e 8b       	std	Y+22, r21	; 0x16
    1de4:	4d 8b       	std	Y+21, r20	; 0x15
    1de6:	ef 89       	ldd	r30, Y+23	; 0x17
    1de8:	f8 8d       	ldd	r31, Y+24	; 0x18
    1dea:	e2 0d       	add	r30, r2
    1dec:	f3 1d       	adc	r31, r3
    1dee:	44 91       	lpm	r20, Z
    1df0:	9e 82       	std	Y+6, r9	; 0x06
    1df2:	8d 82       	std	Y+5, r8	; 0x05
    1df4:	d1 2c       	mov	r13, r1
    1df6:	c1 2c       	mov	r12, r1
    1df8:	69 81       	ldd	r22, Y+1	; 0x01
    1dfa:	7a 81       	ldd	r23, Y+2	; 0x02
    1dfc:	62 0d       	add	r22, r2
    1dfe:	73 1d       	adc	r23, r3
    1e00:	7a 8b       	std	Y+18, r23	; 0x12
    1e02:	69 8b       	std	Y+17, r22	; 0x11
    1e04:	84 2f       	mov	r24, r20
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	9c 8b       	std	Y+20, r25	; 0x14
    1e0a:	8b 8b       	std	Y+19, r24	; 0x13
    1e0c:	e9 8d       	ldd	r30, Y+25	; 0x19
    1e0e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1e10:	a0 81       	ld	r26, Z
    1e12:	b1 81       	ldd	r27, Z+1	; 0x01
    1e14:	40 ff       	sbrs	r20, 0
    1e16:	82 c0       	rjmp	.+260    	; 0x1f1c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x23a>
    1e18:	f1 e0       	ldi	r31, 0x01	; 1
    1e1a:	bf 12       	cpse	r11, r31
    1e1c:	6f c0       	rjmp	.+222    	; 0x1efc <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x21a>
    1e1e:	af 12       	cpse	r10, r31
    1e20:	6d c0       	rjmp	.+218    	; 0x1efc <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x21a>
    1e22:	1c 96       	adiw	r26, 0x0c	; 12
    1e24:	ed 91       	ld	r30, X+
    1e26:	fc 91       	ld	r31, X
    1e28:	2f 81       	ldd	r18, Y+7	; 0x07
    1e2a:	38 85       	ldd	r19, Y+8	; 0x08
    1e2c:	a4 01       	movw	r20, r8
    1e2e:	4c 0d       	add	r20, r12
    1e30:	5d 1d       	adc	r21, r13
    1e32:	69 89       	ldd	r22, Y+17	; 0x11
    1e34:	7a 89       	ldd	r23, Y+18	; 0x12
    1e36:	89 8d       	ldd	r24, Y+25	; 0x19
    1e38:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e3a:	09 95       	icall
    1e3c:	eb 89       	ldd	r30, Y+19	; 0x13
    1e3e:	fc 89       	ldd	r31, Y+20	; 0x14
    1e40:	f5 95       	asr	r31
    1e42:	e7 95       	ror	r30
    1e44:	4e 2f       	mov	r20, r30
    1e46:	5f ef       	ldi	r21, 0xFF	; 255
    1e48:	c5 1a       	sub	r12, r21
    1e4a:	d5 0a       	sbc	r13, r21
    1e4c:	6d 81       	ldd	r22, Y+5	; 0x05
    1e4e:	7e 81       	ldd	r23, Y+6	; 0x06
    1e50:	8d 89       	ldd	r24, Y+21	; 0x15
    1e52:	9e 89       	ldd	r25, Y+22	; 0x16
    1e54:	68 0f       	add	r22, r24
    1e56:	79 1f       	adc	r23, r25
    1e58:	7e 83       	std	Y+6, r23	; 0x06
    1e5a:	6d 83       	std	Y+5, r22	; 0x05
    1e5c:	98 e0       	ldi	r25, 0x08	; 8
    1e5e:	c9 16       	cp	r12, r25
    1e60:	d1 04       	cpc	r13, r1
    1e62:	81 f6       	brne	.-96     	; 0x1e04 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x122>
    1e64:	af ef       	ldi	r26, 0xFF	; 255
    1e66:	2a 1a       	sub	r2, r26
    1e68:	3a 0a       	sbc	r3, r26
    1e6a:	eb 81       	ldd	r30, Y+3	; 0x03
    1e6c:	fc 81       	ldd	r31, Y+4	; 0x04
    1e6e:	e4 0d       	add	r30, r4
    1e70:	f5 1d       	adc	r31, r5
    1e72:	fc 83       	std	Y+4, r31	; 0x04
    1e74:	eb 83       	std	Y+3, r30	; 0x03
    1e76:	f5 e0       	ldi	r31, 0x05	; 5
    1e78:	2f 16       	cp	r2, r31
    1e7a:	31 04       	cpc	r3, r1
    1e7c:	09 f0       	breq	.+2      	; 0x1e80 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x19e>
    1e7e:	b3 cf       	rjmp	.-154    	; 0x1de6 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x104>
    1e80:	2f 81       	ldd	r18, Y+7	; 0x07
    1e82:	38 85       	ldd	r19, Y+8	; 0x08
    1e84:	26 15       	cp	r18, r6
    1e86:	37 05       	cpc	r19, r7
    1e88:	b9 f0       	breq	.+46     	; 0x1eb8 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    1e8a:	a9 8d       	ldd	r26, Y+25	; 0x19
    1e8c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1e8e:	ed 91       	ld	r30, X+
    1e90:	fc 91       	ld	r31, X
    1e92:	b1 e0       	ldi	r27, 0x01	; 1
    1e94:	bb 12       	cpse	r11, r27
    1e96:	57 c0       	rjmp	.+174    	; 0x1f46 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x264>
    1e98:	ab 12       	cpse	r10, r27
    1e9a:	55 c0       	rjmp	.+170    	; 0x1f46 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x264>
    1e9c:	69 81       	ldd	r22, Y+1	; 0x01
    1e9e:	7a 81       	ldd	r23, Y+2	; 0x02
    1ea0:	6b 5f       	subi	r22, 0xFB	; 251
    1ea2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea4:	00 88       	ldd	r0, Z+16	; 0x10
    1ea6:	f1 89       	ldd	r31, Z+17	; 0x11
    1ea8:	e0 2d       	mov	r30, r0
    1eaa:	83 01       	movw	r16, r6
    1eac:	28 e0       	ldi	r18, 0x08	; 8
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	a4 01       	movw	r20, r8
    1eb2:	89 8d       	ldd	r24, Y+25	; 0x19
    1eb4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1eb6:	09 95       	icall
    1eb8:	a9 8d       	ldd	r26, Y+25	; 0x19
    1eba:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1ebc:	ed 91       	ld	r30, X+
    1ebe:	fc 91       	ld	r31, X
    1ec0:	11 97       	sbiw	r26, 0x01	; 1
    1ec2:	06 88       	ldd	r0, Z+22	; 0x16
    1ec4:	f7 89       	ldd	r31, Z+23	; 0x17
    1ec6:	e0 2d       	mov	r30, r0
    1ec8:	cd 01       	movw	r24, r26
    1eca:	6a 96       	adiw	r28, 0x1a	; 26
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	f8 94       	cli
    1ed0:	de bf       	out	0x3e, r29	; 62
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	cd bf       	out	0x3d, r28	; 61
    1ed6:	df 91       	pop	r29
    1ed8:	cf 91       	pop	r28
    1eda:	1f 91       	pop	r17
    1edc:	0f 91       	pop	r16
    1ede:	ff 90       	pop	r15
    1ee0:	ef 90       	pop	r14
    1ee2:	df 90       	pop	r13
    1ee4:	cf 90       	pop	r12
    1ee6:	bf 90       	pop	r11
    1ee8:	af 90       	pop	r10
    1eea:	9f 90       	pop	r9
    1eec:	8f 90       	pop	r8
    1eee:	7f 90       	pop	r7
    1ef0:	6f 90       	pop	r6
    1ef2:	5f 90       	pop	r5
    1ef4:	4f 90       	pop	r4
    1ef6:	3f 90       	pop	r3
    1ef8:	2f 90       	pop	r2
    1efa:	09 94       	ijmp
    1efc:	1e 96       	adiw	r26, 0x0e	; 14
    1efe:	ed 91       	ld	r30, X+
    1f00:	fc 91       	ld	r31, X
    1f02:	ef 80       	ldd	r14, Y+7	; 0x07
    1f04:	f8 84       	ldd	r15, Y+8	; 0x08
    1f06:	09 85       	ldd	r16, Y+9	; 0x09
    1f08:	1a 85       	ldd	r17, Y+10	; 0x0a
    1f0a:	92 01       	movw	r18, r4
    1f0c:	4d 81       	ldd	r20, Y+5	; 0x05
    1f0e:	5e 81       	ldd	r21, Y+6	; 0x06
    1f10:	6b 81       	ldd	r22, Y+3	; 0x03
    1f12:	7c 81       	ldd	r23, Y+4	; 0x04
    1f14:	89 8d       	ldd	r24, Y+25	; 0x19
    1f16:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f18:	09 95       	icall
    1f1a:	90 cf       	rjmp	.-224    	; 0x1e3c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x15a>
    1f1c:	2f 81       	ldd	r18, Y+7	; 0x07
    1f1e:	38 85       	ldd	r19, Y+8	; 0x08
    1f20:	26 15       	cp	r18, r6
    1f22:	37 05       	cpc	r19, r7
    1f24:	09 f4       	brne	.+2      	; 0x1f28 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x246>
    1f26:	8a cf       	rjmp	.-236    	; 0x1e3c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x15a>
    1f28:	31 e0       	ldi	r19, 0x01	; 1
    1f2a:	b3 12       	cpse	r11, r19
    1f2c:	07 c0       	rjmp	.+14     	; 0x1f3c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x25a>
    1f2e:	a3 12       	cpse	r10, r19
    1f30:	05 c0       	rjmp	.+10     	; 0x1f3c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x25a>
    1f32:	1c 96       	adiw	r26, 0x0c	; 12
    1f34:	ed 91       	ld	r30, X+
    1f36:	fc 91       	ld	r31, X
    1f38:	93 01       	movw	r18, r6
    1f3a:	78 cf       	rjmp	.-272    	; 0x1e2c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x14a>
    1f3c:	1e 96       	adiw	r26, 0x0e	; 14
    1f3e:	ed 91       	ld	r30, X+
    1f40:	fc 91       	ld	r31, X
    1f42:	73 01       	movw	r14, r6
    1f44:	e0 cf       	rjmp	.-64     	; 0x1f06 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x224>
    1f46:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f48:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f4a:	64 19       	sub	r22, r4
    1f4c:	75 09       	sbc	r23, r5
    1f4e:	06 84       	ldd	r0, Z+14	; 0x0e
    1f50:	f7 85       	ldd	r31, Z+15	; 0x0f
    1f52:	e0 2d       	mov	r30, r0
    1f54:	73 01       	movw	r14, r6
    1f56:	0f 85       	ldd	r16, Y+15	; 0x0f
    1f58:	18 89       	ldd	r17, Y+16	; 0x10
    1f5a:	92 01       	movw	r18, r4
    1f5c:	a4 01       	movw	r20, r8
    1f5e:	89 8d       	ldd	r24, Y+25	; 0x19
    1f60:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f62:	09 95       	icall
    1f64:	a9 cf       	rjmp	.-174    	; 0x1eb8 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    1f66:	f9 01       	movw	r30, r18
    1f68:	34 96       	adiw	r30, 0x04	; 4
    1f6a:	94 91       	lpm	r25, Z
_Z18pgm_read_glyph_ptrPK7GFXfonth():
    1f6c:	32 97       	sbiw	r30, 0x02	; 2
    1f6e:	45 91       	lpm	r20, Z+
    1f70:	54 91       	lpm	r21, Z
_ZN12Adafruit_GFX8drawCharEiihjjhh():
    1f72:	d9 1a       	sub	r13, r25
_Z18pgm_read_glyph_ptrPK7GFXfonth():
    1f74:	b7 e0       	ldi	r27, 0x07	; 7
    1f76:	db 9e       	mul	r13, r27
    1f78:	40 0d       	add	r20, r0
    1f7a:	51 1d       	adc	r21, r1
    1f7c:	11 24       	eor	r1, r1
_Z19pgm_read_bitmap_ptrPK7GFXfont():
    1f7e:	f9 01       	movw	r30, r18
    1f80:	25 91       	lpm	r18, Z+
    1f82:	34 91       	lpm	r19, Z
    1f84:	3c 8b       	std	Y+20, r19	; 0x14
    1f86:	2b 8b       	std	Y+19, r18	; 0x13
_ZN12Adafruit_GFX8drawCharEiihjjhh():
    1f88:	fa 01       	movw	r30, r20
    1f8a:	25 90       	lpm	r2, Z+
    1f8c:	34 90       	lpm	r3, Z
    1f8e:	fa 01       	movw	r30, r20
    1f90:	32 96       	adiw	r30, 0x02	; 2
    1f92:	74 90       	lpm	r7, Z
    1f94:	31 96       	adiw	r30, 0x01	; 1
    1f96:	34 91       	lpm	r19, Z
    1f98:	39 8b       	std	Y+17, r19	; 0x11
    1f9a:	32 96       	adiw	r30, 0x02	; 2
    1f9c:	64 90       	lpm	r6, Z
    1f9e:	31 96       	adiw	r30, 0x01	; 1
    1fa0:	44 90       	lpm	r4, Z
    1fa2:	41 e0       	ldi	r20, 0x01	; 1
    1fa4:	4c 15       	cp	r20, r12
    1fa6:	18 f0       	brcs	.+6      	; 0x1fae <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2cc>
    1fa8:	4a 15       	cp	r20, r10
    1faa:	08 f0       	brcs	.+2      	; 0x1fae <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2cc>
    1fac:	7f c0       	rjmp	.+254    	; 0x20ac <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3ca>
    1fae:	66 2d       	mov	r22, r6
    1fb0:	06 2c       	mov	r0, r6
    1fb2:	00 0c       	add	r0, r0
    1fb4:	77 0b       	sbc	r23, r23
    1fb6:	7c 83       	std	Y+4, r23	; 0x04
    1fb8:	6b 83       	std	Y+3, r22	; 0x03
    1fba:	84 2d       	mov	r24, r4
    1fbc:	04 2c       	mov	r0, r4
    1fbe:	00 0c       	add	r0, r0
    1fc0:	99 0b       	sbc	r25, r25
    1fc2:	9e 83       	std	Y+6, r25	; 0x06
    1fc4:	8d 83       	std	Y+5, r24	; 0x05
    1fc6:	a9 8d       	ldd	r26, Y+25	; 0x19
    1fc8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1fca:	ed 91       	ld	r30, X+
    1fcc:	fc 91       	ld	r31, X
    1fce:	11 97       	sbiw	r26, 0x01	; 1
    1fd0:	02 84       	ldd	r0, Z+10	; 0x0a
    1fd2:	f3 85       	ldd	r31, Z+11	; 0x0b
    1fd4:	e0 2d       	mov	r30, r0
    1fd6:	cd 01       	movw	r24, r26
    1fd8:	09 95       	icall
    1fda:	51 2c       	mov	r5, r1
    1fdc:	d1 2c       	mov	r13, r1
    1fde:	c1 2c       	mov	r12, r1
    1fe0:	ea 2d       	mov	r30, r10
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	fa 87       	std	Y+10, r31	; 0x0a
    1fe6:	e9 87       	std	Y+9, r30	; 0x09
    1fe8:	2b 2d       	mov	r18, r11
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	3c 87       	std	Y+12, r19	; 0x0c
    1fee:	2b 87       	std	Y+11, r18	; 0x0b
    1ff0:	a4 01       	movw	r20, r8
    1ff2:	44 0d       	add	r20, r4
    1ff4:	51 1d       	adc	r21, r1
    1ff6:	47 fc       	sbrc	r4, 7
    1ff8:	5a 95       	dec	r21
    1ffa:	58 8f       	std	Y+24, r21	; 0x18
    1ffc:	4f 8b       	std	Y+23, r20	; 0x17
    1ffe:	69 81       	ldd	r22, Y+1	; 0x01
    2000:	7a 81       	ldd	r23, Y+2	; 0x02
    2002:	66 0d       	add	r22, r6
    2004:	71 1d       	adc	r23, r1
    2006:	67 fc       	sbrc	r6, 7
    2008:	7a 95       	dec	r23
    200a:	7e 87       	std	Y+14, r23	; 0x0e
    200c:	6d 87       	std	Y+13, r22	; 0x0d
    200e:	79 89       	ldd	r23, Y+17	; 0x11
    2010:	c7 16       	cp	r12, r23
    2012:	08 f0       	brcs	.+2      	; 0x2016 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x334>
    2014:	51 cf       	rjmp	.-350    	; 0x1eb8 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    2016:	2c 2d       	mov	r18, r12
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	4d 81       	ldd	r20, Y+5	; 0x05
    201c:	5e 81       	ldd	r21, Y+6	; 0x06
    201e:	42 0f       	add	r20, r18
    2020:	53 1f       	adc	r21, r19
    2022:	a9 85       	ldd	r26, Y+9	; 0x09
    2024:	ba 85       	ldd	r27, Y+10	; 0x0a
    2026:	4a 9f       	mul	r20, r26
    2028:	c0 01       	movw	r24, r0
    202a:	4b 9f       	mul	r20, r27
    202c:	90 0d       	add	r25, r0
    202e:	5a 9f       	mul	r21, r26
    2030:	90 0d       	add	r25, r0
    2032:	11 24       	eor	r1, r1
    2034:	fc 01       	movw	r30, r24
    2036:	e8 0d       	add	r30, r8
    2038:	f9 1d       	adc	r31, r9
    203a:	f8 8b       	std	Y+16, r31	; 0x10
    203c:	ef 87       	std	Y+15, r30	; 0x0f
    203e:	85 2d       	mov	r24, r5
    2040:	61 2c       	mov	r6, r1
    2042:	4f 89       	ldd	r20, Y+23	; 0x17
    2044:	58 8d       	ldd	r21, Y+24	; 0x18
    2046:	42 0f       	add	r20, r18
    2048:	53 1f       	adc	r21, r19
    204a:	5e 8b       	std	Y+22, r21	; 0x16
    204c:	4d 8b       	std	Y+21, r20	; 0x15
    204e:	67 14       	cp	r6, r7
    2050:	08 f0       	brcs	.+2      	; 0x2054 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x372>
    2052:	50 c0       	rjmp	.+160    	; 0x20f4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x412>
    2054:	44 24       	eor	r4, r4
    2056:	43 94       	inc	r4
    2058:	48 0e       	add	r4, r24
    205a:	87 70       	andi	r24, 0x07	; 7
    205c:	41 f4       	brne	.+16     	; 0x206e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x38c>
    205e:	c1 01       	movw	r24, r2
    2060:	01 96       	adiw	r24, 0x01	; 1
    2062:	eb 89       	ldd	r30, Y+19	; 0x13
    2064:	fc 89       	ldd	r31, Y+20	; 0x14
    2066:	e2 0d       	add	r30, r2
    2068:	f3 1d       	adc	r31, r3
    206a:	d4 90       	lpm	r13, Z
    206c:	1c 01       	movw	r2, r24
    206e:	d7 fe       	sbrs	r13, 7
    2070:	19 c0       	rjmp	.+50     	; 0x20a4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c2>
    2072:	a9 8d       	ldd	r26, Y+25	; 0x19
    2074:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2076:	ed 91       	ld	r30, X+
    2078:	fc 91       	ld	r31, X
    207a:	66 2d       	mov	r22, r6
    207c:	70 e0       	ldi	r23, 0x00	; 0
    207e:	b1 e0       	ldi	r27, 0x01	; 1
    2080:	bb 12       	cpse	r11, r27
    2082:	19 c0       	rjmp	.+50     	; 0x20b6 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3d4>
    2084:	ab 12       	cpse	r10, r27
    2086:	17 c0       	rjmp	.+46     	; 0x20b6 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3d4>
    2088:	2d 85       	ldd	r18, Y+13	; 0x0d
    208a:	3e 85       	ldd	r19, Y+14	; 0x0e
    208c:	62 0f       	add	r22, r18
    208e:	73 1f       	adc	r23, r19
    2090:	04 84       	ldd	r0, Z+12	; 0x0c
    2092:	f5 85       	ldd	r31, Z+13	; 0x0d
    2094:	e0 2d       	mov	r30, r0
    2096:	2f 81       	ldd	r18, Y+7	; 0x07
    2098:	38 85       	ldd	r19, Y+8	; 0x08
    209a:	4d 89       	ldd	r20, Y+21	; 0x15
    209c:	5e 89       	ldd	r21, Y+22	; 0x16
    209e:	89 8d       	ldd	r24, Y+25	; 0x19
    20a0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    20a2:	09 95       	icall
    20a4:	dd 0c       	add	r13, r13
    20a6:	63 94       	inc	r6
    20a8:	84 2d       	mov	r24, r4
    20aa:	d1 cf       	rjmp	.-94     	; 0x204e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x36c>
    20ac:	1e 82       	std	Y+6, r1	; 0x06
    20ae:	1d 82       	std	Y+5, r1	; 0x05
    20b0:	1c 82       	std	Y+4, r1	; 0x04
    20b2:	1b 82       	std	Y+3, r1	; 0x03
    20b4:	88 cf       	rjmp	.-240    	; 0x1fc6 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2e4>
    20b6:	4b 81       	ldd	r20, Y+3	; 0x03
    20b8:	5c 81       	ldd	r21, Y+4	; 0x04
    20ba:	64 0f       	add	r22, r20
    20bc:	75 1f       	adc	r23, r21
    20be:	ab 85       	ldd	r26, Y+11	; 0x0b
    20c0:	bc 85       	ldd	r27, Y+12	; 0x0c
    20c2:	6a 9f       	mul	r22, r26
    20c4:	c0 01       	movw	r24, r0
    20c6:	6b 9f       	mul	r22, r27
    20c8:	90 0d       	add	r25, r0
    20ca:	7a 9f       	mul	r23, r26
    20cc:	90 0d       	add	r25, r0
    20ce:	11 24       	eor	r1, r1
    20d0:	69 81       	ldd	r22, Y+1	; 0x01
    20d2:	7a 81       	ldd	r23, Y+2	; 0x02
    20d4:	68 0f       	add	r22, r24
    20d6:	79 1f       	adc	r23, r25
    20d8:	06 84       	ldd	r0, Z+14	; 0x0e
    20da:	f7 85       	ldd	r31, Z+15	; 0x0f
    20dc:	e0 2d       	mov	r30, r0
    20de:	ef 80       	ldd	r14, Y+7	; 0x07
    20e0:	f8 84       	ldd	r15, Y+8	; 0x08
    20e2:	09 85       	ldd	r16, Y+9	; 0x09
    20e4:	1a 85       	ldd	r17, Y+10	; 0x0a
    20e6:	9d 01       	movw	r18, r26
    20e8:	4f 85       	ldd	r20, Y+15	; 0x0f
    20ea:	58 89       	ldd	r21, Y+16	; 0x10
    20ec:	89 8d       	ldd	r24, Y+25	; 0x19
    20ee:	9a 8d       	ldd	r25, Y+26	; 0x1a
    20f0:	09 95       	icall
    20f2:	d8 cf       	rjmp	.-80     	; 0x20a4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c2>
    20f4:	57 0c       	add	r5, r7
    20f6:	c3 94       	inc	r12
    20f8:	8a cf       	rjmp	.-236    	; 0x200e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x32c>
    20fa:	6a 96       	adiw	r28, 0x1a	; 26
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	f8 94       	cli
    2100:	de bf       	out	0x3e, r29	; 62
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	cd bf       	out	0x3d, r28	; 61
    2106:	df 91       	pop	r29
    2108:	cf 91       	pop	r28
    210a:	1f 91       	pop	r17
    210c:	0f 91       	pop	r16
    210e:	ff 90       	pop	r15
    2110:	ef 90       	pop	r14
    2112:	df 90       	pop	r13
    2114:	cf 90       	pop	r12
    2116:	bf 90       	pop	r11
    2118:	af 90       	pop	r10
    211a:	9f 90       	pop	r9
    211c:	8f 90       	pop	r8
    211e:	7f 90       	pop	r7
    2120:	6f 90       	pop	r6
    2122:	5f 90       	pop	r5
    2124:	4f 90       	pop	r4
    2126:	3f 90       	pop	r3
    2128:	2f 90       	pop	r2
    212a:	08 95       	ret

0000212c <Adafruit_GFX::write(unsigned char)>:
_ZN12Adafruit_GFX5writeEh():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1242
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    212c:	8f 92       	push	r8
    212e:	9f 92       	push	r9
    2130:	af 92       	push	r10
    2132:	cf 92       	push	r12
    2134:	ef 92       	push	r14
    2136:	ff 92       	push	r15
    2138:	0f 93       	push	r16
    213a:	1f 93       	push	r17
    213c:	cf 93       	push	r28
    213e:	df 93       	push	r29
    2140:	ec 01       	movw	r28, r24
    2142:	26 2f       	mov	r18, r22
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1243
  if (!gfxFont) { // 'Classic' built-in font
    2144:	89 8d       	ldd	r24, Y+25	; 0x19
    2146:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	09 f0       	breq	.+2      	; 0x214e <Adafruit_GFX::write(unsigned char)+0x22>
    214c:	51 c0       	rjmp	.+162    	; 0x21f0 <Adafruit_GFX::write(unsigned char)+0xc4>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1245

    if (c == '\n') {              // Newline?
    214e:	6a 30       	cpi	r22, 0x0A	; 10
    2150:	d1 f4       	brne	.+52     	; 0x2186 <Adafruit_GFX::write(unsigned char)+0x5a>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1246
      cursor_x = 0;               // Reset x to zero,
    2152:	1d 86       	std	Y+13, r1	; 0x0d
    2154:	1c 86       	std	Y+12, r1	; 0x0c
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1247
      cursor_y += textsize_y * 8; // advance y one line
    2156:	8d 89       	ldd	r24, Y+21	; 0x15
    2158:	48 e0       	ldi	r20, 0x08	; 8
    215a:	84 9f       	mul	r24, r20
    215c:	90 01       	movw	r18, r0
    215e:	11 24       	eor	r1, r1
    2160:	8e 85       	ldd	r24, Y+14	; 0x0e
    2162:	9f 85       	ldd	r25, Y+15	; 0x0f
    2164:	82 0f       	add	r24, r18
    2166:	93 1f       	adc	r25, r19
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1262

  } else { // Custom font

    if (c == '\n') {
      cursor_x = 0;
      cursor_y +=
    2168:	9f 87       	std	Y+15, r25	; 0x0f
    216a:	8e 87       	std	Y+14, r24	; 0x0e
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1286
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
      }
    }
  }
  return 1;
}
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	df 91       	pop	r29
    2172:	cf 91       	pop	r28
    2174:	1f 91       	pop	r17
    2176:	0f 91       	pop	r16
    2178:	ff 90       	pop	r15
    217a:	ef 90       	pop	r14
    217c:	cf 90       	pop	r12
    217e:	af 90       	pop	r10
    2180:	9f 90       	pop	r9
    2182:	8f 90       	pop	r8
    2184:	08 95       	ret
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1248
  if (!gfxFont) { // 'Classic' built-in font

    if (c == '\n') {              // Newline?
      cursor_x = 0;               // Reset x to zero,
      cursor_y += textsize_y * 8; // advance y one line
    } else if (c != '\r') {       // Ignore carriage returns
    2186:	6d 30       	cpi	r22, 0x0D	; 13
    2188:	89 f3       	breq	.-30     	; 0x216c <Adafruit_GFX::write(unsigned char)+0x40>
    218a:	cc 88       	ldd	r12, Y+20	; 0x14
    218c:	ad 88       	ldd	r10, Y+21	; 0x15
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1249
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    218e:	8f 89       	ldd	r24, Y+23	; 0x17
    2190:	88 23       	and	r24, r24
    2192:	c1 f0       	breq	.+48     	; 0x21c4 <Adafruit_GFX::write(unsigned char)+0x98>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1249 (discriminator 1)
    2194:	8c 85       	ldd	r24, Y+12	; 0x0c
    2196:	9d 85       	ldd	r25, Y+13	; 0x0d
    2198:	36 e0       	ldi	r19, 0x06	; 6
    219a:	c3 9e       	mul	r12, r19
    219c:	80 0d       	add	r24, r0
    219e:	91 1d       	adc	r25, r1
    21a0:	11 24       	eor	r1, r1
    21a2:	48 85       	ldd	r20, Y+8	; 0x08
    21a4:	59 85       	ldd	r21, Y+9	; 0x09
    21a6:	48 17       	cp	r20, r24
    21a8:	59 07       	cpc	r21, r25
    21aa:	64 f4       	brge	.+24     	; 0x21c4 <Adafruit_GFX::write(unsigned char)+0x98>
    21ac:	4e 85       	ldd	r20, Y+14	; 0x0e
    21ae:	5f 85       	ldd	r21, Y+15	; 0x0f
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1250
        cursor_x = 0;                                       // Reset x to zero,
    21b0:	1d 86       	std	Y+13, r1	; 0x0d
    21b2:	1c 86       	std	Y+12, r1	; 0x0c
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1251
        cursor_y += textsize_y * 8; // advance y one line
    21b4:	38 e0       	ldi	r19, 0x08	; 8
    21b6:	a3 9e       	mul	r10, r19
    21b8:	c0 01       	movw	r24, r0
    21ba:	11 24       	eor	r1, r1
    21bc:	84 0f       	add	r24, r20
    21be:	95 1f       	adc	r25, r21
    21c0:	9f 87       	std	Y+15, r25	; 0x0f
    21c2:	8e 87       	std	Y+14, r24	; 0x0e
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1253
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
    21c4:	ea 88       	ldd	r14, Y+18	; 0x12
    21c6:	fb 88       	ldd	r15, Y+19	; 0x13
    21c8:	08 89       	ldd	r16, Y+16	; 0x10
    21ca:	19 89       	ldd	r17, Y+17	; 0x11
    21cc:	4e 85       	ldd	r20, Y+14	; 0x0e
    21ce:	5f 85       	ldd	r21, Y+15	; 0x0f
    21d0:	6c 85       	ldd	r22, Y+12	; 0x0c
    21d2:	7d 85       	ldd	r23, Y+13	; 0x0d
    21d4:	ce 01       	movw	r24, r28
    21d6:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1255
               textsize_y);
      cursor_x += textsize_x * 6; // Advance x one char
    21da:	2c 89       	ldd	r18, Y+20	; 0x14
    21dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    21de:	9d 85       	ldd	r25, Y+13	; 0x0d
    21e0:	46 e0       	ldi	r20, 0x06	; 6
    21e2:	24 9f       	mul	r18, r20
    21e4:	80 0d       	add	r24, r0
    21e6:	91 1d       	adc	r25, r1
    21e8:	11 24       	eor	r1, r1
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1280
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
        }
        cursor_x +=
    21ea:	9d 87       	std	Y+13, r25	; 0x0d
    21ec:	8c 87       	std	Y+12, r24	; 0x0c
    21ee:	be cf       	rjmp	.-132    	; 0x216c <Adafruit_GFX::write(unsigned char)+0x40>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1260
      cursor_x += textsize_x * 6; // Advance x one char
    }

  } else { // Custom font

    if (c == '\n') {
    21f0:	6a 30       	cpi	r22, 0x0A	; 10
    21f2:	69 f4       	brne	.+26     	; 0x220e <Adafruit_GFX::write(unsigned char)+0xe2>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1261
      cursor_x = 0;
    21f4:	1d 86       	std	Y+13, r1	; 0x0d
    21f6:	1c 86       	std	Y+12, r1	; 0x0c
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1263
      cursor_y +=
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    21f8:	fc 01       	movw	r30, r24
    21fa:	36 96       	adiw	r30, 0x06	; 6
    21fc:	e4 91       	lpm	r30, Z
    21fe:	2d 89       	ldd	r18, Y+21	; 0x15
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1262

  } else { // Custom font

    if (c == '\n') {
      cursor_x = 0;
      cursor_y +=
    2200:	8e 85       	ldd	r24, Y+14	; 0x0e
    2202:	9f 85       	ldd	r25, Y+15	; 0x0f
    2204:	e2 9f       	mul	r30, r18
    2206:	80 0d       	add	r24, r0
    2208:	91 1d       	adc	r25, r1
    220a:	11 24       	eor	r1, r1
    220c:	ad cf       	rjmp	.-166    	; 0x2168 <Adafruit_GFX::write(unsigned char)+0x3c>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1264
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
    220e:	6d 30       	cpi	r22, 0x0D	; 13
    2210:	09 f4       	brne	.+2      	; 0x2214 <Adafruit_GFX::write(unsigned char)+0xe8>
    2212:	ac cf       	rjmp	.-168    	; 0x216c <Adafruit_GFX::write(unsigned char)+0x40>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1265
      uint8_t first = pgm_read_byte(&gfxFont->first);
    2214:	fc 01       	movw	r30, r24
    2216:	34 96       	adiw	r30, 0x04	; 4
    2218:	34 91       	lpm	r19, Z
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1266
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    221a:	63 17       	cp	r22, r19
    221c:	08 f4       	brcc	.+2      	; 0x2220 <Adafruit_GFX::write(unsigned char)+0xf4>
    221e:	a6 cf       	rjmp	.-180    	; 0x216c <Adafruit_GFX::write(unsigned char)+0x40>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1266 (discriminator 1)
    2220:	31 96       	adiw	r30, 0x01	; 1
    2222:	e4 91       	lpm	r30, Z
    2224:	e6 17       	cp	r30, r22
    2226:	08 f4       	brcc	.+2      	; 0x222a <Adafruit_GFX::write(unsigned char)+0xfe>
    2228:	a1 cf       	rjmp	.-190    	; 0x216c <Adafruit_GFX::write(unsigned char)+0x40>
_Z18pgm_read_glyph_ptrPK7GFXfonth():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:67
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    222a:	fc 01       	movw	r30, r24
    222c:	32 96       	adiw	r30, 0x02	; 2
    222e:	85 90       	lpm	r8, Z+
    2230:	94 90       	lpm	r9, Z
_ZN12Adafruit_GFX5writeEh():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1267
      cursor_y +=
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
      uint8_t first = pgm_read_byte(&gfxFont->first);
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
    2232:	46 2f       	mov	r20, r22
    2234:	43 1b       	sub	r20, r19
    2236:	34 2f       	mov	r19, r20
_Z18pgm_read_glyph_ptrPK7GFXfonth():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:67
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    2238:	47 e0       	ldi	r20, 0x07	; 7
    223a:	34 9f       	mul	r19, r20
    223c:	80 0c       	add	r8, r0
    223e:	91 1c       	adc	r9, r1
    2240:	11 24       	eor	r1, r1
_ZN12Adafruit_GFX5writeEh():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1268
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
      uint8_t first = pgm_read_byte(&gfxFont->first);
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
    2242:	f4 01       	movw	r30, r8
    2244:	32 96       	adiw	r30, 0x02	; 2
    2246:	34 91       	lpm	r19, Z
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1269
                h = pgm_read_byte(&glyph->height);
    2248:	31 96       	adiw	r30, 0x01	; 1
    224a:	e4 91       	lpm	r30, Z
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1270
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
    224c:	33 23       	and	r19, r19
    224e:	a9 f1       	breq	.+106    	; 0x22ba <Adafruit_GFX::write(unsigned char)+0x18e>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1270 (discriminator 1)
    2250:	ee 23       	and	r30, r30
    2252:	99 f1       	breq	.+102    	; 0x22ba <Adafruit_GFX::write(unsigned char)+0x18e>
    2254:	cc 88       	ldd	r12, Y+20	; 0x14
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1271
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    2256:	f4 01       	movw	r30, r8
    2258:	35 96       	adiw	r30, 0x05	; 5
    225a:	e4 91       	lpm	r30, Z
    225c:	ad 88       	ldd	r10, Y+21	; 0x15
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1272
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    225e:	4f 89       	ldd	r20, Y+23	; 0x17
    2260:	44 23       	and	r20, r20
    2262:	01 f1       	breq	.+64     	; 0x22a4 <Adafruit_GFX::write(unsigned char)+0x178>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1271 (discriminator 1)
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
                h = pgm_read_byte(&glyph->height);
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    2264:	0e 2e       	mov	r0, r30
    2266:	00 0c       	add	r0, r0
    2268:	ff 0b       	sbc	r31, r31
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1272 (discriminator 1)
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    226a:	e3 0f       	add	r30, r19
    226c:	f1 1d       	adc	r31, r1
    226e:	ce 9e       	mul	r12, r30
    2270:	a0 01       	movw	r20, r0
    2272:	cf 9e       	mul	r12, r31
    2274:	50 0d       	add	r21, r0
    2276:	11 24       	eor	r1, r1
    2278:	6c 85       	ldd	r22, Y+12	; 0x0c
    227a:	7d 85       	ldd	r23, Y+13	; 0x0d
    227c:	46 0f       	add	r20, r22
    227e:	57 1f       	adc	r21, r23
    2280:	68 85       	ldd	r22, Y+8	; 0x08
    2282:	79 85       	ldd	r23, Y+9	; 0x09
    2284:	64 17       	cp	r22, r20
    2286:	75 07       	cpc	r23, r21
    2288:	6c f4       	brge	.+26     	; 0x22a4 <Adafruit_GFX::write(unsigned char)+0x178>
    228a:	4e 85       	ldd	r20, Y+14	; 0x0e
    228c:	5f 85       	ldd	r21, Y+15	; 0x0f
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1273
            cursor_x = 0;
    228e:	1d 86       	std	Y+13, r1	; 0x0d
    2290:	1c 86       	std	Y+12, r1	; 0x0c
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1275
            cursor_y += (int16_t)textsize_y *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    2292:	fc 01       	movw	r30, r24
    2294:	36 96       	adiw	r30, 0x06	; 6
    2296:	e4 91       	lpm	r30, Z
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1274
                h = pgm_read_byte(&glyph->height);
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
            cursor_x = 0;
            cursor_y += (int16_t)textsize_y *
    2298:	ae 9e       	mul	r10, r30
    229a:	40 0d       	add	r20, r0
    229c:	51 1d       	adc	r21, r1
    229e:	11 24       	eor	r1, r1
    22a0:	5f 87       	std	Y+15, r21	; 0x0f
    22a2:	4e 87       	std	Y+14, r20	; 0x0e
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1277
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
    22a4:	ea 88       	ldd	r14, Y+18	; 0x12
    22a6:	fb 88       	ldd	r15, Y+19	; 0x13
    22a8:	08 89       	ldd	r16, Y+16	; 0x10
    22aa:	19 89       	ldd	r17, Y+17	; 0x11
    22ac:	4e 85       	ldd	r20, Y+14	; 0x0e
    22ae:	5f 85       	ldd	r21, Y+15	; 0x0f
    22b0:	6c 85       	ldd	r22, Y+12	; 0x0c
    22b2:	7d 85       	ldd	r23, Y+13	; 0x0d
    22b4:	ce 01       	movw	r24, r28
    22b6:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1281
                   textsize_y);
        }
        cursor_x +=
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    22ba:	f4 01       	movw	r30, r8
    22bc:	34 96       	adiw	r30, 0x04	; 4
    22be:	e4 91       	lpm	r30, Z
    22c0:	2c 89       	ldd	r18, Y+20	; 0x14
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1280
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
        }
        cursor_x +=
    22c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    22c4:	9d 85       	ldd	r25, Y+13	; 0x0d
    22c6:	e2 9f       	mul	r30, r18
    22c8:	80 0d       	add	r24, r0
    22ca:	91 1d       	adc	r25, r1
    22cc:	11 24       	eor	r1, r1
    22ce:	8d cf       	rjmp	.-230    	; 0x21ea <Adafruit_GFX::write(unsigned char)+0xbe>

000022d0 <Adafruit_GFX::setTextSize(unsigned char, unsigned char)>:
_ZN12Adafruit_GFX11setTextSizeEhh():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1306
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    22d0:	61 11       	cpse	r22, r1
    22d2:	01 c0       	rjmp	.+2      	; 0x22d6 <Adafruit_GFX::setTextSize(unsigned char, unsigned char)+0x6>
    22d4:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1306 (discriminator 4)
    22d6:	fc 01       	movw	r30, r24
    22d8:	64 8b       	std	Z+20, r22	; 0x14
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1307 (discriminator 4)
  textsize_y = (s_y > 0) ? s_y : 1;
    22da:	41 11       	cpse	r20, r1
    22dc:	01 c0       	rjmp	.+2      	; 0x22e0 <Adafruit_GFX::setTextSize(unsigned char, unsigned char)+0x10>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1307
    22de:	41 e0       	ldi	r20, 0x01	; 1
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1307 (discriminator 4)
    22e0:	fc 01       	movw	r30, r24
    22e2:	45 8b       	std	Z+21, r20	; 0x15
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1308 (discriminator 4)
}
    22e4:	08 95       	ret

000022e6 <Adafruit_GFX::setTextSize(unsigned char)>:
_ZN12Adafruit_GFX11setTextSizeEh():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1295
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel
   that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
    22e6:	46 2f       	mov	r20, r22
    22e8:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <Adafruit_GFX::setTextSize(unsigned char, unsigned char)>

000022ec <SPIClass::endTransaction()>:
_ZN8SPIClass14endTransactionEv():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\SPI\src/SPI.h:272
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
    22ec:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <SPIClass::interruptMode>
    22f0:	88 23       	and	r24, r24
    22f2:	61 f0       	breq	.+24     	; 0x230c <SPIClass::endTransaction()+0x20>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\SPI\src/SPI.h:274
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
    22f4:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\SPI\src/SPI.h:276
      #endif
      noInterrupts();
    22f6:	f8 94       	cli
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\SPI\src/SPI.h:278
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    22f8:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <SPIClass::interruptMode>
    22fc:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <SPIClass::interruptSave>
    2300:	21 30       	cpi	r18, 0x01	; 1
    2302:	19 f4       	brne	.+6      	; 0x230a <SPIClass::endTransaction()+0x1e>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\SPI\src/SPI.h:279
        SPI_AVR_EIMSK = interruptSave;
    2304:	89 bf       	out	0x39, r24	; 57
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\SPI\src/SPI.h:280
        SREG = sreg;
    2306:	9f bf       	out	0x3f, r25	; 63
    2308:	08 95       	ret
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\SPI\src/SPI.h:284
      } else
      #endif
      {
        SREG = interruptSave;
    230a:	8f bf       	out	0x3f, r24	; 63
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\libraries\SPI\src/SPI.h:287
      }
    }
  }
    230c:	08 95       	ret

0000230e <Adafruit_SSD1306::drawPixel(int, int, unsigned int)>:
_ZN16Adafruit_SSD13069drawPixelEiij():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:915
/*!
    @brief  Get base address of display buffer for direct reading or writing.
    @return Pointer to an unsigned 8-bit array, column-major, columns padded
            to full byte boundary if needed.
*/
uint8_t *Adafruit_SSD1306::getBuffer(void) { return buffer; }
    230e:	fc 01       	movw	r30, r24
    2310:	77 fd       	sbrc	r23, 7
    2312:	64 c0       	rjmp	.+200    	; 0x23dc <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xce>
    2314:	80 85       	ldd	r24, Z+8	; 0x08
    2316:	91 85       	ldd	r25, Z+9	; 0x09
    2318:	68 17       	cp	r22, r24
    231a:	79 07       	cpc	r23, r25
    231c:	0c f0       	brlt	.+2      	; 0x2320 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x12>
    231e:	5e c0       	rjmp	.+188    	; 0x23dc <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xce>
    2320:	57 fd       	sbrc	r21, 7
    2322:	5c c0       	rjmp	.+184    	; 0x23dc <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xce>
    2324:	82 85       	ldd	r24, Z+10	; 0x0a
    2326:	93 85       	ldd	r25, Z+11	; 0x0b
    2328:	48 17       	cp	r20, r24
    232a:	59 07       	cpc	r21, r25
    232c:	0c f0       	brlt	.+2      	; 0x2330 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x22>
    232e:	56 c0       	rjmp	.+172    	; 0x23dc <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xce>
    2330:	86 89       	ldd	r24, Z+22	; 0x16
    2332:	82 30       	cpi	r24, 0x02	; 2
    2334:	b1 f0       	breq	.+44     	; 0x2362 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x54>
    2336:	83 30       	cpi	r24, 0x03	; 3
    2338:	29 f1       	breq	.+74     	; 0x2384 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x76>
    233a:	81 30       	cpi	r24, 0x01	; 1
    233c:	41 f4       	brne	.+16     	; 0x234e <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x40>
    233e:	84 81       	ldd	r24, Z+4	; 0x04
    2340:	95 81       	ldd	r25, Z+5	; 0x05
    2342:	84 1b       	sub	r24, r20
    2344:	95 0b       	sbc	r25, r21
    2346:	ab 01       	movw	r20, r22
    2348:	bc 01       	movw	r22, r24
    234a:	61 50       	subi	r22, 0x01	; 1
    234c:	71 09       	sbc	r23, r1
    234e:	21 30       	cpi	r18, 0x01	; 1
    2350:	31 05       	cpc	r19, r1
    2352:	09 f1       	breq	.+66     	; 0x2396 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x88>
    2354:	08 f4       	brcc	.+2      	; 0x2358 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x4a>
    2356:	43 c0       	rjmp	.+134    	; 0x23de <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xd0>
    2358:	22 30       	cpi	r18, 0x02	; 2
    235a:	31 05       	cpc	r19, r1
    235c:	09 f4       	brne	.+2      	; 0x2360 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x52>
    235e:	63 c0       	rjmp	.+198    	; 0x2426 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x118>
    2360:	08 95       	ret
    2362:	84 81       	ldd	r24, Z+4	; 0x04
    2364:	95 81       	ldd	r25, Z+5	; 0x05
    2366:	dc 01       	movw	r26, r24
    2368:	a6 1b       	sub	r26, r22
    236a:	b7 0b       	sbc	r27, r23
    236c:	bd 01       	movw	r22, r26
    236e:	61 50       	subi	r22, 0x01	; 1
    2370:	71 09       	sbc	r23, r1
    2372:	86 81       	ldd	r24, Z+6	; 0x06
    2374:	97 81       	ldd	r25, Z+7	; 0x07
    2376:	dc 01       	movw	r26, r24
    2378:	a4 1b       	sub	r26, r20
    237a:	b5 0b       	sbc	r27, r21
    237c:	ad 01       	movw	r20, r26
    237e:	41 50       	subi	r20, 0x01	; 1
    2380:	51 09       	sbc	r21, r1
    2382:	e5 cf       	rjmp	.-54     	; 0x234e <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x40>
    2384:	86 81       	ldd	r24, Z+6	; 0x06
    2386:	97 81       	ldd	r25, Z+7	; 0x07
    2388:	86 1b       	sub	r24, r22
    238a:	97 0b       	sbc	r25, r23
    238c:	ba 01       	movw	r22, r20
    238e:	ac 01       	movw	r20, r24
    2390:	41 50       	subi	r20, 0x01	; 1
    2392:	51 09       	sbc	r21, r1
    2394:	dc cf       	rjmp	.-72     	; 0x234e <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x40>
    2396:	ca 01       	movw	r24, r20
    2398:	57 fd       	sbrc	r21, 7
    239a:	07 96       	adiw	r24, 0x07	; 7
    239c:	a3 e0       	ldi	r26, 0x03	; 3
    239e:	95 95       	asr	r25
    23a0:	87 95       	ror	r24
    23a2:	aa 95       	dec	r26
    23a4:	e1 f7       	brne	.-8      	; 0x239e <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x90>
    23a6:	a4 81       	ldd	r26, Z+4	; 0x04
    23a8:	b5 81       	ldd	r27, Z+5	; 0x05
    23aa:	8a 9f       	mul	r24, r26
    23ac:	90 01       	movw	r18, r0
    23ae:	8b 9f       	mul	r24, r27
    23b0:	30 0d       	add	r19, r0
    23b2:	9a 9f       	mul	r25, r26
    23b4:	30 0d       	add	r19, r0
    23b6:	11 24       	eor	r1, r1
    23b8:	62 0f       	add	r22, r18
    23ba:	73 1f       	adc	r23, r19
    23bc:	07 8c       	ldd	r0, Z+31	; 0x1f
    23be:	f0 a1       	ldd	r31, Z+32	; 0x20
    23c0:	e0 2d       	mov	r30, r0
    23c2:	e6 0f       	add	r30, r22
    23c4:	f7 1f       	adc	r31, r23
    23c6:	47 70       	andi	r20, 0x07	; 7
    23c8:	55 27       	eor	r21, r21
    23ca:	21 e0       	ldi	r18, 0x01	; 1
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	01 c0       	rjmp	.+2      	; 0x23d2 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xc4>
    23d0:	22 0f       	add	r18, r18
    23d2:	4a 95       	dec	r20
    23d4:	ea f7       	brpl	.-6      	; 0x23d0 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xc2>
    23d6:	80 81       	ld	r24, Z
    23d8:	82 2b       	or	r24, r18
    23da:	80 83       	st	Z, r24
    23dc:	08 95       	ret
    23de:	ca 01       	movw	r24, r20
    23e0:	57 fd       	sbrc	r21, 7
    23e2:	07 96       	adiw	r24, 0x07	; 7
    23e4:	33 e0       	ldi	r19, 0x03	; 3
    23e6:	95 95       	asr	r25
    23e8:	87 95       	ror	r24
    23ea:	3a 95       	dec	r19
    23ec:	e1 f7       	brne	.-8      	; 0x23e6 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xd8>
    23ee:	a4 81       	ldd	r26, Z+4	; 0x04
    23f0:	b5 81       	ldd	r27, Z+5	; 0x05
    23f2:	8a 9f       	mul	r24, r26
    23f4:	90 01       	movw	r18, r0
    23f6:	8b 9f       	mul	r24, r27
    23f8:	30 0d       	add	r19, r0
    23fa:	9a 9f       	mul	r25, r26
    23fc:	30 0d       	add	r19, r0
    23fe:	11 24       	eor	r1, r1
    2400:	62 0f       	add	r22, r18
    2402:	73 1f       	adc	r23, r19
    2404:	07 8c       	ldd	r0, Z+31	; 0x1f
    2406:	f0 a1       	ldd	r31, Z+32	; 0x20
    2408:	e0 2d       	mov	r30, r0
    240a:	e6 0f       	add	r30, r22
    240c:	f7 1f       	adc	r31, r23
    240e:	47 70       	andi	r20, 0x07	; 7
    2410:	55 27       	eor	r21, r21
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	01 c0       	rjmp	.+2      	; 0x241a <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x10c>
    2418:	88 0f       	add	r24, r24
    241a:	4a 95       	dec	r20
    241c:	ea f7       	brpl	.-6      	; 0x2418 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x10a>
    241e:	80 95       	com	r24
    2420:	90 81       	ld	r25, Z
    2422:	89 23       	and	r24, r25
    2424:	da cf       	rjmp	.-76     	; 0x23da <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xcc>
    2426:	ca 01       	movw	r24, r20
    2428:	57 fd       	sbrc	r21, 7
    242a:	07 96       	adiw	r24, 0x07	; 7
    242c:	23 e0       	ldi	r18, 0x03	; 3
    242e:	95 95       	asr	r25
    2430:	87 95       	ror	r24
    2432:	2a 95       	dec	r18
    2434:	e1 f7       	brne	.-8      	; 0x242e <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x120>
    2436:	a4 81       	ldd	r26, Z+4	; 0x04
    2438:	b5 81       	ldd	r27, Z+5	; 0x05
    243a:	8a 9f       	mul	r24, r26
    243c:	90 01       	movw	r18, r0
    243e:	8b 9f       	mul	r24, r27
    2440:	30 0d       	add	r19, r0
    2442:	9a 9f       	mul	r25, r26
    2444:	30 0d       	add	r19, r0
    2446:	11 24       	eor	r1, r1
    2448:	62 0f       	add	r22, r18
    244a:	73 1f       	adc	r23, r19
    244c:	07 8c       	ldd	r0, Z+31	; 0x1f
    244e:	f0 a1       	ldd	r31, Z+32	; 0x20
    2450:	e0 2d       	mov	r30, r0
    2452:	e6 0f       	add	r30, r22
    2454:	f7 1f       	adc	r31, r23
    2456:	47 70       	andi	r20, 0x07	; 7
    2458:	55 27       	eor	r21, r21
    245a:	21 e0       	ldi	r18, 0x01	; 1
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	01 c0       	rjmp	.+2      	; 0x2462 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x154>
    2460:	22 0f       	add	r18, r18
    2462:	4a 95       	dec	r20
    2464:	ea f7       	brpl	.-6      	; 0x2460 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x152>
    2466:	80 81       	ld	r24, Z
    2468:	82 27       	eor	r24, r18
    246a:	b7 cf       	rjmp	.-146    	; 0x23da <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xcc>

0000246c <SPIClass::beginTransaction(SPISettings)>:
_ZN8SPIClass16beginTransactionE11SPISettings():
    246c:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <SPIClass::interruptMode>
    2470:	22 23       	and	r18, r18
    2472:	81 f0       	breq	.+32     	; 0x2494 <SPIClass::beginTransaction(SPISettings)+0x28>
    2474:	3f b7       	in	r19, 0x3f	; 63
    2476:	f8 94       	cli
    2478:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <SPIClass::interruptMode>
    247c:	21 30       	cpi	r18, 0x01	; 1
    247e:	69 f4       	brne	.+26     	; 0x249a <SPIClass::beginTransaction(SPISettings)+0x2e>
    2480:	29 b7       	in	r18, 0x39	; 57
    2482:	20 93 0d 02 	sts	0x020D, r18	; 0x80020d <SPIClass::interruptSave>
    2486:	49 b7       	in	r20, 0x39	; 57
    2488:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <SPIClass::interruptMask>
    248c:	20 95       	com	r18
    248e:	24 23       	and	r18, r20
    2490:	29 bf       	out	0x39, r18	; 57
    2492:	3f bf       	out	0x3f, r19	; 63
    2494:	8d b9       	out	0x0d, r24	; 13
    2496:	9e b9       	out	0x0e, r25	; 14
    2498:	08 95       	ret
    249a:	30 93 0d 02 	sts	0x020D, r19	; 0x80020d <SPIClass::interruptSave>
    249e:	fa cf       	rjmp	.-12     	; 0x2494 <SPIClass::beginTransaction(SPISettings)+0x28>

000024a0 <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
    24a0:	8f b9       	out	0x0f, r24	; 15
    24a2:	00 00       	nop
    24a4:	77 9b       	sbis	0x0e, 7	; 14
    24a6:	fe cf       	rjmp	.-4      	; 0x24a4 <SPIClass::transfer(unsigned char)+0x4>
    24a8:	8f b1       	in	r24, 0x0f	; 15
    24aa:	08 95       	ret

000024ac <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)>:
_ZN16Adafruit_SSD1306C2EhhP7TwoWireamm():
    24ac:	4f 92       	push	r4
    24ae:	5f 92       	push	r5
    24b0:	6f 92       	push	r6
    24b2:	7f 92       	push	r7
    24b4:	8f 92       	push	r8
    24b6:	9f 92       	push	r9
    24b8:	af 92       	push	r10
    24ba:	bf 92       	push	r11
    24bc:	cf 92       	push	r12
    24be:	df 92       	push	r13
    24c0:	ef 92       	push	r14
    24c2:	ff 92       	push	r15
    24c4:	0f 93       	push	r16
    24c6:	cf 93       	push	r28
    24c8:	df 93       	push	r29
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	3c 01       	movw	r6, r24
    24d0:	29 01       	movw	r4, r18
    24d2:	50 e0       	ldi	r21, 0x00	; 0
    24d4:	70 e0       	ldi	r23, 0x00	; 0
    24d6:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <Adafruit_GFX::Adafruit_GFX(int, int)>
    24da:	85 e9       	ldi	r24, 0x95	; 149
    24dc:	91 e0       	ldi	r25, 0x01	; 1
    24de:	f3 01       	movw	r30, r6
    24e0:	91 83       	std	Z+1, r25	; 0x01
    24e2:	80 83       	st	Z, r24
    24e4:	14 8e       	std	Z+28, r1	; 0x1c
    24e6:	13 8e       	std	Z+27, r1	; 0x1b
    24e8:	41 14       	cp	r4, r1
    24ea:	51 04       	cpc	r5, r1
    24ec:	21 f4       	brne	.+8      	; 0x24f6 <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)+0x4a>
    24ee:	81 e1       	ldi	r24, 0x11	; 17
    24f0:	48 2e       	mov	r4, r24
    24f2:	82 e0       	ldi	r24, 0x02	; 2
    24f4:	58 2e       	mov	r5, r24
    24f6:	f3 01       	movw	r30, r6
    24f8:	56 8e       	std	Z+30, r5	; 0x1e
    24fa:	45 8e       	std	Z+29, r4	; 0x1d
    24fc:	10 a2       	std	Z+32, r1	; 0x20
    24fe:	17 8e       	std	Z+31, r1	; 0x1f
    2500:	8f ef       	ldi	r24, 0xFF	; 255
    2502:	84 a3       	std	Z+36, r24	; 0x24
    2504:	85 a3       	std	Z+37, r24	; 0x25
    2506:	86 a3       	std	Z+38, r24	; 0x26
    2508:	87 a3       	std	Z+39, r24	; 0x27
    250a:	00 a7       	std	Z+40, r16	; 0x28
    250c:	c5 aa       	std	Z+53, r12	; 0x35
    250e:	d6 aa       	std	Z+54, r13	; 0x36
    2510:	e7 aa       	std	Z+55, r14	; 0x37
    2512:	f0 ae       	std	Z+56, r15	; 0x38
    2514:	81 ae       	std	Z+57, r8	; 0x39
    2516:	92 ae       	std	Z+58, r9	; 0x3a
    2518:	a3 ae       	std	Z+59, r10	; 0x3b
    251a:	b4 ae       	std	Z+60, r11	; 0x3c
_ZN11SPISettings17init_AlwaysInlineEmhh():
    251c:	80 e5       	ldi	r24, 0x50	; 80
    251e:	86 af       	std	Z+62, r24	; 0x3e
    2520:	17 ae       	std	Z+63, r1	; 0x3f
_ZN16Adafruit_SSD1306C2EhhP7TwoWireamm():
    2522:	df 91       	pop	r29
    2524:	cf 91       	pop	r28
    2526:	0f 91       	pop	r16
    2528:	ff 90       	pop	r15
    252a:	ef 90       	pop	r14
    252c:	df 90       	pop	r13
    252e:	cf 90       	pop	r12
    2530:	bf 90       	pop	r11
    2532:	af 90       	pop	r10
    2534:	9f 90       	pop	r9
    2536:	8f 90       	pop	r8
    2538:	7f 90       	pop	r7
    253a:	6f 90       	pop	r6
    253c:	5f 90       	pop	r5
    253e:	4f 90       	pop	r4
    2540:	08 95       	ret

00002542 <Adafruit_SSD1306::~Adafruit_SSD1306()>:
_ZN16Adafruit_SSD1306D2Ev():
    2542:	25 e9       	ldi	r18, 0x95	; 149
    2544:	31 e0       	ldi	r19, 0x01	; 1
    2546:	fc 01       	movw	r30, r24
    2548:	31 83       	std	Z+1, r19	; 0x01
    254a:	20 83       	st	Z, r18
    254c:	87 8d       	ldd	r24, Z+31	; 0x1f
    254e:	90 a1       	ldd	r25, Z+32	; 0x20
    2550:	00 97       	sbiw	r24, 0x00	; 0
    2552:	11 f0       	breq	.+4      	; 0x2558 <Adafruit_SSD1306::~Adafruit_SSD1306()+0x16>
    2554:	0c 94 3b 1b 	jmp	0x3676	; 0x3676 <free>
    2558:	08 95       	ret

0000255a <Adafruit_SSD1306::ssd1306_command1(unsigned char)>:
_ZN16Adafruit_SSD130616ssd1306_command1Eh():
    255a:	1f 93       	push	r17
    255c:	cf 93       	push	r28
    255e:	df 93       	push	r29
    2560:	ec 01       	movw	r28, r24
    2562:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2564:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2566:	00 97       	sbiw	r24, 0x00	; 0
    2568:	11 f1       	breq	.+68     	; 0x25ae <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x54>
    256a:	16 2f       	mov	r17, r22
    256c:	69 a1       	ldd	r22, Y+33	; 0x21
    256e:	06 2e       	mov	r0, r22
    2570:	00 0c       	add	r0, r0
    2572:	77 0b       	sbc	r23, r23
    2574:	0e 94 02 09 	call	0x1204	; 0x1204 <TwoWire::beginTransmission(int)>
    2578:	8d 8d       	ldd	r24, Y+29	; 0x1d
    257a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    257c:	dc 01       	movw	r26, r24
    257e:	ed 91       	ld	r30, X+
    2580:	fc 91       	ld	r31, X
    2582:	01 90       	ld	r0, Z+
    2584:	f0 81       	ld	r31, Z
    2586:	e0 2d       	mov	r30, r0
    2588:	60 e0       	ldi	r22, 0x00	; 0
    258a:	09 95       	icall
    258c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    258e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2590:	dc 01       	movw	r26, r24
    2592:	ed 91       	ld	r30, X+
    2594:	fc 91       	ld	r31, X
    2596:	01 90       	ld	r0, Z+
    2598:	f0 81       	ld	r31, Z
    259a:	e0 2d       	mov	r30, r0
    259c:	61 2f       	mov	r22, r17
    259e:	09 95       	icall
    25a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25a4:	df 91       	pop	r29
    25a6:	cf 91       	pop	r28
    25a8:	1f 91       	pop	r17
    25aa:	0c 94 17 09 	jmp	0x122e	; 0x122e <TwoWire::endTransmission()>
    25ae:	ad a5       	ldd	r26, Y+45	; 0x2d
    25b0:	be a5       	ldd	r27, Y+46	; 0x2e
    25b2:	9c 91       	ld	r25, X
    25b4:	8b a9       	ldd	r24, Y+51	; 0x33
    25b6:	80 95       	com	r24
    25b8:	89 23       	and	r24, r25
    25ba:	8c 93       	st	X, r24
_ZN16Adafruit_SSD13068SPIwriteEh():
    25bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25c0:	89 2b       	or	r24, r25
    25c2:	31 f0       	breq	.+12     	; 0x25d0 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x76>
    25c4:	86 2f       	mov	r24, r22
_ZN16Adafruit_SSD130616ssd1306_command1Eh():
    25c6:	df 91       	pop	r29
    25c8:	cf 91       	pop	r28
    25ca:	1f 91       	pop	r17
_ZN16Adafruit_SSD13068SPIwriteEh():
    25cc:	0c 94 50 12 	jmp	0x24a0	; 0x24a0 <SPIClass::transfer(unsigned char)>
    25d0:	28 e0       	ldi	r18, 0x08	; 8
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	80 e8       	ldi	r24, 0x80	; 128
    25d6:	a9 a5       	ldd	r26, Y+41	; 0x29
    25d8:	ba a5       	ldd	r27, Y+42	; 0x2a
    25da:	99 a9       	ldd	r25, Y+49	; 0x31
    25dc:	46 2f       	mov	r20, r22
    25de:	48 23       	and	r20, r24
    25e0:	c1 f0       	breq	.+48     	; 0x2612 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0xb8>
    25e2:	4c 91       	ld	r20, X
    25e4:	94 2b       	or	r25, r20
    25e6:	9c 93       	st	X, r25
    25e8:	ab a5       	ldd	r26, Y+43	; 0x2b
    25ea:	bc a5       	ldd	r27, Y+44	; 0x2c
    25ec:	9c 91       	ld	r25, X
    25ee:	4a a9       	ldd	r20, Y+50	; 0x32
    25f0:	94 2b       	or	r25, r20
    25f2:	9c 93       	st	X, r25
    25f4:	ab a5       	ldd	r26, Y+43	; 0x2b
    25f6:	bc a5       	ldd	r27, Y+44	; 0x2c
    25f8:	4c 91       	ld	r20, X
    25fa:	9a a9       	ldd	r25, Y+50	; 0x32
    25fc:	90 95       	com	r25
    25fe:	94 23       	and	r25, r20
    2600:	9c 93       	st	X, r25
    2602:	86 95       	lsr	r24
    2604:	21 50       	subi	r18, 0x01	; 1
    2606:	31 09       	sbc	r19, r1
    2608:	31 f7       	brne	.-52     	; 0x25d6 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x7c>
_ZN16Adafruit_SSD130616ssd1306_command1Eh():
    260a:	df 91       	pop	r29
    260c:	cf 91       	pop	r28
    260e:	1f 91       	pop	r17
    2610:	08 95       	ret
_ZN16Adafruit_SSD13068SPIwriteEh():
    2612:	4c 91       	ld	r20, X
    2614:	90 95       	com	r25
    2616:	94 23       	and	r25, r20
    2618:	e6 cf       	rjmp	.-52     	; 0x25e6 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x8c>

0000261a <Adafruit_SSD1306::invertDisplay(bool)>:
_ZN16Adafruit_SSD130613invertDisplayEb():
    261a:	1f 93       	push	r17
    261c:	cf 93       	push	r28
    261e:	df 93       	push	r29
    2620:	ec 01       	movw	r28, r24
    2622:	16 2f       	mov	r17, r22
    2624:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2626:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2628:	00 97       	sbiw	r24, 0x00	; 0
    262a:	c9 f0       	breq	.+50     	; 0x265e <Adafruit_SSD1306::invertDisplay(bool)+0x44>
    262c:	4d a9       	ldd	r20, Y+53	; 0x35
    262e:	5e a9       	ldd	r21, Y+54	; 0x36
    2630:	6f a9       	ldd	r22, Y+55	; 0x37
    2632:	78 ad       	ldd	r23, Y+56	; 0x38
    2634:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <TwoWire::setClock(unsigned long)>
    2638:	66 ea       	ldi	r22, 0xA6	; 166
    263a:	11 11       	cpse	r17, r1
    263c:	67 ea       	ldi	r22, 0xA7	; 167
    263e:	ce 01       	movw	r24, r28
    2640:	0e 94 ad 12 	call	0x255a	; 0x255a <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
    2644:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2646:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2648:	00 97       	sbiw	r24, 0x00	; 0
    264a:	c9 f0       	breq	.+50     	; 0x267e <Adafruit_SSD1306::invertDisplay(bool)+0x64>
    264c:	49 ad       	ldd	r20, Y+57	; 0x39
    264e:	5a ad       	ldd	r21, Y+58	; 0x3a
    2650:	6b ad       	ldd	r22, Y+59	; 0x3b
    2652:	7c ad       	ldd	r23, Y+60	; 0x3c
    2654:	df 91       	pop	r29
    2656:	cf 91       	pop	r28
    2658:	1f 91       	pop	r17
    265a:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <TwoWire::setClock(unsigned long)>
    265e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2660:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2662:	89 2b       	or	r24, r25
    2664:	21 f0       	breq	.+8      	; 0x266e <Adafruit_SSD1306::invertDisplay(bool)+0x54>
    2666:	8e ad       	ldd	r24, Y+62	; 0x3e
    2668:	9f ad       	ldd	r25, Y+63	; 0x3f
    266a:	0e 94 36 12 	call	0x246c	; 0x246c <SPIClass::beginTransaction(SPISettings)>
    266e:	ef a5       	ldd	r30, Y+47	; 0x2f
    2670:	f8 a9       	ldd	r31, Y+48	; 0x30
    2672:	90 81       	ld	r25, Z
    2674:	8c a9       	ldd	r24, Y+52	; 0x34
    2676:	80 95       	com	r24
    2678:	89 23       	and	r24, r25
    267a:	80 83       	st	Z, r24
    267c:	dd cf       	rjmp	.-70     	; 0x2638 <Adafruit_SSD1306::invertDisplay(bool)+0x1e>
    267e:	ef a5       	ldd	r30, Y+47	; 0x2f
    2680:	f8 a9       	ldd	r31, Y+48	; 0x30
    2682:	80 81       	ld	r24, Z
    2684:	9c a9       	ldd	r25, Y+52	; 0x34
    2686:	89 2b       	or	r24, r25
    2688:	80 83       	st	Z, r24
    268a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    268c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    268e:	89 2b       	or	r24, r25
    2690:	29 f0       	breq	.+10     	; 0x269c <Adafruit_SSD1306::invertDisplay(bool)+0x82>
    2692:	df 91       	pop	r29
    2694:	cf 91       	pop	r28
    2696:	1f 91       	pop	r17
    2698:	0c 94 76 11 	jmp	0x22ec	; 0x22ec <SPIClass::endTransaction()>
    269c:	df 91       	pop	r29
    269e:	cf 91       	pop	r28
    26a0:	1f 91       	pop	r17
    26a2:	08 95       	ret

000026a4 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>:
_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh():
    26a4:	cf 92       	push	r12
    26a6:	df 92       	push	r13
    26a8:	ef 92       	push	r14
    26aa:	ff 92       	push	r15
    26ac:	1f 93       	push	r17
    26ae:	cf 93       	push	r28
    26b0:	df 93       	push	r29
    26b2:	ec 01       	movw	r28, r24
    26b4:	6b 01       	movw	r12, r22
    26b6:	14 2f       	mov	r17, r20
    26b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26bc:	00 97       	sbiw	r24, 0x00	; 0
    26be:	09 f4       	brne	.+2      	; 0x26c2 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x1e>
    26c0:	4f c0       	rjmp	.+158    	; 0x2760 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xbc>
    26c2:	69 a1       	ldd	r22, Y+33	; 0x21
    26c4:	06 2e       	mov	r0, r22
    26c6:	00 0c       	add	r0, r0
    26c8:	77 0b       	sbc	r23, r23
    26ca:	0e 94 02 09 	call	0x1204	; 0x1204 <TwoWire::beginTransmission(int)>
    26ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26d2:	dc 01       	movw	r26, r24
    26d4:	ed 91       	ld	r30, X+
    26d6:	fc 91       	ld	r31, X
    26d8:	01 90       	ld	r0, Z+
    26da:	f0 81       	ld	r31, Z
    26dc:	e0 2d       	mov	r30, r0
    26de:	60 e0       	ldi	r22, 0x00	; 0
    26e0:	09 95       	icall
    26e2:	76 01       	movw	r14, r12
    26e4:	cc 24       	eor	r12, r12
    26e6:	c3 94       	inc	r12
    26e8:	d1 2c       	mov	r13, r1
    26ea:	11 50       	subi	r17, 0x01	; 1
    26ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26f0:	1f 3f       	cpi	r17, 0xFF	; 255
    26f2:	69 f1       	breq	.+90     	; 0x274e <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xaa>
    26f4:	b0 e2       	ldi	r27, 0x20	; 32
    26f6:	cb 16       	cp	r12, r27
    26f8:	d1 04       	cpc	r13, r1
    26fa:	b8 f0       	brcs	.+46     	; 0x272a <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x86>
    26fc:	0e 94 17 09 	call	0x122e	; 0x122e <TwoWire::endTransmission()>
    2700:	69 a1       	ldd	r22, Y+33	; 0x21
    2702:	06 2e       	mov	r0, r22
    2704:	00 0c       	add	r0, r0
    2706:	77 0b       	sbc	r23, r23
    2708:	8d 8d       	ldd	r24, Y+29	; 0x1d
    270a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    270c:	0e 94 02 09 	call	0x1204	; 0x1204 <TwoWire::beginTransmission(int)>
    2710:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2712:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2714:	dc 01       	movw	r26, r24
    2716:	ed 91       	ld	r30, X+
    2718:	fc 91       	ld	r31, X
    271a:	01 90       	ld	r0, Z+
    271c:	f0 81       	ld	r31, Z
    271e:	e0 2d       	mov	r30, r0
    2720:	60 e0       	ldi	r22, 0x00	; 0
    2722:	09 95       	icall
    2724:	cc 24       	eor	r12, r12
    2726:	c3 94       	inc	r12
    2728:	d1 2c       	mov	r13, r1
    272a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    272c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    272e:	f7 01       	movw	r30, r14
    2730:	64 91       	lpm	r22, Z
    2732:	dc 01       	movw	r26, r24
    2734:	ed 91       	ld	r30, X+
    2736:	fc 91       	ld	r31, X
    2738:	01 90       	ld	r0, Z+
    273a:	f0 81       	ld	r31, Z
    273c:	e0 2d       	mov	r30, r0
    273e:	09 95       	icall
    2740:	bf ef       	ldi	r27, 0xFF	; 255
    2742:	cb 1a       	sub	r12, r27
    2744:	db 0a       	sbc	r13, r27
    2746:	ef ef       	ldi	r30, 0xFF	; 255
    2748:	ee 1a       	sub	r14, r30
    274a:	fe 0a       	sbc	r15, r30
    274c:	ce cf       	rjmp	.-100    	; 0x26ea <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x46>
    274e:	df 91       	pop	r29
    2750:	cf 91       	pop	r28
    2752:	1f 91       	pop	r17
    2754:	ff 90       	pop	r15
    2756:	ef 90       	pop	r14
    2758:	df 90       	pop	r13
    275a:	cf 90       	pop	r12
    275c:	0c 94 17 09 	jmp	0x122e	; 0x122e <TwoWire::endTransmission()>
    2760:	ed a5       	ldd	r30, Y+45	; 0x2d
    2762:	fe a5       	ldd	r31, Y+46	; 0x2e
    2764:	90 81       	ld	r25, Z
    2766:	8b a9       	ldd	r24, Y+51	; 0x33
    2768:	80 95       	com	r24
    276a:	89 23       	and	r24, r25
    276c:	80 83       	st	Z, r24
    276e:	7b 01       	movw	r14, r22
    2770:	11 50       	subi	r17, 0x01	; 1
    2772:	70 f1       	brcs	.+92     	; 0x27d0 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x12c>
    2774:	f7 01       	movw	r30, r14
    2776:	84 91       	lpm	r24, Z
_ZN16Adafruit_SSD13068SPIwriteEh():
    2778:	2b 8d       	ldd	r18, Y+27	; 0x1b
    277a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    277c:	23 2b       	or	r18, r19
    277e:	31 f0       	breq	.+12     	; 0x278c <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xe8>
    2780:	0e 94 50 12 	call	0x24a0	; 0x24a0 <SPIClass::transfer(unsigned char)>
    2784:	ff ef       	ldi	r31, 0xFF	; 255
    2786:	ef 1a       	sub	r14, r31
    2788:	ff 0a       	sbc	r15, r31
    278a:	f2 cf       	rjmp	.-28     	; 0x2770 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xcc>
    278c:	28 e0       	ldi	r18, 0x08	; 8
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e8       	ldi	r20, 0x80	; 128
    2792:	e9 a5       	ldd	r30, Y+41	; 0x29
    2794:	fa a5       	ldd	r31, Y+42	; 0x2a
    2796:	99 a9       	ldd	r25, Y+49	; 0x31
    2798:	58 2f       	mov	r21, r24
    279a:	54 23       	and	r21, r20
    279c:	a9 f0       	breq	.+42     	; 0x27c8 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x124>
    279e:	50 81       	ld	r21, Z
    27a0:	95 2b       	or	r25, r21
    27a2:	90 83       	st	Z, r25
    27a4:	eb a5       	ldd	r30, Y+43	; 0x2b
    27a6:	fc a5       	ldd	r31, Y+44	; 0x2c
    27a8:	90 81       	ld	r25, Z
    27aa:	5a a9       	ldd	r21, Y+50	; 0x32
    27ac:	95 2b       	or	r25, r21
    27ae:	90 83       	st	Z, r25
    27b0:	eb a5       	ldd	r30, Y+43	; 0x2b
    27b2:	fc a5       	ldd	r31, Y+44	; 0x2c
    27b4:	50 81       	ld	r21, Z
    27b6:	9a a9       	ldd	r25, Y+50	; 0x32
    27b8:	90 95       	com	r25
    27ba:	95 23       	and	r25, r21
    27bc:	90 83       	st	Z, r25
    27be:	46 95       	lsr	r20
    27c0:	21 50       	subi	r18, 0x01	; 1
    27c2:	31 09       	sbc	r19, r1
    27c4:	31 f7       	brne	.-52     	; 0x2792 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xee>
    27c6:	de cf       	rjmp	.-68     	; 0x2784 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xe0>
    27c8:	50 81       	ld	r21, Z
    27ca:	90 95       	com	r25
    27cc:	95 23       	and	r25, r21
    27ce:	e9 cf       	rjmp	.-46     	; 0x27a2 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xfe>
_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh():
    27d0:	df 91       	pop	r29
    27d2:	cf 91       	pop	r28
    27d4:	1f 91       	pop	r17
    27d6:	ff 90       	pop	r15
    27d8:	ef 90       	pop	r14
    27da:	df 90       	pop	r13
    27dc:	cf 90       	pop	r12
    27de:	08 95       	ret

000027e0 <Adafruit_SSD1306::clearDisplay()>:
_ZN16Adafruit_SSD130612clearDisplayEv():
    27e0:	fc 01       	movw	r30, r24
    27e2:	86 81       	ldd	r24, Z+6	; 0x06
    27e4:	97 81       	ldd	r25, Z+7	; 0x07
    27e6:	9c 01       	movw	r18, r24
    27e8:	29 5f       	subi	r18, 0xF9	; 249
    27ea:	3f 4f       	sbci	r19, 0xFF	; 255
    27ec:	37 ff       	sbrs	r19, 7
    27ee:	02 c0       	rjmp	.+4      	; 0x27f4 <Adafruit_SSD1306::clearDisplay()+0x14>
    27f0:	29 5f       	subi	r18, 0xF9	; 249
    27f2:	3f 4f       	sbci	r19, 0xFF	; 255
    27f4:	83 e0       	ldi	r24, 0x03	; 3
    27f6:	35 95       	asr	r19
    27f8:	27 95       	ror	r18
    27fa:	8a 95       	dec	r24
    27fc:	e1 f7       	brne	.-8      	; 0x27f6 <Adafruit_SSD1306::clearDisplay()+0x16>
    27fe:	84 81       	ldd	r24, Z+4	; 0x04
    2800:	95 81       	ldd	r25, Z+5	; 0x05
    2802:	28 9f       	mul	r18, r24
    2804:	a0 01       	movw	r20, r0
    2806:	29 9f       	mul	r18, r25
    2808:	50 0d       	add	r21, r0
    280a:	38 9f       	mul	r19, r24
    280c:	50 0d       	add	r21, r0
    280e:	11 24       	eor	r1, r1
    2810:	70 e0       	ldi	r23, 0x00	; 0
    2812:	60 e0       	ldi	r22, 0x00	; 0
    2814:	87 8d       	ldd	r24, Z+31	; 0x1f
    2816:	90 a1       	ldd	r25, Z+32	; 0x20
    2818:	0c 94 c9 1b 	jmp	0x3792	; 0x3792 <memset>

0000281c <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)>:
_ZN16Adafruit_SSD13065beginEhhbb():
    281c:	8f 92       	push	r8
    281e:	9f 92       	push	r9
    2820:	af 92       	push	r10
    2822:	bf 92       	push	r11
    2824:	cf 92       	push	r12
    2826:	df 92       	push	r13
    2828:	ef 92       	push	r14
    282a:	ff 92       	push	r15
    282c:	0f 93       	push	r16
    282e:	1f 93       	push	r17
    2830:	cf 93       	push	r28
    2832:	df 93       	push	r29
    2834:	ec 01       	movw	r28, r24
    2836:	86 2e       	mov	r8, r22
    2838:	b4 2e       	mov	r11, r20
    283a:	a2 2e       	mov	r10, r18
    283c:	90 2e       	mov	r9, r16
    283e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2840:	98 a1       	ldd	r25, Y+32	; 0x20
    2842:	89 2b       	or	r24, r25
    2844:	39 f1       	breq	.+78     	; 0x2894 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x78>
    2846:	ce 01       	movw	r24, r28
    2848:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <Adafruit_SSD1306::clearDisplay()>
    284c:	8e 81       	ldd	r24, Y+6	; 0x06
    284e:	9f 81       	ldd	r25, Y+7	; 0x07
    2850:	6c 81       	ldd	r22, Y+4	; 0x04
    2852:	7d 81       	ldd	r23, Y+5	; 0x05
    2854:	81 32       	cpi	r24, 0x21	; 33
    2856:	91 05       	cpc	r25, r1
    2858:	0c f0       	brlt	.+2      	; 0x285c <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x40>
    285a:	46 c0       	rjmp	.+140    	; 0x28e8 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xcc>
    285c:	ac 01       	movw	r20, r24
    285e:	40 52       	subi	r20, 0x20	; 32
    2860:	51 09       	sbc	r21, r1
    2862:	57 ff       	sbrs	r21, 7
    2864:	02 c0       	rjmp	.+4      	; 0x286a <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x4e>
    2866:	4f 5f       	subi	r20, 0xFF	; 255
    2868:	5f 4f       	sbci	r21, 0xFF	; 255
    286a:	55 95       	asr	r21
    286c:	47 95       	ror	r20
    286e:	63 57       	subi	r22, 0x73	; 115
    2870:	71 09       	sbc	r23, r1
    2872:	77 ff       	sbrs	r23, 7
    2874:	02 c0       	rjmp	.+4      	; 0x287a <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x5e>
    2876:	6f 5f       	subi	r22, 0xFF	; 255
    2878:	7f 4f       	sbci	r23, 0xFF	; 255
    287a:	75 95       	asr	r23
    287c:	67 95       	ror	r22
    287e:	cc 24       	eor	r12, r12
    2880:	c3 94       	inc	r12
    2882:	d1 2c       	mov	r13, r1
    2884:	a0 e2       	ldi	r26, 0x20	; 32
    2886:	ea 2e       	mov	r14, r26
    2888:	f1 2c       	mov	r15, r1
    288a:	03 e7       	ldi	r16, 0x73	; 115
    288c:	10 e0       	ldi	r17, 0x00	; 0
    288e:	23 eb       	ldi	r18, 0xB3	; 179
    2890:	35 e0       	ldi	r19, 0x05	; 5
    2892:	45 c0       	rjmp	.+138    	; 0x291e <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x102>
    2894:	2e 81       	ldd	r18, Y+6	; 0x06
    2896:	3f 81       	ldd	r19, Y+7	; 0x07
    2898:	c9 01       	movw	r24, r18
    289a:	07 96       	adiw	r24, 0x07	; 7
    289c:	97 fd       	sbrc	r25, 7
    289e:	07 96       	adiw	r24, 0x07	; 7
    28a0:	23 e0       	ldi	r18, 0x03	; 3
    28a2:	95 95       	asr	r25
    28a4:	87 95       	ror	r24
    28a6:	2a 95       	dec	r18
    28a8:	e1 f7       	brne	.-8      	; 0x28a2 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x86>
    28aa:	2c 81       	ldd	r18, Y+4	; 0x04
    28ac:	3d 81       	ldd	r19, Y+5	; 0x05
    28ae:	ac 01       	movw	r20, r24
    28b0:	42 9f       	mul	r20, r18
    28b2:	c0 01       	movw	r24, r0
    28b4:	43 9f       	mul	r20, r19
    28b6:	90 0d       	add	r25, r0
    28b8:	52 9f       	mul	r21, r18
    28ba:	90 0d       	add	r25, r0
    28bc:	11 24       	eor	r1, r1
    28be:	0e 94 9f 1a 	call	0x353e	; 0x353e <malloc>
    28c2:	98 a3       	std	Y+32, r25	; 0x20
    28c4:	8f 8f       	std	Y+31, r24	; 0x1f
    28c6:	89 2b       	or	r24, r25
    28c8:	09 f0       	breq	.+2      	; 0x28cc <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xb0>
    28ca:	bd cf       	rjmp	.-134    	; 0x2846 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2a>
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	df 91       	pop	r29
    28d0:	cf 91       	pop	r28
    28d2:	1f 91       	pop	r17
    28d4:	0f 91       	pop	r16
    28d6:	ff 90       	pop	r15
    28d8:	ef 90       	pop	r14
    28da:	df 90       	pop	r13
    28dc:	cf 90       	pop	r12
    28de:	bf 90       	pop	r11
    28e0:	af 90       	pop	r10
    28e2:	9f 90       	pop	r9
    28e4:	8f 90       	pop	r8
    28e6:	08 95       	ret
    28e8:	ac 01       	movw	r20, r24
    28ea:	40 54       	subi	r20, 0x40	; 64
    28ec:	51 09       	sbc	r21, r1
    28ee:	57 ff       	sbrs	r21, 7
    28f0:	02 c0       	rjmp	.+4      	; 0x28f6 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xda>
    28f2:	4f 5f       	subi	r20, 0xFF	; 255
    28f4:	5f 4f       	sbci	r21, 0xFF	; 255
    28f6:	55 95       	asr	r21
    28f8:	47 95       	ror	r20
    28fa:	62 55       	subi	r22, 0x52	; 82
    28fc:	71 09       	sbc	r23, r1
    28fe:	77 ff       	sbrs	r23, 7
    2900:	02 c0       	rjmp	.+4      	; 0x2906 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xea>
    2902:	6f 5f       	subi	r22, 0xFF	; 255
    2904:	7f 4f       	sbci	r23, 0xFF	; 255
    2906:	75 95       	asr	r23
    2908:	67 95       	ror	r22
    290a:	cc 24       	eor	r12, r12
    290c:	c3 94       	inc	r12
    290e:	d1 2c       	mov	r13, r1
    2910:	80 e4       	ldi	r24, 0x40	; 64
    2912:	e8 2e       	mov	r14, r24
    2914:	f1 2c       	mov	r15, r1
    2916:	02 e5       	ldi	r16, 0x52	; 82
    2918:	10 e0       	ldi	r17, 0x00	; 0
    291a:	23 e9       	ldi	r18, 0x93	; 147
    291c:	37 e0       	ldi	r19, 0x07	; 7
    291e:	ce 01       	movw	r24, r28
    2920:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int)>
    2924:	8a a2       	std	Y+34, r8	; 0x22
    2926:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2928:	3e 8d       	ldd	r19, Y+30	; 0x1e
    292a:	21 15       	cp	r18, r1
    292c:	31 05       	cpc	r19, r1
    292e:	09 f4       	brne	.+2      	; 0x2932 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x116>
    2930:	a2 c0       	rjmp	.+324    	; 0x2a76 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x25a>
    2932:	9b 2d       	mov	r25, r11
    2934:	b1 10       	cpse	r11, r1
    2936:	06 c0       	rjmp	.+12     	; 0x2944 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x128>
    2938:	8e 81       	ldd	r24, Y+6	; 0x06
    293a:	9f 81       	ldd	r25, Y+7	; 0x07
    293c:	80 97       	sbiw	r24, 0x20	; 32
    293e:	09 f0       	breq	.+2      	; 0x2942 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x126>
    2940:	98 c0       	rjmp	.+304    	; 0x2a72 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x256>
    2942:	9c e3       	ldi	r25, 0x3C	; 60
    2944:	99 a3       	std	Y+33, r25	; 0x21
    2946:	99 20       	and	r9, r9
    2948:	09 f4       	brne	.+2      	; 0x294c <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x130>
    294a:	3f c1       	rjmp	.+638    	; 0x2bca <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x3ae>
    294c:	c9 01       	movw	r24, r18
    294e:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <TwoWire::begin()>
    2952:	aa 20       	and	r10, r10
    2954:	f1 f0       	breq	.+60     	; 0x2992 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x176>
    2956:	88 a5       	ldd	r24, Y+40	; 0x28
    2958:	87 fd       	sbrc	r24, 7
    295a:	1b c0       	rjmp	.+54     	; 0x2992 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x176>
    295c:	61 e0       	ldi	r22, 0x01	; 1
    295e:	0e 94 8a 19 	call	0x3314	; 0x3314 <pinMode>
    2962:	61 e0       	ldi	r22, 0x01	; 1
    2964:	88 a5       	ldd	r24, Y+40	; 0x28
    2966:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
    296a:	61 e0       	ldi	r22, 0x01	; 1
    296c:	70 e0       	ldi	r23, 0x00	; 0
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <delay>
    2976:	60 e0       	ldi	r22, 0x00	; 0
    2978:	88 a5       	ldd	r24, Y+40	; 0x28
    297a:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
    297e:	6a e0       	ldi	r22, 0x0A	; 10
    2980:	70 e0       	ldi	r23, 0x00	; 0
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <delay>
    298a:	61 e0       	ldi	r22, 0x01	; 1
    298c:	88 a5       	ldd	r24, Y+40	; 0x28
    298e:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
    2992:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2994:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2996:	21 15       	cp	r18, r1
    2998:	31 05       	cpc	r19, r1
    299a:	09 f4       	brne	.+2      	; 0x299e <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x182>
    299c:	e6 c0       	rjmp	.+460    	; 0x2b6a <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x34e>
    299e:	4d a9       	ldd	r20, Y+53	; 0x35
    29a0:	5e a9       	ldd	r21, Y+54	; 0x36
    29a2:	6f a9       	ldd	r22, Y+55	; 0x37
    29a4:	78 ad       	ldd	r23, Y+56	; 0x38
    29a6:	c9 01       	movw	r24, r18
    29a8:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <TwoWire::setClock(unsigned long)>
    29ac:	44 e0       	ldi	r20, 0x04	; 4
    29ae:	6f ea       	ldi	r22, 0xAF	; 175
    29b0:	75 e0       	ldi	r23, 0x05	; 5
    29b2:	ce 01       	movw	r24, r28
    29b4:	0e 94 52 13 	call	0x26a4	; 0x26a4 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
    29b8:	6e 81       	ldd	r22, Y+6	; 0x06
    29ba:	61 50       	subi	r22, 0x01	; 1
    29bc:	ce 01       	movw	r24, r28
    29be:	0e 94 ad 12 	call	0x255a	; 0x255a <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
    29c2:	44 e0       	ldi	r20, 0x04	; 4
    29c4:	6b ea       	ldi	r22, 0xAB	; 171
    29c6:	75 e0       	ldi	r23, 0x05	; 5
    29c8:	ce 01       	movw	r24, r28
    29ca:	0e 94 52 13 	call	0x26a4	; 0x26a4 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
    29ce:	8a a1       	ldd	r24, Y+34	; 0x22
    29d0:	60 e1       	ldi	r22, 0x10	; 16
    29d2:	81 30       	cpi	r24, 0x01	; 1
    29d4:	09 f0       	breq	.+2      	; 0x29d8 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x1bc>
    29d6:	64 e1       	ldi	r22, 0x14	; 20
    29d8:	ce 01       	movw	r24, r28
    29da:	0e 94 ad 12 	call	0x255a	; 0x255a <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
    29de:	44 e0       	ldi	r20, 0x04	; 4
    29e0:	67 ea       	ldi	r22, 0xA7	; 167
    29e2:	75 e0       	ldi	r23, 0x05	; 5
    29e4:	ce 01       	movw	r24, r28
    29e6:	0e 94 52 13 	call	0x26a4	; 0x26a4 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
    29ea:	8f e8       	ldi	r24, 0x8F	; 143
    29ec:	8d af       	std	Y+61, r24	; 0x3d
    29ee:	8c 81       	ldd	r24, Y+4	; 0x04
    29f0:	9d 81       	ldd	r25, Y+5	; 0x05
    29f2:	80 38       	cpi	r24, 0x80	; 128
    29f4:	91 05       	cpc	r25, r1
    29f6:	09 f0       	breq	.+2      	; 0x29fa <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x1de>
    29f8:	ca c0       	rjmp	.+404    	; 0x2b8e <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x372>
    29fa:	8e 81       	ldd	r24, Y+6	; 0x06
    29fc:	9f 81       	ldd	r25, Y+7	; 0x07
    29fe:	80 34       	cpi	r24, 0x40	; 64
    2a00:	91 05       	cpc	r25, r1
    2a02:	09 f0       	breq	.+2      	; 0x2a06 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x1ea>
    2a04:	d0 c0       	rjmp	.+416    	; 0x2ba6 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x38a>
    2a06:	8a a1       	ldd	r24, Y+34	; 0x22
    2a08:	81 30       	cpi	r24, 0x01	; 1
    2a0a:	09 f0       	breq	.+2      	; 0x2a0e <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x1f2>
    2a0c:	be c0       	rjmp	.+380    	; 0x2b8a <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x36e>
    2a0e:	8f e9       	ldi	r24, 0x9F	; 159
    2a10:	8d af       	std	Y+61, r24	; 0x3d
    2a12:	12 e1       	ldi	r17, 0x12	; 18
    2a14:	6a ed       	ldi	r22, 0xDA	; 218
    2a16:	ce 01       	movw	r24, r28
    2a18:	0e 94 ad 12 	call	0x255a	; 0x255a <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
    2a1c:	61 2f       	mov	r22, r17
    2a1e:	ce 01       	movw	r24, r28
    2a20:	0e 94 ad 12 	call	0x255a	; 0x255a <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
    2a24:	61 e8       	ldi	r22, 0x81	; 129
    2a26:	ce 01       	movw	r24, r28
    2a28:	0e 94 ad 12 	call	0x255a	; 0x255a <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
    2a2c:	6d ad       	ldd	r22, Y+61	; 0x3d
    2a2e:	ce 01       	movw	r24, r28
    2a30:	0e 94 ad 12 	call	0x255a	; 0x255a <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
    2a34:	69 ed       	ldi	r22, 0xD9	; 217
    2a36:	ce 01       	movw	r24, r28
    2a38:	0e 94 ad 12 	call	0x255a	; 0x255a <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
    2a3c:	8a a1       	ldd	r24, Y+34	; 0x22
    2a3e:	62 e2       	ldi	r22, 0x22	; 34
    2a40:	81 30       	cpi	r24, 0x01	; 1
    2a42:	09 f0       	breq	.+2      	; 0x2a46 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x22a>
    2a44:	61 ef       	ldi	r22, 0xF1	; 241
    2a46:	ce 01       	movw	r24, r28
    2a48:	0e 94 ad 12 	call	0x255a	; 0x255a <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
    2a4c:	46 e0       	ldi	r20, 0x06	; 6
    2a4e:	61 ea       	ldi	r22, 0xA1	; 161
    2a50:	75 e0       	ldi	r23, 0x05	; 5
    2a52:	ce 01       	movw	r24, r28
    2a54:	0e 94 52 13 	call	0x26a4	; 0x26a4 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
    2a58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a5c:	00 97       	sbiw	r24, 0x00	; 0
    2a5e:	09 f4       	brne	.+2      	; 0x2a62 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x246>
    2a60:	a6 c0       	rjmp	.+332    	; 0x2bae <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x392>
    2a62:	49 ad       	ldd	r20, Y+57	; 0x39
    2a64:	5a ad       	ldd	r21, Y+58	; 0x3a
    2a66:	6b ad       	ldd	r22, Y+59	; 0x3b
    2a68:	7c ad       	ldd	r23, Y+60	; 0x3c
    2a6a:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <TwoWire::setClock(unsigned long)>
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	2e cf       	rjmp	.-420    	; 0x28ce <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xb2>
    2a72:	9d e3       	ldi	r25, 0x3D	; 61
    2a74:	67 cf       	rjmp	.-306    	; 0x2944 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x128>
    2a76:	61 e0       	ldi	r22, 0x01	; 1
    2a78:	8e a1       	ldd	r24, Y+38	; 0x26
    2a7a:	0e 94 8a 19 	call	0x3314	; 0x3314 <pinMode>
    2a7e:	61 e0       	ldi	r22, 0x01	; 1
    2a80:	8f a1       	ldd	r24, Y+39	; 0x27
    2a82:	0e 94 8a 19 	call	0x3314	; 0x3314 <pinMode>
    2a86:	8e a1       	ldd	r24, Y+38	; 0x26
    2a88:	08 2e       	mov	r0, r24
    2a8a:	00 0c       	add	r0, r0
    2a8c:	99 0b       	sbc	r25, r25
    2a8e:	fc 01       	movw	r30, r24
    2a90:	e3 54       	subi	r30, 0x43	; 67
    2a92:	f5 4f       	sbci	r31, 0xF5	; 245
    2a94:	e4 91       	lpm	r30, Z
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	ee 0f       	add	r30, r30
    2a9a:	ff 1f       	adc	r31, r31
    2a9c:	ee 5f       	subi	r30, 0xFE	; 254
    2a9e:	f4 4f       	sbci	r31, 0xF4	; 244
    2aa0:	25 91       	lpm	r18, Z+
    2aa2:	34 91       	lpm	r19, Z
    2aa4:	3e a7       	std	Y+46, r19	; 0x2e
    2aa6:	2d a7       	std	Y+45, r18	; 0x2d
    2aa8:	fc 01       	movw	r30, r24
    2aaa:	e8 57       	subi	r30, 0x78	; 120
    2aac:	f5 4f       	sbci	r31, 0xF5	; 245
    2aae:	e4 91       	lpm	r30, Z
    2ab0:	eb ab       	std	Y+51, r30	; 0x33
    2ab2:	8f a1       	ldd	r24, Y+39	; 0x27
    2ab4:	08 2e       	mov	r0, r24
    2ab6:	00 0c       	add	r0, r0
    2ab8:	99 0b       	sbc	r25, r25
    2aba:	fc 01       	movw	r30, r24
    2abc:	e3 54       	subi	r30, 0x43	; 67
    2abe:	f5 4f       	sbci	r31, 0xF5	; 245
    2ac0:	e4 91       	lpm	r30, Z
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	ee 0f       	add	r30, r30
    2ac6:	ff 1f       	adc	r31, r31
    2ac8:	ee 5f       	subi	r30, 0xFE	; 254
    2aca:	f4 4f       	sbci	r31, 0xF4	; 244
    2acc:	a5 91       	lpm	r26, Z+
    2ace:	b4 91       	lpm	r27, Z
    2ad0:	b8 ab       	std	Y+48, r27	; 0x30
    2ad2:	af a7       	std	Y+47, r26	; 0x2f
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	e8 57       	subi	r30, 0x78	; 120
    2ad8:	f5 4f       	sbci	r31, 0xF5	; 245
    2ada:	e4 91       	lpm	r30, Z
    2adc:	ec ab       	std	Y+52, r30	; 0x34
    2ade:	8c 91       	ld	r24, X
    2ae0:	e8 2b       	or	r30, r24
    2ae2:	ec 93       	st	X, r30
    2ae4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ae6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ae8:	89 2b       	or	r24, r25
    2aea:	31 f0       	breq	.+12     	; 0x2af8 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2dc>
    2aec:	99 20       	and	r9, r9
    2aee:	09 f4       	brne	.+2      	; 0x2af2 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2d6>
    2af0:	30 cf       	rjmp	.-416    	; 0x2952 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x136>
    2af2:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <SPIClass::begin()>
    2af6:	2d cf       	rjmp	.-422    	; 0x2952 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x136>
    2af8:	61 e0       	ldi	r22, 0x01	; 1
    2afa:	8c a1       	ldd	r24, Y+36	; 0x24
    2afc:	0e 94 8a 19 	call	0x3314	; 0x3314 <pinMode>
    2b00:	61 e0       	ldi	r22, 0x01	; 1
    2b02:	8d a1       	ldd	r24, Y+37	; 0x25
    2b04:	0e 94 8a 19 	call	0x3314	; 0x3314 <pinMode>
    2b08:	8c a1       	ldd	r24, Y+36	; 0x24
    2b0a:	08 2e       	mov	r0, r24
    2b0c:	00 0c       	add	r0, r0
    2b0e:	99 0b       	sbc	r25, r25
    2b10:	fc 01       	movw	r30, r24
    2b12:	e3 54       	subi	r30, 0x43	; 67
    2b14:	f5 4f       	sbci	r31, 0xF5	; 245
    2b16:	e4 91       	lpm	r30, Z
    2b18:	f0 e0       	ldi	r31, 0x00	; 0
    2b1a:	ee 0f       	add	r30, r30
    2b1c:	ff 1f       	adc	r31, r31
    2b1e:	ee 5f       	subi	r30, 0xFE	; 254
    2b20:	f4 4f       	sbci	r31, 0xF4	; 244
    2b22:	25 91       	lpm	r18, Z+
    2b24:	34 91       	lpm	r19, Z
    2b26:	3a a7       	std	Y+42, r19	; 0x2a
    2b28:	29 a7       	std	Y+41, r18	; 0x29
    2b2a:	fc 01       	movw	r30, r24
    2b2c:	e8 57       	subi	r30, 0x78	; 120
    2b2e:	f5 4f       	sbci	r31, 0xF5	; 245
    2b30:	e4 91       	lpm	r30, Z
    2b32:	e9 ab       	std	Y+49, r30	; 0x31
    2b34:	8d a1       	ldd	r24, Y+37	; 0x25
    2b36:	08 2e       	mov	r0, r24
    2b38:	00 0c       	add	r0, r0
    2b3a:	99 0b       	sbc	r25, r25
    2b3c:	fc 01       	movw	r30, r24
    2b3e:	e3 54       	subi	r30, 0x43	; 67
    2b40:	f5 4f       	sbci	r31, 0xF5	; 245
    2b42:	e4 91       	lpm	r30, Z
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	ee 0f       	add	r30, r30
    2b48:	ff 1f       	adc	r31, r31
    2b4a:	ee 5f       	subi	r30, 0xFE	; 254
    2b4c:	f4 4f       	sbci	r31, 0xF4	; 244
    2b4e:	a5 91       	lpm	r26, Z+
    2b50:	b4 91       	lpm	r27, Z
    2b52:	bc a7       	std	Y+44, r27	; 0x2c
    2b54:	ab a7       	std	Y+43, r26	; 0x2b
    2b56:	fc 01       	movw	r30, r24
    2b58:	e8 57       	subi	r30, 0x78	; 120
    2b5a:	f5 4f       	sbci	r31, 0xF5	; 245
    2b5c:	e4 91       	lpm	r30, Z
    2b5e:	ea ab       	std	Y+50, r30	; 0x32
    2b60:	8c 91       	ld	r24, X
    2b62:	e0 95       	com	r30
    2b64:	e8 23       	and	r30, r24
    2b66:	ec 93       	st	X, r30
    2b68:	f4 ce       	rjmp	.-536    	; 0x2952 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x136>
    2b6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b6e:	89 2b       	or	r24, r25
    2b70:	21 f0       	breq	.+8      	; 0x2b7a <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x35e>
    2b72:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b74:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b76:	0e 94 36 12 	call	0x246c	; 0x246c <SPIClass::beginTransaction(SPISettings)>
    2b7a:	ef a5       	ldd	r30, Y+47	; 0x2f
    2b7c:	f8 a9       	ldd	r31, Y+48	; 0x30
    2b7e:	90 81       	ld	r25, Z
    2b80:	8c a9       	ldd	r24, Y+52	; 0x34
    2b82:	80 95       	com	r24
    2b84:	89 23       	and	r24, r25
    2b86:	80 83       	st	Z, r24
    2b88:	11 cf       	rjmp	.-478    	; 0x29ac <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x190>
    2b8a:	8f ec       	ldi	r24, 0xCF	; 207
    2b8c:	41 cf       	rjmp	.-382    	; 0x2a10 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x1f4>
    2b8e:	80 36       	cpi	r24, 0x60	; 96
    2b90:	91 05       	cpc	r25, r1
    2b92:	49 f4       	brne	.+18     	; 0x2ba6 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x38a>
    2b94:	8e 81       	ldd	r24, Y+6	; 0x06
    2b96:	9f 81       	ldd	r25, Y+7	; 0x07
    2b98:	40 97       	sbiw	r24, 0x10	; 16
    2b9a:	29 f4       	brne	.+10     	; 0x2ba6 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x38a>
    2b9c:	8a a1       	ldd	r24, Y+34	; 0x22
    2b9e:	81 30       	cpi	r24, 0x01	; 1
    2ba0:	21 f4       	brne	.+8      	; 0x2baa <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x38e>
    2ba2:	80 e1       	ldi	r24, 0x10	; 16
    2ba4:	8d af       	std	Y+61, r24	; 0x3d
    2ba6:	12 e0       	ldi	r17, 0x02	; 2
    2ba8:	35 cf       	rjmp	.-406    	; 0x2a14 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x1f8>
    2baa:	8f ea       	ldi	r24, 0xAF	; 175
    2bac:	fb cf       	rjmp	.-10     	; 0x2ba4 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x388>
    2bae:	ef a5       	ldd	r30, Y+47	; 0x2f
    2bb0:	f8 a9       	ldd	r31, Y+48	; 0x30
    2bb2:	80 81       	ld	r24, Z
    2bb4:	9c a9       	ldd	r25, Y+52	; 0x34
    2bb6:	89 2b       	or	r24, r25
    2bb8:	80 83       	st	Z, r24
    2bba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bbe:	89 2b       	or	r24, r25
    2bc0:	09 f4       	brne	.+2      	; 0x2bc4 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x3a8>
    2bc2:	55 cf       	rjmp	.-342    	; 0x2a6e <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x252>
    2bc4:	0e 94 76 11 	call	0x22ec	; 0x22ec <SPIClass::endTransaction()>
    2bc8:	52 cf       	rjmp	.-348    	; 0x2a6e <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x252>
    2bca:	a1 10       	cpse	r10, r1
    2bcc:	c4 ce       	rjmp	.-632    	; 0x2956 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x13a>
    2bce:	e7 ce       	rjmp	.-562    	; 0x299e <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x182>

00002bd0 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)>:
_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij():
    2bd0:	0f 93       	push	r16
    2bd2:	1f 93       	push	r17
    2bd4:	cf 93       	push	r28
    2bd6:	df 93       	push	r29
    2bd8:	dc 01       	movw	r26, r24
    2bda:	57 fd       	sbrc	r21, 7
    2bdc:	46 c0       	rjmp	.+140    	; 0x2c6a <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0x9a>
    2bde:	16 96       	adiw	r26, 0x06	; 6
    2be0:	8d 91       	ld	r24, X+
    2be2:	9c 91       	ld	r25, X
    2be4:	17 97       	sbiw	r26, 0x07	; 7
    2be6:	48 17       	cp	r20, r24
    2be8:	59 07       	cpc	r21, r25
    2bea:	0c f0       	brlt	.+2      	; 0x2bee <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0x1e>
    2bec:	3e c0       	rjmp	.+124    	; 0x2c6a <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0x9a>
    2bee:	77 ff       	sbrs	r23, 7
    2bf0:	04 c0       	rjmp	.+8      	; 0x2bfa <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0x2a>
    2bf2:	26 0f       	add	r18, r22
    2bf4:	37 1f       	adc	r19, r23
    2bf6:	70 e0       	ldi	r23, 0x00	; 0
    2bf8:	60 e0       	ldi	r22, 0x00	; 0
    2bfa:	14 96       	adiw	r26, 0x04	; 4
    2bfc:	cd 91       	ld	r28, X+
    2bfe:	dc 91       	ld	r29, X
    2c00:	15 97       	sbiw	r26, 0x05	; 5
    2c02:	cb 01       	movw	r24, r22
    2c04:	82 0f       	add	r24, r18
    2c06:	93 1f       	adc	r25, r19
    2c08:	c8 17       	cp	r28, r24
    2c0a:	d9 07       	cpc	r29, r25
    2c0c:	1c f4       	brge	.+6      	; 0x2c14 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0x44>
    2c0e:	9e 01       	movw	r18, r28
    2c10:	26 1b       	sub	r18, r22
    2c12:	37 0b       	sbc	r19, r23
    2c14:	12 16       	cp	r1, r18
    2c16:	13 06       	cpc	r1, r19
    2c18:	44 f5       	brge	.+80     	; 0x2c6a <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0x9a>
    2c1a:	fa 01       	movw	r30, r20
    2c1c:	57 fd       	sbrc	r21, 7
    2c1e:	37 96       	adiw	r30, 0x07	; 7
    2c20:	83 e0       	ldi	r24, 0x03	; 3
    2c22:	f5 95       	asr	r31
    2c24:	e7 95       	ror	r30
    2c26:	8a 95       	dec	r24
    2c28:	e1 f7       	brne	.-8      	; 0x2c22 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0x52>
    2c2a:	ec 9f       	mul	r30, r28
    2c2c:	c0 01       	movw	r24, r0
    2c2e:	ed 9f       	mul	r30, r29
    2c30:	90 0d       	add	r25, r0
    2c32:	fc 9f       	mul	r31, r28
    2c34:	90 0d       	add	r25, r0
    2c36:	11 24       	eor	r1, r1
    2c38:	68 0f       	add	r22, r24
    2c3a:	79 1f       	adc	r23, r25
    2c3c:	5f 96       	adiw	r26, 0x1f	; 31
    2c3e:	ed 91       	ld	r30, X+
    2c40:	fc 91       	ld	r31, X
    2c42:	e6 0f       	add	r30, r22
    2c44:	f7 1f       	adc	r31, r23
    2c46:	47 70       	andi	r20, 0x07	; 7
    2c48:	55 27       	eor	r21, r21
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	01 c0       	rjmp	.+2      	; 0x2c52 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0x82>
    2c50:	88 0f       	add	r24, r24
    2c52:	4a 95       	dec	r20
    2c54:	ea f7       	brpl	.-6      	; 0x2c50 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0x80>
    2c56:	48 2f       	mov	r20, r24
    2c58:	01 30       	cpi	r16, 0x01	; 1
    2c5a:	11 05       	cpc	r17, r1
    2c5c:	59 f0       	breq	.+22     	; 0x2c74 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0xa4>
    2c5e:	a8 f0       	brcs	.+42     	; 0x2c8a <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0xba>
    2c60:	2e 0f       	add	r18, r30
    2c62:	3f 1f       	adc	r19, r31
    2c64:	02 30       	cpi	r16, 0x02	; 2
    2c66:	11 05       	cpc	r17, r1
    2c68:	e1 f0       	breq	.+56     	; 0x2ca2 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0xd2>
    2c6a:	df 91       	pop	r29
    2c6c:	cf 91       	pop	r28
    2c6e:	1f 91       	pop	r17
    2c70:	0f 91       	pop	r16
    2c72:	08 95       	ret
    2c74:	2e 0f       	add	r18, r30
    2c76:	3f 1f       	adc	r19, r31
    2c78:	e2 17       	cp	r30, r18
    2c7a:	f3 07       	cpc	r31, r19
    2c7c:	b1 f3       	breq	.-20     	; 0x2c6a <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0x9a>
    2c7e:	81 91       	ld	r24, Z+
    2c80:	df 01       	movw	r26, r30
    2c82:	11 97       	sbiw	r26, 0x01	; 1
    2c84:	84 2b       	or	r24, r20
    2c86:	8c 93       	st	X, r24
    2c88:	f7 cf       	rjmp	.-18     	; 0x2c78 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0xa8>
    2c8a:	80 95       	com	r24
    2c8c:	2e 0f       	add	r18, r30
    2c8e:	3f 1f       	adc	r19, r31
    2c90:	e2 17       	cp	r30, r18
    2c92:	f3 07       	cpc	r31, r19
    2c94:	51 f3       	breq	.-44     	; 0x2c6a <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0x9a>
    2c96:	91 91       	ld	r25, Z+
    2c98:	df 01       	movw	r26, r30
    2c9a:	11 97       	sbiw	r26, 0x01	; 1
    2c9c:	98 23       	and	r25, r24
    2c9e:	9c 93       	st	X, r25
    2ca0:	f7 cf       	rjmp	.-18     	; 0x2c90 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0xc0>
    2ca2:	e2 17       	cp	r30, r18
    2ca4:	f3 07       	cpc	r31, r19
    2ca6:	09 f3       	breq	.-62     	; 0x2c6a <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0x9a>
    2ca8:	81 91       	ld	r24, Z+
    2caa:	df 01       	movw	r26, r30
    2cac:	11 97       	sbiw	r26, 0x01	; 1
    2cae:	84 27       	eor	r24, r20
    2cb0:	8c 93       	st	X, r24
    2cb2:	f7 cf       	rjmp	.-18     	; 0x2ca2 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0xd2>

00002cb4 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)>:
_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij():
    2cb4:	ef 92       	push	r14
    2cb6:	ff 92       	push	r15
    2cb8:	0f 93       	push	r16
    2cba:	1f 93       	push	r17
    2cbc:	cf 93       	push	r28
    2cbe:	df 93       	push	r29
    2cc0:	ec 01       	movw	r28, r24
    2cc2:	77 fd       	sbrc	r23, 7
    2cc4:	76 c0       	rjmp	.+236    	; 0x2db2 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xfe>
    2cc6:	ec 80       	ldd	r14, Y+4	; 0x04
    2cc8:	fd 80       	ldd	r15, Y+5	; 0x05
    2cca:	6e 15       	cp	r22, r14
    2ccc:	7f 05       	cpc	r23, r15
    2cce:	0c f0       	brlt	.+2      	; 0x2cd2 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x1e>
    2cd0:	70 c0       	rjmp	.+224    	; 0x2db2 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xfe>
    2cd2:	57 ff       	sbrs	r21, 7
    2cd4:	04 c0       	rjmp	.+8      	; 0x2cde <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x2a>
    2cd6:	24 0f       	add	r18, r20
    2cd8:	35 1f       	adc	r19, r21
    2cda:	50 e0       	ldi	r21, 0x00	; 0
    2cdc:	40 e0       	ldi	r20, 0x00	; 0
    2cde:	8e 81       	ldd	r24, Y+6	; 0x06
    2ce0:	9f 81       	ldd	r25, Y+7	; 0x07
    2ce2:	fa 01       	movw	r30, r20
    2ce4:	e2 0f       	add	r30, r18
    2ce6:	f3 1f       	adc	r31, r19
    2ce8:	8e 17       	cp	r24, r30
    2cea:	9f 07       	cpc	r25, r31
    2cec:	1c f4       	brge	.+6      	; 0x2cf4 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x40>
    2cee:	9c 01       	movw	r18, r24
    2cf0:	24 1b       	sub	r18, r20
    2cf2:	35 0b       	sbc	r19, r21
    2cf4:	12 16       	cp	r1, r18
    2cf6:	13 06       	cpc	r1, r19
    2cf8:	0c f0       	brlt	.+2      	; 0x2cfc <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x48>
    2cfa:	5b c0       	rjmp	.+182    	; 0x2db2 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xfe>
    2cfc:	92 2f       	mov	r25, r18
    2cfe:	84 2f       	mov	r24, r20
    2d00:	86 95       	lsr	r24
    2d02:	86 95       	lsr	r24
    2d04:	86 95       	lsr	r24
    2d06:	8e 9d       	mul	r24, r14
    2d08:	d0 01       	movw	r26, r0
    2d0a:	8f 9d       	mul	r24, r15
    2d0c:	b0 0d       	add	r27, r0
    2d0e:	11 24       	eor	r1, r1
    2d10:	6a 0f       	add	r22, r26
    2d12:	7b 1f       	adc	r23, r27
    2d14:	af 8d       	ldd	r26, Y+31	; 0x1f
    2d16:	b8 a1       	ldd	r27, Y+32	; 0x20
    2d18:	a6 0f       	add	r26, r22
    2d1a:	b7 1f       	adc	r27, r23
    2d1c:	47 70       	andi	r20, 0x07	; 7
    2d1e:	49 f1       	breq	.+82     	; 0x2d72 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xbe>
    2d20:	88 e0       	ldi	r24, 0x08	; 8
    2d22:	84 1b       	sub	r24, r20
    2d24:	48 2f       	mov	r20, r24
    2d26:	68 2f       	mov	r22, r24
    2d28:	70 e0       	ldi	r23, 0x00	; 0
    2d2a:	fb 01       	movw	r30, r22
    2d2c:	e7 56       	subi	r30, 0x67	; 103
    2d2e:	fa 4f       	sbci	r31, 0xFA	; 250
    2d30:	e4 91       	lpm	r30, Z
    2d32:	28 17       	cp	r18, r24
    2d34:	08 f0       	brcs	.+2      	; 0x2d38 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x84>
    2d36:	63 c0       	rjmp	.+198    	; 0x2dfe <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x14a>
    2d38:	62 1b       	sub	r22, r18
    2d3a:	71 09       	sbc	r23, r1
    2d3c:	2f ef       	ldi	r18, 0xFF	; 255
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	02 c0       	rjmp	.+4      	; 0x2d46 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x92>
    2d42:	35 95       	asr	r19
    2d44:	27 95       	ror	r18
    2d46:	6a 95       	dec	r22
    2d48:	e2 f7       	brpl	.-8      	; 0x2d42 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x8e>
    2d4a:	e2 23       	and	r30, r18
    2d4c:	01 30       	cpi	r16, 0x01	; 1
    2d4e:	11 05       	cpc	r17, r1
    2d50:	39 f0       	breq	.+14     	; 0x2d60 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xac>
    2d52:	b0 f1       	brcs	.+108    	; 0x2dc0 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x10c>
    2d54:	02 30       	cpi	r16, 0x02	; 2
    2d56:	11 05       	cpc	r17, r1
    2d58:	61 f5       	brne	.+88     	; 0x2db2 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xfe>
    2d5a:	8c 91       	ld	r24, X
    2d5c:	e8 27       	eor	r30, r24
    2d5e:	02 c0       	rjmp	.+4      	; 0x2d64 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xb0>
    2d60:	8c 91       	ld	r24, X
    2d62:	e8 2b       	or	r30, r24
    2d64:	ec 93       	st	X, r30
    2d66:	94 17       	cp	r25, r20
    2d68:	20 f1       	brcs	.+72     	; 0x2db2 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xfe>
    2d6a:	2c 81       	ldd	r18, Y+4	; 0x04
    2d6c:	3d 81       	ldd	r19, Y+5	; 0x05
    2d6e:	a2 0f       	add	r26, r18
    2d70:	b3 1f       	adc	r27, r19
    2d72:	e9 2f       	mov	r30, r25
    2d74:	e4 1b       	sub	r30, r20
    2d76:	e8 30       	cpi	r30, 0x08	; 8
    2d78:	78 f0       	brcs	.+30     	; 0x2d98 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xe4>
    2d7a:	02 30       	cpi	r16, 0x02	; 2
    2d7c:	11 05       	cpc	r17, r1
    2d7e:	21 f5       	brne	.+72     	; 0x2dc8 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x114>
    2d80:	8e 2f       	mov	r24, r30
    2d82:	9c 91       	ld	r25, X
    2d84:	90 95       	com	r25
    2d86:	9c 93       	st	X, r25
    2d88:	2c 81       	ldd	r18, Y+4	; 0x04
    2d8a:	3d 81       	ldd	r19, Y+5	; 0x05
    2d8c:	a2 0f       	add	r26, r18
    2d8e:	b3 1f       	adc	r27, r19
    2d90:	88 50       	subi	r24, 0x08	; 8
    2d92:	88 30       	cpi	r24, 0x08	; 8
    2d94:	b0 f7       	brcc	.-20     	; 0x2d82 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xce>
    2d96:	e7 70       	andi	r30, 0x07	; 7
    2d98:	ee 23       	and	r30, r30
    2d9a:	59 f0       	breq	.+22     	; 0x2db2 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xfe>
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	ef 56       	subi	r30, 0x6F	; 111
    2da0:	fa 4f       	sbci	r31, 0xFA	; 250
    2da2:	e4 91       	lpm	r30, Z
    2da4:	01 30       	cpi	r16, 0x01	; 1
    2da6:	11 05       	cpc	r17, r1
    2da8:	f9 f0       	breq	.+62     	; 0x2de8 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x134>
    2daa:	10 f1       	brcs	.+68     	; 0x2df0 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x13c>
    2dac:	02 30       	cpi	r16, 0x02	; 2
    2dae:	11 05       	cpc	r17, r1
    2db0:	19 f1       	breq	.+70     	; 0x2df8 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x144>
    2db2:	df 91       	pop	r29
    2db4:	cf 91       	pop	r28
    2db6:	1f 91       	pop	r17
    2db8:	0f 91       	pop	r16
    2dba:	ff 90       	pop	r15
    2dbc:	ef 90       	pop	r14
    2dbe:	08 95       	ret
    2dc0:	e0 95       	com	r30
    2dc2:	8c 91       	ld	r24, X
    2dc4:	e8 23       	and	r30, r24
    2dc6:	ce cf       	rjmp	.-100    	; 0x2d64 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xb0>
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	01 15       	cp	r16, r1
    2dcc:	11 05       	cpc	r17, r1
    2dce:	09 f4       	brne	.+2      	; 0x2dd2 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x11e>
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	81 95       	neg	r24
    2dd4:	9e 2f       	mov	r25, r30
    2dd6:	8c 93       	st	X, r24
    2dd8:	2c 81       	ldd	r18, Y+4	; 0x04
    2dda:	3d 81       	ldd	r19, Y+5	; 0x05
    2ddc:	a2 0f       	add	r26, r18
    2dde:	b3 1f       	adc	r27, r19
    2de0:	98 50       	subi	r25, 0x08	; 8
    2de2:	98 30       	cpi	r25, 0x08	; 8
    2de4:	c0 f7       	brcc	.-16     	; 0x2dd6 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x122>
    2de6:	d7 cf       	rjmp	.-82     	; 0x2d96 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xe2>
    2de8:	8c 91       	ld	r24, X
    2dea:	e8 2b       	or	r30, r24
    2dec:	ec 93       	st	X, r30
    2dee:	e1 cf       	rjmp	.-62     	; 0x2db2 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xfe>
    2df0:	e0 95       	com	r30
    2df2:	8c 91       	ld	r24, X
    2df4:	e8 23       	and	r30, r24
    2df6:	fa cf       	rjmp	.-12     	; 0x2dec <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x138>
    2df8:	8c 91       	ld	r24, X
    2dfa:	e8 27       	eor	r30, r24
    2dfc:	f7 cf       	rjmp	.-18     	; 0x2dec <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x138>
    2dfe:	01 30       	cpi	r16, 0x01	; 1
    2e00:	11 05       	cpc	r17, r1
    2e02:	09 f4       	brne	.+2      	; 0x2e06 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x152>
    2e04:	ad cf       	rjmp	.-166    	; 0x2d60 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xac>
    2e06:	e0 f2       	brcs	.-72     	; 0x2dc0 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x10c>
    2e08:	02 30       	cpi	r16, 0x02	; 2
    2e0a:	11 05       	cpc	r17, r1
    2e0c:	09 f4       	brne	.+2      	; 0x2e10 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x15c>
    2e0e:	a5 cf       	rjmp	.-182    	; 0x2d5a <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xa6>
    2e10:	ae 0d       	add	r26, r14
    2e12:	bf 1d       	adc	r27, r15
    2e14:	ae cf       	rjmp	.-164    	; 0x2d72 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xbe>

00002e16 <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)>:
_ZN16Adafruit_SSD130613drawFastHLineEiiij():
    2e16:	0f 93       	push	r16
    2e18:	1f 93       	push	r17
    2e1a:	fa 01       	movw	r30, r20
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	56 96       	adiw	r26, 0x16	; 22
    2e20:	4c 91       	ld	r20, X
    2e22:	56 97       	sbiw	r26, 0x16	; 22
    2e24:	42 30       	cpi	r20, 0x02	; 2
    2e26:	89 f0       	breq	.+34     	; 0x2e4a <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x34>
    2e28:	43 30       	cpi	r20, 0x03	; 3
    2e2a:	39 f1       	breq	.+78     	; 0x2e7a <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x64>
    2e2c:	41 30       	cpi	r20, 0x01	; 1
    2e2e:	f9 f4       	brne	.+62     	; 0x2e6e <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x58>
    2e30:	14 96       	adiw	r26, 0x04	; 4
    2e32:	4d 91       	ld	r20, X+
    2e34:	5c 91       	ld	r21, X
    2e36:	da 01       	movw	r26, r20
    2e38:	ae 1b       	sub	r26, r30
    2e3a:	bf 0b       	sbc	r27, r31
    2e3c:	fd 01       	movw	r30, r26
    2e3e:	31 97       	sbiw	r30, 0x01	; 1
    2e40:	ab 01       	movw	r20, r22
    2e42:	bf 01       	movw	r22, r30
    2e44:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)>
    2e48:	15 c0       	rjmp	.+42     	; 0x2e74 <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x5e>
    2e4a:	14 96       	adiw	r26, 0x04	; 4
    2e4c:	4d 91       	ld	r20, X+
    2e4e:	5c 91       	ld	r21, X
    2e50:	da 01       	movw	r26, r20
    2e52:	a6 1b       	sub	r26, r22
    2e54:	b7 0b       	sbc	r27, r23
    2e56:	bd 01       	movw	r22, r26
    2e58:	dc 01       	movw	r26, r24
    2e5a:	16 96       	adiw	r26, 0x06	; 6
    2e5c:	4d 91       	ld	r20, X+
    2e5e:	5c 91       	ld	r21, X
    2e60:	da 01       	movw	r26, r20
    2e62:	ae 1b       	sub	r26, r30
    2e64:	bf 0b       	sbc	r27, r31
    2e66:	fd 01       	movw	r30, r26
    2e68:	31 97       	sbiw	r30, 0x01	; 1
    2e6a:	62 1b       	sub	r22, r18
    2e6c:	73 0b       	sbc	r23, r19
    2e6e:	af 01       	movw	r20, r30
    2e70:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)>
    2e74:	1f 91       	pop	r17
    2e76:	0f 91       	pop	r16
    2e78:	08 95       	ret
    2e7a:	16 96       	adiw	r26, 0x06	; 6
    2e7c:	4d 91       	ld	r20, X+
    2e7e:	5c 91       	ld	r21, X
    2e80:	da 01       	movw	r26, r20
    2e82:	a6 1b       	sub	r26, r22
    2e84:	b7 0b       	sbc	r27, r23
    2e86:	bd 01       	movw	r22, r26
    2e88:	62 1b       	sub	r22, r18
    2e8a:	73 0b       	sbc	r23, r19
    2e8c:	d9 cf       	rjmp	.-78     	; 0x2e40 <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x2a>

00002e8e <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)>:
_ZN16Adafruit_SSD130613drawFastVLineEiiij():
    2e8e:	0f 93       	push	r16
    2e90:	1f 93       	push	r17
    2e92:	fa 01       	movw	r30, r20
    2e94:	dc 01       	movw	r26, r24
    2e96:	56 96       	adiw	r26, 0x16	; 22
    2e98:	4c 91       	ld	r20, X
    2e9a:	56 97       	sbiw	r26, 0x16	; 22
    2e9c:	42 30       	cpi	r20, 0x02	; 2
    2e9e:	91 f0       	breq	.+36     	; 0x2ec4 <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x36>
    2ea0:	43 30       	cpi	r20, 0x03	; 3
    2ea2:	49 f1       	breq	.+82     	; 0x2ef6 <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x68>
    2ea4:	41 30       	cpi	r20, 0x01	; 1
    2ea6:	09 f5       	brne	.+66     	; 0x2eea <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x5c>
    2ea8:	14 96       	adiw	r26, 0x04	; 4
    2eaa:	4d 91       	ld	r20, X+
    2eac:	5c 91       	ld	r21, X
    2eae:	da 01       	movw	r26, r20
    2eb0:	ae 1b       	sub	r26, r30
    2eb2:	bf 0b       	sbc	r27, r31
    2eb4:	fd 01       	movw	r30, r26
    2eb6:	e2 1b       	sub	r30, r18
    2eb8:	f3 0b       	sbc	r31, r19
    2eba:	ab 01       	movw	r20, r22
    2ebc:	bf 01       	movw	r22, r30
    2ebe:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)>
    2ec2:	16 c0       	rjmp	.+44     	; 0x2ef0 <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x62>
    2ec4:	14 96       	adiw	r26, 0x04	; 4
    2ec6:	4d 91       	ld	r20, X+
    2ec8:	5c 91       	ld	r21, X
    2eca:	da 01       	movw	r26, r20
    2ecc:	a6 1b       	sub	r26, r22
    2ece:	b7 0b       	sbc	r27, r23
    2ed0:	bd 01       	movw	r22, r26
    2ed2:	61 50       	subi	r22, 0x01	; 1
    2ed4:	71 09       	sbc	r23, r1
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	16 96       	adiw	r26, 0x06	; 6
    2eda:	4d 91       	ld	r20, X+
    2edc:	5c 91       	ld	r21, X
    2ede:	da 01       	movw	r26, r20
    2ee0:	ae 1b       	sub	r26, r30
    2ee2:	bf 0b       	sbc	r27, r31
    2ee4:	fd 01       	movw	r30, r26
    2ee6:	e2 1b       	sub	r30, r18
    2ee8:	f3 0b       	sbc	r31, r19
    2eea:	af 01       	movw	r20, r30
    2eec:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)>
    2ef0:	1f 91       	pop	r17
    2ef2:	0f 91       	pop	r16
    2ef4:	08 95       	ret
    2ef6:	16 96       	adiw	r26, 0x06	; 6
    2ef8:	4d 91       	ld	r20, X+
    2efa:	5c 91       	ld	r21, X
    2efc:	da 01       	movw	r26, r20
    2efe:	a6 1b       	sub	r26, r22
    2f00:	b7 0b       	sbc	r27, r23
    2f02:	bd 01       	movw	r22, r26
    2f04:	61 50       	subi	r22, 0x01	; 1
    2f06:	71 09       	sbc	r23, r1
    2f08:	d8 cf       	rjmp	.-80     	; 0x2eba <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x2c>

00002f0a <Adafruit_SSD1306::display()>:
_ZN16Adafruit_SSD13067displayEv():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:926
    @return None (void).
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SSD1306::display(void) {
    2f0a:	cf 92       	push	r12
    2f0c:	df 92       	push	r13
    2f0e:	ef 92       	push	r14
    2f10:	ff 92       	push	r15
    2f12:	0f 93       	push	r16
    2f14:	1f 93       	push	r17
    2f16:	cf 93       	push	r28
    2f18:	df 93       	push	r29
    2f1a:	ec 01       	movw	r28, r24
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:927
  TRANSACTION_START
    2f1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f1e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f20:	00 97       	sbiw	r24, 0x00	; 0
    2f22:	09 f4       	brne	.+2      	; 0x2f26 <Adafruit_SSD1306::display()+0x1c>
    2f24:	6e c0       	rjmp	.+220    	; 0x3002 <Adafruit_SSD1306::display()+0xf8>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:927 (discriminator 1)
    2f26:	4d a9       	ldd	r20, Y+53	; 0x35
    2f28:	5e a9       	ldd	r21, Y+54	; 0x36
    2f2a:	6f a9       	ldd	r22, Y+55	; 0x37
    2f2c:	78 ad       	ldd	r23, Y+56	; 0x38
    2f2e:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <TwoWire::setClock(unsigned long)>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:933
  static const uint8_t PROGMEM dlist1[] = {
      SSD1306_PAGEADDR,
      0,                      // Page start address
      0xFF,                   // Page end (not really, but works here)
      SSD1306_COLUMNADDR, 0}; // Column start address
  ssd1306_commandList(dlist1, sizeof(dlist1));
    2f32:	45 e0       	ldi	r20, 0x05	; 5
    2f34:	6c e8       	ldi	r22, 0x8C	; 140
    2f36:	75 e0       	ldi	r23, 0x05	; 5
    2f38:	ce 01       	movw	r24, r28
    2f3a:	0e 94 52 13 	call	0x26a4	; 0x26a4 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:934
  ssd1306_command1(WIDTH - 1); // Column end address
    2f3e:	6c 81       	ldd	r22, Y+4	; 0x04
    2f40:	61 50       	subi	r22, 0x01	; 1
    2f42:	ce 01       	movw	r24, r28
    2f44:	0e 94 ad 12 	call	0x255a	; 0x255a <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:945
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();
#endif
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
    2f48:	2e 81       	ldd	r18, Y+6	; 0x06
    2f4a:	3f 81       	ldd	r19, Y+7	; 0x07
    2f4c:	c9 01       	movw	r24, r18
    2f4e:	07 96       	adiw	r24, 0x07	; 7
    2f50:	97 fd       	sbrc	r25, 7
    2f52:	07 96       	adiw	r24, 0x07	; 7
    2f54:	23 e0       	ldi	r18, 0x03	; 3
    2f56:	95 95       	asr	r25
    2f58:	87 95       	ror	r24
    2f5a:	2a 95       	dec	r18
    2f5c:	e1 f7       	brne	.-8      	; 0x2f56 <Adafruit_SSD1306::display()+0x4c>
    2f5e:	2c 81       	ldd	r18, Y+4	; 0x04
    2f60:	3d 81       	ldd	r19, Y+5	; 0x05
    2f62:	82 9f       	mul	r24, r18
    2f64:	70 01       	movw	r14, r0
    2f66:	83 9f       	mul	r24, r19
    2f68:	f0 0c       	add	r15, r0
    2f6a:	92 9f       	mul	r25, r18
    2f6c:	f0 0c       	add	r15, r0
    2f6e:	11 24       	eor	r1, r1
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:946
  uint8_t *ptr = buffer;
    2f70:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2f72:	18 a1       	ldd	r17, Y+32	; 0x20
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:947
  if (wire) { // I2C
    2f74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f76:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f78:	e0 0e       	add	r14, r16
    2f7a:	f1 1e       	adc	r15, r17
    2f7c:	00 97       	sbiw	r24, 0x00	; 0
    2f7e:	09 f4       	brne	.+2      	; 0x2f82 <Adafruit_SSD1306::display()+0x78>
    2f80:	65 c0       	rjmp	.+202    	; 0x304c <Adafruit_SSD1306::display()+0x142>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:948
    wire->beginTransmission(i2caddr);
    2f82:	69 a1       	ldd	r22, Y+33	; 0x21
    2f84:	06 2e       	mov	r0, r22
    2f86:	00 0c       	add	r0, r0
    2f88:	77 0b       	sbc	r23, r23
    2f8a:	0e 94 02 09 	call	0x1204	; 0x1204 <TwoWire::beginTransmission(int)>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:949
    WIRE_WRITE((uint8_t)0x40);
    2f8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f90:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f92:	dc 01       	movw	r26, r24
    2f94:	ed 91       	ld	r30, X+
    2f96:	fc 91       	ld	r31, X
    2f98:	01 90       	ld	r0, Z+
    2f9a:	f0 81       	ld	r31, Z
    2f9c:	e0 2d       	mov	r30, r0
    2f9e:	60 e4       	ldi	r22, 0x40	; 64
    2fa0:	09 95       	icall
    2fa2:	68 01       	movw	r12, r16
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:950
    uint16_t bytesOut = 1;
    2fa4:	01 e0       	ldi	r16, 0x01	; 1
    2fa6:	10 e0       	ldi	r17, 0x00	; 0
    2fa8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2faa:	9e 8d       	ldd	r25, Y+30	; 0x1e
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:951
    while (count--) {
    2fac:	ec 14       	cp	r14, r12
    2fae:	fd 04       	cpc	r15, r13
    2fb0:	c1 f1       	breq	.+112    	; 0x3022 <Adafruit_SSD1306::display()+0x118>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:952
      if (bytesOut >= WIRE_MAX) {
    2fb2:	00 32       	cpi	r16, 0x20	; 32
    2fb4:	11 05       	cpc	r17, r1
    2fb6:	b0 f0       	brcs	.+44     	; 0x2fe4 <Adafruit_SSD1306::display()+0xda>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:953
        wire->endTransmission();
    2fb8:	0e 94 17 09 	call	0x122e	; 0x122e <TwoWire::endTransmission()>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:954
        wire->beginTransmission(i2caddr);
    2fbc:	69 a1       	ldd	r22, Y+33	; 0x21
    2fbe:	06 2e       	mov	r0, r22
    2fc0:	00 0c       	add	r0, r0
    2fc2:	77 0b       	sbc	r23, r23
    2fc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fc6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fc8:	0e 94 02 09 	call	0x1204	; 0x1204 <TwoWire::beginTransmission(int)>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:955
        WIRE_WRITE((uint8_t)0x40);
    2fcc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	ed 91       	ld	r30, X+
    2fd4:	fc 91       	ld	r31, X
    2fd6:	01 90       	ld	r0, Z+
    2fd8:	f0 81       	ld	r31, Z
    2fda:	e0 2d       	mov	r30, r0
    2fdc:	60 e4       	ldi	r22, 0x40	; 64
    2fde:	09 95       	icall
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:956
        bytesOut = 1;
    2fe0:	01 e0       	ldi	r16, 0x01	; 1
    2fe2:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:958
      }
      WIRE_WRITE(*ptr++);
    2fe4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fe6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fe8:	f6 01       	movw	r30, r12
    2fea:	61 91       	ld	r22, Z+
    2fec:	6f 01       	movw	r12, r30
    2fee:	dc 01       	movw	r26, r24
    2ff0:	ed 91       	ld	r30, X+
    2ff2:	fc 91       	ld	r31, X
    2ff4:	01 90       	ld	r0, Z+
    2ff6:	f0 81       	ld	r31, Z
    2ff8:	e0 2d       	mov	r30, r0
    2ffa:	09 95       	icall
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:959
      bytesOut++;
    2ffc:	0f 5f       	subi	r16, 0xFF	; 255
    2ffe:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:951
  uint8_t *ptr = buffer;
  if (wire) { // I2C
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x40);
    uint16_t bytesOut = 1;
    while (count--) {
    3000:	d3 cf       	rjmp	.-90     	; 0x2fa8 <Adafruit_SSD1306::display()+0x9e>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:927 (discriminator 2)
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SSD1306::display(void) {
  TRANSACTION_START
    3002:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3004:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3006:	89 2b       	or	r24, r25
    3008:	21 f0       	breq	.+8      	; 0x3012 <Adafruit_SSD1306::display()+0x108>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:927 (discriminator 3)
    300a:	8e ad       	ldd	r24, Y+62	; 0x3e
    300c:	9f ad       	ldd	r25, Y+63	; 0x3f
    300e:	0e 94 36 12 	call	0x246c	; 0x246c <SPIClass::beginTransaction(SPISettings)>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:927 (discriminator 5)
    3012:	ef a5       	ldd	r30, Y+47	; 0x2f
    3014:	f8 a9       	ldd	r31, Y+48	; 0x30
    3016:	90 81       	ld	r25, Z
    3018:	8c a9       	ldd	r24, Y+52	; 0x34
    301a:	80 95       	com	r24
    301c:	89 23       	and	r24, r25
    301e:	80 83       	st	Z, r24
    3020:	88 cf       	rjmp	.-240    	; 0x2f32 <Adafruit_SSD1306::display()+0x28>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:961
        bytesOut = 1;
      }
      WIRE_WRITE(*ptr++);
      bytesOut++;
    }
    wire->endTransmission();
    3022:	0e 94 17 09 	call	0x122e	; 0x122e <TwoWire::endTransmission()>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:967
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    3026:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3028:	9e 8d       	ldd	r25, Y+30	; 0x1e
    302a:	00 97       	sbiw	r24, 0x00	; 0
    302c:	09 f4       	brne	.+2      	; 0x3030 <Adafruit_SSD1306::display()+0x126>
    302e:	43 c0       	rjmp	.+134    	; 0x30b6 <Adafruit_SSD1306::display()+0x1ac>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:967 (discriminator 1)
    3030:	49 ad       	ldd	r20, Y+57	; 0x39
    3032:	5a ad       	ldd	r21, Y+58	; 0x3a
    3034:	6b ad       	ldd	r22, Y+59	; 0x3b
    3036:	7c ad       	ldd	r23, Y+60	; 0x3c
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:971 (discriminator 1)
#if defined(ESP8266)
  yield();
#endif
}
    3038:	df 91       	pop	r29
    303a:	cf 91       	pop	r28
    303c:	1f 91       	pop	r17
    303e:	0f 91       	pop	r16
    3040:	ff 90       	pop	r15
    3042:	ef 90       	pop	r14
    3044:	df 90       	pop	r13
    3046:	cf 90       	pop	r12
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:967 (discriminator 1)
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    3048:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <TwoWire::setClock(unsigned long)>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:963
      WIRE_WRITE(*ptr++);
      bytesOut++;
    }
    wire->endTransmission();
  } else { // SPI
    SSD1306_MODE_DATA
    304c:	ed a5       	ldd	r30, Y+45	; 0x2d
    304e:	fe a5       	ldd	r31, Y+46	; 0x2e
    3050:	80 81       	ld	r24, Z
    3052:	9b a9       	ldd	r25, Y+51	; 0x33
    3054:	89 2b       	or	r24, r25
    3056:	80 83       	st	Z, r24
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:964
    while (count--)
    3058:	e0 16       	cp	r14, r16
    305a:	f1 06       	cpc	r15, r17
    305c:	21 f3       	breq	.-56     	; 0x3026 <Adafruit_SSD1306::display()+0x11c>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:965
      SPIwrite(*ptr++);
    305e:	f8 01       	movw	r30, r16
    3060:	81 91       	ld	r24, Z+
    3062:	8f 01       	movw	r16, r30
_ZN16Adafruit_SSD13068SPIwriteEh():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:349
// LOW-LEVEL UTILS ---------------------------------------------------------

// Issue single byte out SPI, either soft or hardware as appropriate.
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    3064:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3066:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3068:	23 2b       	or	r18, r19
    306a:	19 f0       	breq	.+6      	; 0x3072 <Adafruit_SSD1306::display()+0x168>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:350
    (void)spi->transfer(d);
    306c:	0e 94 50 12 	call	0x24a0	; 0x24a0 <SPIClass::transfer(unsigned char)>
    3070:	f3 cf       	rjmp	.-26     	; 0x3058 <Adafruit_SSD1306::display()+0x14e>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:349
// LOW-LEVEL UTILS ---------------------------------------------------------

// Issue single byte out SPI, either soft or hardware as appropriate.
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    3072:	28 e0       	ldi	r18, 0x08	; 8
    3074:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:352
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    3076:	40 e8       	ldi	r20, 0x80	; 128
    3078:	e9 a5       	ldd	r30, Y+41	; 0x29
    307a:	fa a5       	ldd	r31, Y+42	; 0x2a
    307c:	99 a9       	ldd	r25, Y+49	; 0x31
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:354
#ifdef HAVE_PORTREG
      if (d & bit)
    307e:	58 2f       	mov	r21, r24
    3080:	54 23       	and	r21, r20
    3082:	a9 f0       	breq	.+42     	; 0x30ae <Adafruit_SSD1306::display()+0x1a4>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:355
        *mosiPort |= mosiPinMask;
    3084:	50 81       	ld	r21, Z
    3086:	95 2b       	or	r25, r21
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:357
      else
        *mosiPort &= ~mosiPinMask;
    3088:	90 83       	st	Z, r25
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:358
      *clkPort |= clkPinMask;  // Clock high
    308a:	eb a5       	ldd	r30, Y+43	; 0x2b
    308c:	fc a5       	ldd	r31, Y+44	; 0x2c
    308e:	90 81       	ld	r25, Z
    3090:	5a a9       	ldd	r21, Y+50	; 0x32
    3092:	95 2b       	or	r25, r21
    3094:	90 83       	st	Z, r25
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:359
      *clkPort &= ~clkPinMask; // Clock low
    3096:	eb a5       	ldd	r30, Y+43	; 0x2b
    3098:	fc a5       	ldd	r31, Y+44	; 0x2c
    309a:	50 81       	ld	r21, Z
    309c:	9a a9       	ldd	r25, Y+50	; 0x32
    309e:	90 95       	com	r25
    30a0:	95 23       	and	r25, r21
    30a2:	90 83       	st	Z, r25
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:352
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    30a4:	46 95       	lsr	r20
    30a6:	21 50       	subi	r18, 0x01	; 1
    30a8:	31 09       	sbc	r19, r1
    30aa:	31 f7       	brne	.-52     	; 0x3078 <Adafruit_SSD1306::display()+0x16e>
    30ac:	d5 cf       	rjmp	.-86     	; 0x3058 <Adafruit_SSD1306::display()+0x14e>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:357
#ifdef HAVE_PORTREG
      if (d & bit)
        *mosiPort |= mosiPinMask;
      else
        *mosiPort &= ~mosiPinMask;
    30ae:	50 81       	ld	r21, Z
    30b0:	90 95       	com	r25
    30b2:	95 23       	and	r25, r21
    30b4:	e9 cf       	rjmp	.-46     	; 0x3088 <Adafruit_SSD1306::display()+0x17e>
_ZN16Adafruit_SSD13067displayEv():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:967 (discriminator 2)
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    30b6:	ef a5       	ldd	r30, Y+47	; 0x2f
    30b8:	f8 a9       	ldd	r31, Y+48	; 0x30
    30ba:	80 81       	ld	r24, Z
    30bc:	9c a9       	ldd	r25, Y+52	; 0x34
    30be:	89 2b       	or	r24, r25
    30c0:	80 83       	st	Z, r24
    30c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30c6:	89 2b       	or	r24, r25
    30c8:	51 f0       	breq	.+20     	; 0x30de <Adafruit_SSD1306::display()+0x1d4>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:971 (discriminator 3)
#if defined(ESP8266)
  yield();
#endif
}
    30ca:	df 91       	pop	r29
    30cc:	cf 91       	pop	r28
    30ce:	1f 91       	pop	r17
    30d0:	0f 91       	pop	r16
    30d2:	ff 90       	pop	r15
    30d4:	ef 90       	pop	r14
    30d6:	df 90       	pop	r13
    30d8:	cf 90       	pop	r12
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:967 (discriminator 3)
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    30da:	0c 94 76 11 	jmp	0x22ec	; 0x22ec <SPIClass::endTransaction()>
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:971
#if defined(ESP8266)
  yield();
#endif
}
    30de:	df 91       	pop	r29
    30e0:	cf 91       	pop	r28
    30e2:	1f 91       	pop	r17
    30e4:	0f 91       	pop	r16
    30e6:	ff 90       	pop	r15
    30e8:	ef 90       	pop	r14
    30ea:	df 90       	pop	r13
    30ec:	cf 90       	pop	r12
    30ee:	08 95       	ret

000030f0 <Adafruit_SHT31::Adafruit_SHT31(TwoWire*)>:
_ZN14Adafruit_SHT31C2EP7TwoWire():
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SHT31_Library/Adafruit_SHT31.cpp:37
/*!
 * @brief  SHT31 constructor using i2c
 * @param  *theWire
 *         optional wire
 */
Adafruit_SHT31::Adafruit_SHT31(TwoWire *theWire) {
    30f0:	fc 01       	movw	r30, r24
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SHT31_Library/Adafruit_SHT31.cpp:38
  _wire = theWire;
    30f2:	71 83       	std	Z+1, r23	; 0x01
    30f4:	60 83       	st	Z, r22
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SHT31_Library/Adafruit_SHT31.cpp:39
  _i2caddr = 0;
    30f6:	12 86       	std	Z+10, r1	; 0x0a
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SHT31_Library/Adafruit_SHT31.cpp:41

  humidity = NAN;
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	a0 ec       	ldi	r26, 0xC0	; 192
    30fe:	bf e7       	ldi	r27, 0x7F	; 127
    3100:	82 83       	std	Z+2, r24	; 0x02
    3102:	93 83       	std	Z+3, r25	; 0x03
    3104:	a4 83       	std	Z+4, r26	; 0x04
    3106:	b5 83       	std	Z+5, r27	; 0x05
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SHT31_Library/Adafruit_SHT31.cpp:42
  temp = NAN;
    3108:	86 83       	std	Z+6, r24	; 0x06
    310a:	97 83       	std	Z+7, r25	; 0x07
    310c:	a0 87       	std	Z+8, r26	; 0x08
    310e:	b1 87       	std	Z+9, r27	; 0x09
C:\Users\Admin_PC\OneDrive\Documents\Arduino\libraries\Adafruit_SHT31_Library/Adafruit_SHT31.cpp:43
}
    3110:	08 95       	ret

00003112 <__vector_16>:
__vector_16():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    3112:	1f 92       	push	r1
    3114:	0f 92       	push	r0
    3116:	0f b6       	in	r0, 0x3f	; 63
    3118:	0f 92       	push	r0
    311a:	11 24       	eor	r1, r1
    311c:	2f 93       	push	r18
    311e:	3f 93       	push	r19
    3120:	8f 93       	push	r24
    3122:	9f 93       	push	r25
    3124:	af 93       	push	r26
    3126:	bf 93       	push	r27
    3128:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <timer0_millis>
    312c:	90 91 db 02 	lds	r25, 0x02DB	; 0x8002db <timer0_millis+0x1>
    3130:	a0 91 dc 02 	lds	r26, 0x02DC	; 0x8002dc <timer0_millis+0x2>
    3134:	b0 91 dd 02 	lds	r27, 0x02DD	; 0x8002dd <timer0_millis+0x3>
    3138:	30 91 d9 02 	lds	r19, 0x02D9	; 0x8002d9 <timer0_fract>
    313c:	23 e0       	ldi	r18, 0x03	; 3
    313e:	23 0f       	add	r18, r19
    3140:	2d 37       	cpi	r18, 0x7D	; 125
    3142:	68 f1       	brcs	.+90     	; 0x319e <__vector_16+0x8c>
    3144:	26 e8       	ldi	r18, 0x86	; 134
    3146:	23 0f       	add	r18, r19
    3148:	02 96       	adiw	r24, 0x02	; 2
    314a:	a1 1d       	adc	r26, r1
    314c:	b1 1d       	adc	r27, r1
    314e:	20 93 d9 02 	sts	0x02D9, r18	; 0x8002d9 <timer0_fract>
    3152:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <timer0_millis>
    3156:	90 93 db 02 	sts	0x02DB, r25	; 0x8002db <timer0_millis+0x1>
    315a:	a0 93 dc 02 	sts	0x02DC, r26	; 0x8002dc <timer0_millis+0x2>
    315e:	b0 93 dd 02 	sts	0x02DD, r27	; 0x8002dd <timer0_millis+0x3>
    3162:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <timer0_overflow_count>
    3166:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <timer0_overflow_count+0x1>
    316a:	a0 91 d7 02 	lds	r26, 0x02D7	; 0x8002d7 <timer0_overflow_count+0x2>
    316e:	b0 91 d8 02 	lds	r27, 0x02D8	; 0x8002d8 <timer0_overflow_count+0x3>
    3172:	01 96       	adiw	r24, 0x01	; 1
    3174:	a1 1d       	adc	r26, r1
    3176:	b1 1d       	adc	r27, r1
    3178:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <timer0_overflow_count>
    317c:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <timer0_overflow_count+0x1>
    3180:	a0 93 d7 02 	sts	0x02D7, r26	; 0x8002d7 <timer0_overflow_count+0x2>
    3184:	b0 93 d8 02 	sts	0x02D8, r27	; 0x8002d8 <timer0_overflow_count+0x3>
    3188:	bf 91       	pop	r27
    318a:	af 91       	pop	r26
    318c:	9f 91       	pop	r25
    318e:	8f 91       	pop	r24
    3190:	3f 91       	pop	r19
    3192:	2f 91       	pop	r18
    3194:	0f 90       	pop	r0
    3196:	0f be       	out	0x3f, r0	; 63
    3198:	0f 90       	pop	r0
    319a:	1f 90       	pop	r1
    319c:	18 95       	reti
    319e:	01 96       	adiw	r24, 0x01	; 1
    31a0:	a1 1d       	adc	r26, r1
    31a2:	b1 1d       	adc	r27, r1
    31a4:	d4 cf       	rjmp	.-88     	; 0x314e <__vector_16+0x3c>

000031a6 <micros>:
micros():
    31a6:	3f b7       	in	r19, 0x3f	; 63
    31a8:	f8 94       	cli
    31aa:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <timer0_overflow_count>
    31ae:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <timer0_overflow_count+0x1>
    31b2:	a0 91 d7 02 	lds	r26, 0x02D7	; 0x8002d7 <timer0_overflow_count+0x2>
    31b6:	b0 91 d8 02 	lds	r27, 0x02D8	; 0x8002d8 <timer0_overflow_count+0x3>
    31ba:	22 b7       	in	r18, 0x32	; 50
    31bc:	06 b6       	in	r0, 0x36	; 54
    31be:	00 fe       	sbrs	r0, 0
    31c0:	05 c0       	rjmp	.+10     	; 0x31cc <micros+0x26>
    31c2:	2f 3f       	cpi	r18, 0xFF	; 255
    31c4:	19 f0       	breq	.+6      	; 0x31cc <micros+0x26>
    31c6:	01 96       	adiw	r24, 0x01	; 1
    31c8:	a1 1d       	adc	r26, r1
    31ca:	b1 1d       	adc	r27, r1
    31cc:	3f bf       	out	0x3f, r19	; 63
    31ce:	ba 2f       	mov	r27, r26
    31d0:	a9 2f       	mov	r26, r25
    31d2:	98 2f       	mov	r25, r24
    31d4:	88 27       	eor	r24, r24
    31d6:	bc 01       	movw	r22, r24
    31d8:	cd 01       	movw	r24, r26
    31da:	62 0f       	add	r22, r18
    31dc:	71 1d       	adc	r23, r1
    31de:	81 1d       	adc	r24, r1
    31e0:	91 1d       	adc	r25, r1
    31e2:	42 e0       	ldi	r20, 0x02	; 2
    31e4:	66 0f       	add	r22, r22
    31e6:	77 1f       	adc	r23, r23
    31e8:	88 1f       	adc	r24, r24
    31ea:	99 1f       	adc	r25, r25
    31ec:	4a 95       	dec	r20
    31ee:	d1 f7       	brne	.-12     	; 0x31e4 <micros+0x3e>
    31f0:	08 95       	ret

000031f2 <delay>:
delay():
    31f2:	8f 92       	push	r8
    31f4:	9f 92       	push	r9
    31f6:	af 92       	push	r10
    31f8:	bf 92       	push	r11
    31fa:	cf 92       	push	r12
    31fc:	df 92       	push	r13
    31fe:	ef 92       	push	r14
    3200:	ff 92       	push	r15
    3202:	6b 01       	movw	r12, r22
    3204:	7c 01       	movw	r14, r24
    3206:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <micros>
    320a:	4b 01       	movw	r8, r22
    320c:	5c 01       	movw	r10, r24
    320e:	c1 14       	cp	r12, r1
    3210:	d1 04       	cpc	r13, r1
    3212:	e1 04       	cpc	r14, r1
    3214:	f1 04       	cpc	r15, r1
    3216:	e9 f0       	breq	.+58     	; 0x3252 <delay+0x60>
    3218:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <yield>
    321c:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <micros>
    3220:	68 19       	sub	r22, r8
    3222:	79 09       	sbc	r23, r9
    3224:	8a 09       	sbc	r24, r10
    3226:	9b 09       	sbc	r25, r11
    3228:	68 3e       	cpi	r22, 0xE8	; 232
    322a:	73 40       	sbci	r23, 0x03	; 3
    322c:	81 05       	cpc	r24, r1
    322e:	91 05       	cpc	r25, r1
    3230:	70 f3       	brcs	.-36     	; 0x320e <delay+0x1c>
    3232:	21 e0       	ldi	r18, 0x01	; 1
    3234:	c2 1a       	sub	r12, r18
    3236:	d1 08       	sbc	r13, r1
    3238:	e1 08       	sbc	r14, r1
    323a:	f1 08       	sbc	r15, r1
    323c:	88 ee       	ldi	r24, 0xE8	; 232
    323e:	88 0e       	add	r8, r24
    3240:	83 e0       	ldi	r24, 0x03	; 3
    3242:	98 1e       	adc	r9, r24
    3244:	a1 1c       	adc	r10, r1
    3246:	b1 1c       	adc	r11, r1
    3248:	c1 14       	cp	r12, r1
    324a:	d1 04       	cpc	r13, r1
    324c:	e1 04       	cpc	r14, r1
    324e:	f1 04       	cpc	r15, r1
    3250:	29 f7       	brne	.-54     	; 0x321c <delay+0x2a>
    3252:	ff 90       	pop	r15
    3254:	ef 90       	pop	r14
    3256:	df 90       	pop	r13
    3258:	cf 90       	pop	r12
    325a:	bf 90       	pop	r11
    325c:	af 90       	pop	r10
    325e:	9f 90       	pop	r9
    3260:	8f 90       	pop	r8
    3262:	08 95       	ret

00003264 <init>:
init():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    3264:	78 94       	sei
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring.c:963
#endif

  // Set timer 0 prescale factor to 64
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  // CPU specific: different values for the ATmega64/128
  TCCR0 |= _BV(WGM01) | _BV(WGM00) | _BV(CS02);
    3266:	83 b7       	in	r24, 0x33	; 51
    3268:	8c 64       	ori	r24, 0x4C	; 76
    326a:	83 bf       	out	0x33, r24	; 51
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring.c:982
  #error Timer 0 prescale factor 64 not set correctly
#endif

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
    326c:	87 b7       	in	r24, 0x37	; 55
    326e:	81 60       	ori	r24, 0x01	; 1
    3270:	87 bf       	out	0x37, r24	; 55
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    3272:	82 e0       	ldi	r24, 0x02	; 2
    3274:	8e bd       	out	0x2e, r24	; 46
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    3276:	8e b5       	in	r24, 0x2e	; 46
    3278:	81 60       	ori	r24, 0x01	; 1
    327a:	8e bd       	out	0x2e, r24	; 46
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    327c:	8f b5       	in	r24, 0x2f	; 47
    327e:	81 60       	ori	r24, 0x01	; 1
    3280:	8f bd       	out	0x2f, r24	; 47
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring.c:1011
#endif

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
    3282:	85 b5       	in	r24, 0x25	; 37
    3284:	84 60       	ori	r24, 0x04	; 4
    3286:	85 bd       	out	0x25, r24	; 37
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring.c:1020
  TCCR2A |= _BV(CS22);
#endif

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
    3288:	85 b5       	in	r24, 0x25	; 37
    328a:	80 64       	ori	r24, 0x40	; 64
    328c:	85 bd       	out	0x25, r24	; 37
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    328e:	ea e8       	ldi	r30, 0x8A	; 138
    3290:	f0 e0       	ldi	r31, 0x00	; 0
    3292:	80 81       	ld	r24, Z
    3294:	83 60       	ori	r24, 0x03	; 3
    3296:	80 83       	st	Z, r24
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    3298:	eb e8       	ldi	r30, 0x8B	; 139
    329a:	f0 e0       	ldi	r31, 0x00	; 0
    329c:	80 81       	ld	r24, Z
    329e:	81 60       	ori	r24, 0x01	; 1
    32a0:	80 83       	st	Z, r24
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    32a2:	87 e8       	ldi	r24, 0x87	; 135
    32a4:	86 b9       	out	0x06, r24	; 6
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    32a6:	1a b8       	out	0x0a, r1	; 10
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    32a8:	08 95       	ret

000032aa <turnOffPWM>:
turnOffPWM():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    32aa:	81 50       	subi	r24, 0x01	; 1
    32ac:	8c 30       	cpi	r24, 0x0C	; 12
    32ae:	88 f5       	brcc	.+98     	; 0x3312 <turnOffPWM+0x68>
    32b0:	e8 2f       	mov	r30, r24
    32b2:	f0 e0       	ldi	r31, 0x00	; 0
    32b4:	e2 5a       	subi	r30, 0xA2	; 162
    32b6:	f6 4e       	sbci	r31, 0xE6	; 230
    32b8:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__tablejump2__>
    32bc:	86 19       	sub	r24, r6
    32be:	86 19       	sub	r24, r6
    32c0:	89 19       	sub	r24, r9
    32c2:	6a 19       	sub	r22, r10
    32c4:	6e 19       	sub	r22, r14
    32c6:	71 19       	sub	r23, r1
    32c8:	74 19       	sub	r23, r4
    32ca:	89 19       	sub	r24, r9
    32cc:	89 19       	sub	r24, r9
    32ce:	78 19       	sub	r23, r8
    32d0:	7e 19       	sub	r23, r14
    32d2:	82 19       	sub	r24, r2
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    32d4:	8f b5       	in	r24, 0x2f	; 47
    32d6:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    32d8:	8f bd       	out	0x2f, r24	; 47
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    32da:	08 95       	ret
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    32dc:	8f b5       	in	r24, 0x2f	; 47
    32de:	8f 7d       	andi	r24, 0xDF	; 223
    32e0:	fb cf       	rjmp	.-10     	; 0x32d8 <turnOffPWM+0x2e>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
    32e2:	8f b5       	in	r24, 0x2f	; 47
    32e4:	87 7f       	andi	r24, 0xF7	; 247
    32e6:	f8 cf       	rjmp	.-16     	; 0x32d8 <turnOffPWM+0x2e>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:99
    #endif
    
    // Timer2
    #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        TCCR2 &= ~_BV(COM21);
    32e8:	85 b5       	in	r24, 0x25	; 37
    32ea:	8f 7d       	andi	r24, 0xDF	; 223
    32ec:	85 bd       	out	0x25, r24	; 37
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:100
        break;
    32ee:	08 95       	ret
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    32f0:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    32f4:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    32f6:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:127
        break;
    32fa:	08 95       	ret
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    32fc:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    3300:	8f 7d       	andi	r24, 0xDF	; 223
    3302:	f9 cf       	rjmp	.-14     	; 0x32f6 <turnOffPWM+0x4c>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    3304:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    3308:	87 7f       	andi	r24, 0xF7	; 247
    330a:	f5 cf       	rjmp	.-22     	; 0x32f6 <turnOffPWM+0x4c>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:171
    #if defined(TCCR0) && defined(COM01)
      case TIMER0:
        TCCR0 &= ~_BV(COM01);
        break;
      case TIMER0A:
        TCCR0 &= ~_BV(COM01);
    330c:	83 b7       	in	r24, 0x33	; 51
    330e:	8f 7d       	andi	r24, 0xDF	; 223
    3310:	83 bf       	out	0x33, r24	; 51
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:185
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
        break;
    #endif
  }
}
    3312:	08 95       	ret

00003314 <pinMode>:
pinMode():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3314:	cf 93       	push	r28
    3316:	df 93       	push	r29
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	fc 01       	movw	r30, r24
    331c:	e8 57       	subi	r30, 0x78	; 120
    331e:	f5 4f       	sbci	r31, 0xF5	; 245
    3320:	24 91       	lpm	r18, Z
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    3322:	83 54       	subi	r24, 0x43	; 67
    3324:	95 4f       	sbci	r25, 0xF5	; 245
    3326:	fc 01       	movw	r30, r24
    3328:	84 91       	lpm	r24, Z
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    332a:	88 23       	and	r24, r24
    332c:	c9 f0       	breq	.+50     	; 0x3360 <pinMode+0x4c>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	88 0f       	add	r24, r24
    3332:	99 1f       	adc	r25, r25
    3334:	fc 01       	movw	r30, r24
    3336:	ee 5e       	subi	r30, 0xEE	; 238
    3338:	f4 4f       	sbci	r31, 0xF4	; 244
    333a:	a5 91       	lpm	r26, Z+
    333c:	b4 91       	lpm	r27, Z
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    333e:	fc 01       	movw	r30, r24
    3340:	ee 5f       	subi	r30, 0xFE	; 254
    3342:	f4 4f       	sbci	r31, 0xF4	; 244
    3344:	c5 91       	lpm	r28, Z+
    3346:	d4 91       	lpm	r29, Z
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    3348:	61 11       	cpse	r22, r1
    334a:	0d c0       	rjmp	.+26     	; 0x3366 <pinMode+0x52>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    334c:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    334e:	f8 94       	cli
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    3350:	8c 91       	ld	r24, X
    3352:	20 95       	com	r18
    3354:	82 23       	and	r24, r18
    3356:	8c 93       	st	X, r24
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    3358:	88 81       	ld	r24, Y
    335a:	28 23       	and	r18, r24
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    335c:	28 83       	st	Y, r18
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    335e:	9f bf       	out	0x3f, r25	; 63
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    3360:	df 91       	pop	r29
    3362:	cf 91       	pop	r28
    3364:	08 95       	ret
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    3366:	62 30       	cpi	r22, 0x02	; 2
    3368:	51 f4       	brne	.+20     	; 0x337e <pinMode+0x6a>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    336a:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    336c:	f8 94       	cli
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    336e:	3c 91       	ld	r19, X
    3370:	82 2f       	mov	r24, r18
    3372:	80 95       	com	r24
    3374:	83 23       	and	r24, r19
    3376:	8c 93       	st	X, r24
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    3378:	e8 81       	ld	r30, Y
    337a:	2e 2b       	or	r18, r30
    337c:	ef cf       	rjmp	.-34     	; 0x335c <pinMode+0x48>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    337e:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    3380:	f8 94       	cli
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    3382:	ec 91       	ld	r30, X
    3384:	2e 2b       	or	r18, r30
    3386:	2c 93       	st	X, r18
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    3388:	8f bf       	out	0x3f, r24	; 63
    338a:	ea cf       	rjmp	.-44     	; 0x3360 <pinMode+0x4c>

0000338c <digitalWrite>:
digitalWrite():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    338c:	1f 93       	push	r17
    338e:	cf 93       	push	r28
    3390:	df 93       	push	r29
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    3392:	28 2f       	mov	r18, r24
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	f9 01       	movw	r30, r18
    3398:	ed 5a       	subi	r30, 0xAD	; 173
    339a:	f5 4f       	sbci	r31, 0xF5	; 245
    339c:	84 91       	lpm	r24, Z
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    339e:	f9 01       	movw	r30, r18
    33a0:	e8 57       	subi	r30, 0x78	; 120
    33a2:	f5 4f       	sbci	r31, 0xF5	; 245
    33a4:	d4 91       	lpm	r29, Z
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    33a6:	f9 01       	movw	r30, r18
    33a8:	e3 54       	subi	r30, 0x43	; 67
    33aa:	f5 4f       	sbci	r31, 0xF5	; 245
    33ac:	c4 91       	lpm	r28, Z
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    33ae:	cc 23       	and	r28, r28
    33b0:	a9 f0       	breq	.+42     	; 0x33dc <digitalWrite+0x50>
    33b2:	16 2f       	mov	r17, r22
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    33b4:	81 11       	cpse	r24, r1
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    33b6:	0e 94 55 19 	call	0x32aa	; 0x32aa <turnOffPWM>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    33ba:	ec 2f       	mov	r30, r28
    33bc:	f0 e0       	ldi	r31, 0x00	; 0
    33be:	ee 0f       	add	r30, r30
    33c0:	ff 1f       	adc	r31, r31
    33c2:	ee 5f       	subi	r30, 0xFE	; 254
    33c4:	f4 4f       	sbci	r31, 0xF4	; 244
    33c6:	a5 91       	lpm	r26, Z+
    33c8:	b4 91       	lpm	r27, Z
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    33ca:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    33cc:	f8 94       	cli
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    33ce:	ec 91       	ld	r30, X
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    33d0:	11 11       	cpse	r17, r1
    33d2:	08 c0       	rjmp	.+16     	; 0x33e4 <digitalWrite+0x58>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    33d4:	d0 95       	com	r29
    33d6:	de 23       	and	r29, r30
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    33d8:	dc 93       	st	X, r29
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    33da:	8f bf       	out	0x3f, r24	; 63
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:212
}
    33dc:	df 91       	pop	r29
    33de:	cf 91       	pop	r28
    33e0:	1f 91       	pop	r17
    33e2:	08 95       	ret
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    33e4:	de 2b       	or	r29, r30
    33e6:	f8 cf       	rjmp	.-16     	; 0x33d8 <digitalWrite+0x4c>

000033e8 <digitalRead>:
digitalRead():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    33e8:	cf 93       	push	r28
    33ea:	df 93       	push	r29
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    33ec:	28 2f       	mov	r18, r24
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	f9 01       	movw	r30, r18
    33f2:	ed 5a       	subi	r30, 0xAD	; 173
    33f4:	f5 4f       	sbci	r31, 0xF5	; 245
    33f6:	84 91       	lpm	r24, Z
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    33f8:	f9 01       	movw	r30, r18
    33fa:	e8 57       	subi	r30, 0x78	; 120
    33fc:	f5 4f       	sbci	r31, 0xF5	; 245
    33fe:	d4 91       	lpm	r29, Z
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    3400:	f9 01       	movw	r30, r18
    3402:	e3 54       	subi	r30, 0x43	; 67
    3404:	f5 4f       	sbci	r31, 0xF5	; 245
    3406:	c4 91       	lpm	r28, Z
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    3408:	cc 23       	and	r28, r28
    340a:	a1 f0       	breq	.+40     	; 0x3434 <digitalRead+0x4c>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    340c:	81 11       	cpse	r24, r1
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    340e:	0e 94 55 19 	call	0x32aa	; 0x32aa <turnOffPWM>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    3412:	ec 2f       	mov	r30, r28
    3414:	f0 e0       	ldi	r31, 0x00	; 0
    3416:	ee 0f       	add	r30, r30
    3418:	ff 1f       	adc	r31, r31
    341a:	ee 50       	subi	r30, 0x0E	; 14
    341c:	f5 4f       	sbci	r31, 0xF5	; 245
    341e:	a5 91       	lpm	r26, Z+
    3420:	b4 91       	lpm	r27, Z
    3422:	ec 91       	ld	r30, X
    3424:	ed 23       	and	r30, r29
    3426:	81 e0       	ldi	r24, 0x01	; 1
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	09 f4       	brne	.+2      	; 0x342e <digitalRead+0x46>
    342c:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    342e:	df 91       	pop	r29
    3430:	cf 91       	pop	r28
    3432:	08 95       	ret
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    3434:	80 e0       	ldi	r24, 0x00	; 0
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	fa cf       	rjmp	.-12     	; 0x342e <digitalRead+0x46>

0000343a <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/Print.h:58
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    343a:	af 92       	push	r10
    343c:	bf 92       	push	r11
    343e:	cf 92       	push	r12
    3440:	df 92       	push	r13
    3442:	ef 92       	push	r14
    3444:	ff 92       	push	r15
    3446:	0f 93       	push	r16
    3448:	1f 93       	push	r17
    344a:	cf 93       	push	r28
    344c:	df 93       	push	r29
    344e:	6c 01       	movw	r12, r24
    3450:	7b 01       	movw	r14, r22
    3452:	8b 01       	movw	r16, r22
    3454:	04 0f       	add	r16, r20
    3456:	15 1f       	adc	r17, r21
    3458:	eb 01       	movw	r28, r22
    345a:	5e 01       	movw	r10, r28
    345c:	ae 18       	sub	r10, r14
    345e:	bf 08       	sbc	r11, r15
    3460:	c0 17       	cp	r28, r16
    3462:	d1 07       	cpc	r29, r17
    3464:	59 f0       	breq	.+22     	; 0x347c <Print::write(unsigned char const*, unsigned int)+0x42>
    3466:	69 91       	ld	r22, Y+
    3468:	d6 01       	movw	r26, r12
    346a:	ed 91       	ld	r30, X+
    346c:	fc 91       	ld	r31, X
    346e:	01 90       	ld	r0, Z+
    3470:	f0 81       	ld	r31, Z
    3472:	e0 2d       	mov	r30, r0
    3474:	c6 01       	movw	r24, r12
    3476:	09 95       	icall
    3478:	89 2b       	or	r24, r25
    347a:	79 f7       	brne	.-34     	; 0x345a <Print::write(unsigned char const*, unsigned int)+0x20>
    347c:	c5 01       	movw	r24, r10
    347e:	df 91       	pop	r29
    3480:	cf 91       	pop	r28
    3482:	1f 91       	pop	r17
    3484:	0f 91       	pop	r16
    3486:	ff 90       	pop	r15
    3488:	ef 90       	pop	r14
    348a:	df 90       	pop	r13
    348c:	cf 90       	pop	r12
    348e:	bf 90       	pop	r11
    3490:	af 90       	pop	r10
    3492:	08 95       	ret

00003494 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    3494:	fb 01       	movw	r30, r22
    3496:	01 90       	ld	r0, Z+
    3498:	00 20       	and	r0, r0
    349a:	e9 f7       	brne	.-6      	; 0x3496 <Print::write(char const*) [clone .part.2]+0x2>
    349c:	31 97       	sbiw	r30, 0x01	; 1
    349e:	af 01       	movw	r20, r30
    34a0:	46 1b       	sub	r20, r22
    34a2:	57 0b       	sbc	r21, r23
    34a4:	dc 01       	movw	r26, r24
    34a6:	ed 91       	ld	r30, X+
    34a8:	fc 91       	ld	r31, X
    34aa:	02 80       	ldd	r0, Z+2	; 0x02
    34ac:	f3 81       	ldd	r31, Z+3	; 0x03
    34ae:	e0 2d       	mov	r30, r0
    34b0:	09 94       	ijmp

000034b2 <Print::print(char const*)>:
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    34b2:	61 15       	cp	r22, r1
    34b4:	71 05       	cpc	r23, r1
    34b6:	11 f0       	breq	.+4      	; 0x34bc <Print::print(char const*)+0xa>
    34b8:	0c 94 4a 1a 	jmp	0x3494	; 0x3494 <Print::write(char const*) [clone .part.2]>
_ZN5Print5printEPKc():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/Print.cpp:65
}

size_t Print::print(const char str[])
{
  return write(str);
}
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	80 e0       	ldi	r24, 0x00	; 0
    34c0:	08 95       	ret

000034c2 <__cxa_pure_virtual>:
__cxa_pure_virtual():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/abi.cpp:27
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    34c2:	0e 94 c4 1b 	call	0x3788	; 0x3788 <abort>

000034c6 <initVariant>:
initVariant():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    34c6:	08 95       	ret

000034c8 <main>:
main():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    34c8:	0e 94 32 19 	call	0x3264	; 0x3264 <init>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    34cc:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <initVariant>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    34d0:	0e 94 c0 05 	call	0xb80	; 0xb80 <setup>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    34d4:	c0 e0       	ldi	r28, 0x00	; 0
    34d6:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    34d8:	0e 94 b9 07 	call	0xf72	; 0xf72 <loop>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    34dc:	20 97       	sbiw	r28, 0x00	; 0
    34de:	e1 f3       	breq	.-8      	; 0x34d8 <main+0x10>
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    34e0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    34e4:	f9 cf       	rjmp	.-14     	; 0x34d8 <main+0x10>

000034e6 <yield>:
__empty():
C:\Users\Admin_PC\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    34e6:	08 95       	ret

000034e8 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    34e8:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    34ea:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    34ec:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    34ee:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    34f0:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    34f2:	0d c0       	rjmp	.+26     	; 0x350e <__udivmodsi4_ep>

000034f4 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    34f4:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    34f6:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    34f8:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    34fa:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    34fc:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    34fe:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    3500:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    3502:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    3504:	20 f0       	brcs	.+8      	; 0x350e <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    3506:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    3508:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    350a:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    350c:	f5 0b       	sbc	r31, r21

0000350e <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    350e:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    3510:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    3512:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    3514:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    3516:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    3518:	69 f7       	brne	.-38     	; 0x34f4 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    351a:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    351c:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    351e:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    3520:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    3522:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    3524:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    3526:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    3528:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    352a:	08 95       	ret

0000352c <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    352c:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    352e:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    3530:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    3532:	00 1c       	adc	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    3534:	0b be       	out	0x3b, r0	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    3536:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    3538:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    353a:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    353c:	09 94       	ijmp

0000353e <malloc>:
malloc():
    353e:	0f 93       	push	r16
    3540:	1f 93       	push	r17
    3542:	cf 93       	push	r28
    3544:	df 93       	push	r29
    3546:	82 30       	cpi	r24, 0x02	; 2
    3548:	91 05       	cpc	r25, r1
    354a:	10 f4       	brcc	.+4      	; 0x3550 <malloc+0x12>
    354c:	82 e0       	ldi	r24, 0x02	; 2
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	e0 91 e0 02 	lds	r30, 0x02E0	; 0x8002e0 <__flp>
    3554:	f0 91 e1 02 	lds	r31, 0x02E1	; 0x8002e1 <__flp+0x1>
    3558:	30 e0       	ldi	r19, 0x00	; 0
    355a:	20 e0       	ldi	r18, 0x00	; 0
    355c:	b0 e0       	ldi	r27, 0x00	; 0
    355e:	a0 e0       	ldi	r26, 0x00	; 0
    3560:	30 97       	sbiw	r30, 0x00	; 0
    3562:	99 f4       	brne	.+38     	; 0x358a <malloc+0x4c>
    3564:	21 15       	cp	r18, r1
    3566:	31 05       	cpc	r19, r1
    3568:	09 f4       	brne	.+2      	; 0x356c <malloc+0x2e>
    356a:	4a c0       	rjmp	.+148    	; 0x3600 <malloc+0xc2>
    356c:	28 1b       	sub	r18, r24
    356e:	39 0b       	sbc	r19, r25
    3570:	24 30       	cpi	r18, 0x04	; 4
    3572:	31 05       	cpc	r19, r1
    3574:	d8 f5       	brcc	.+118    	; 0x35ec <malloc+0xae>
    3576:	8a 81       	ldd	r24, Y+2	; 0x02
    3578:	9b 81       	ldd	r25, Y+3	; 0x03
    357a:	61 15       	cp	r22, r1
    357c:	71 05       	cpc	r23, r1
    357e:	89 f1       	breq	.+98     	; 0x35e2 <malloc+0xa4>
    3580:	fb 01       	movw	r30, r22
    3582:	93 83       	std	Z+3, r25	; 0x03
    3584:	82 83       	std	Z+2, r24	; 0x02
    3586:	fe 01       	movw	r30, r28
    3588:	11 c0       	rjmp	.+34     	; 0x35ac <malloc+0x6e>
    358a:	40 81       	ld	r20, Z
    358c:	51 81       	ldd	r21, Z+1	; 0x01
    358e:	02 81       	ldd	r16, Z+2	; 0x02
    3590:	13 81       	ldd	r17, Z+3	; 0x03
    3592:	48 17       	cp	r20, r24
    3594:	59 07       	cpc	r21, r25
    3596:	e0 f0       	brcs	.+56     	; 0x35d0 <malloc+0x92>
    3598:	48 17       	cp	r20, r24
    359a:	59 07       	cpc	r21, r25
    359c:	99 f4       	brne	.+38     	; 0x35c4 <malloc+0x86>
    359e:	10 97       	sbiw	r26, 0x00	; 0
    35a0:	61 f0       	breq	.+24     	; 0x35ba <malloc+0x7c>
    35a2:	12 96       	adiw	r26, 0x02	; 2
    35a4:	0c 93       	st	X, r16
    35a6:	12 97       	sbiw	r26, 0x02	; 2
    35a8:	13 96       	adiw	r26, 0x03	; 3
    35aa:	1c 93       	st	X, r17
    35ac:	32 96       	adiw	r30, 0x02	; 2
    35ae:	cf 01       	movw	r24, r30
    35b0:	df 91       	pop	r29
    35b2:	cf 91       	pop	r28
    35b4:	1f 91       	pop	r17
    35b6:	0f 91       	pop	r16
    35b8:	08 95       	ret
    35ba:	00 93 e0 02 	sts	0x02E0, r16	; 0x8002e0 <__flp>
    35be:	10 93 e1 02 	sts	0x02E1, r17	; 0x8002e1 <__flp+0x1>
    35c2:	f4 cf       	rjmp	.-24     	; 0x35ac <malloc+0x6e>
    35c4:	21 15       	cp	r18, r1
    35c6:	31 05       	cpc	r19, r1
    35c8:	51 f0       	breq	.+20     	; 0x35de <malloc+0xa0>
    35ca:	42 17       	cp	r20, r18
    35cc:	53 07       	cpc	r21, r19
    35ce:	38 f0       	brcs	.+14     	; 0x35de <malloc+0xa0>
    35d0:	a9 01       	movw	r20, r18
    35d2:	db 01       	movw	r26, r22
    35d4:	9a 01       	movw	r18, r20
    35d6:	bd 01       	movw	r22, r26
    35d8:	df 01       	movw	r26, r30
    35da:	f8 01       	movw	r30, r16
    35dc:	c1 cf       	rjmp	.-126    	; 0x3560 <malloc+0x22>
    35de:	ef 01       	movw	r28, r30
    35e0:	f9 cf       	rjmp	.-14     	; 0x35d4 <malloc+0x96>
    35e2:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <__flp+0x1>
    35e6:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <__flp>
    35ea:	cd cf       	rjmp	.-102    	; 0x3586 <malloc+0x48>
    35ec:	fe 01       	movw	r30, r28
    35ee:	e2 0f       	add	r30, r18
    35f0:	f3 1f       	adc	r31, r19
    35f2:	81 93       	st	Z+, r24
    35f4:	91 93       	st	Z+, r25
    35f6:	22 50       	subi	r18, 0x02	; 2
    35f8:	31 09       	sbc	r19, r1
    35fa:	39 83       	std	Y+1, r19	; 0x01
    35fc:	28 83       	st	Y, r18
    35fe:	d7 cf       	rjmp	.-82     	; 0x35ae <malloc+0x70>
    3600:	20 91 de 02 	lds	r18, 0x02DE	; 0x8002de <__brkval>
    3604:	30 91 df 02 	lds	r19, 0x02DF	; 0x8002df <__brkval+0x1>
    3608:	23 2b       	or	r18, r19
    360a:	41 f4       	brne	.+16     	; 0x361c <malloc+0xde>
    360c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3610:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3614:	30 93 df 02 	sts	0x02DF, r19	; 0x8002df <__brkval+0x1>
    3618:	20 93 de 02 	sts	0x02DE, r18	; 0x8002de <__brkval>
    361c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3620:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3624:	21 15       	cp	r18, r1
    3626:	31 05       	cpc	r19, r1
    3628:	41 f4       	brne	.+16     	; 0x363a <malloc+0xfc>
    362a:	2d b7       	in	r18, 0x3d	; 61
    362c:	3e b7       	in	r19, 0x3e	; 62
    362e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3632:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3636:	24 1b       	sub	r18, r20
    3638:	35 0b       	sbc	r19, r21
    363a:	e0 91 de 02 	lds	r30, 0x02DE	; 0x8002de <__brkval>
    363e:	f0 91 df 02 	lds	r31, 0x02DF	; 0x8002df <__brkval+0x1>
    3642:	e2 17       	cp	r30, r18
    3644:	f3 07       	cpc	r31, r19
    3646:	a0 f4       	brcc	.+40     	; 0x3670 <malloc+0x132>
    3648:	2e 1b       	sub	r18, r30
    364a:	3f 0b       	sbc	r19, r31
    364c:	28 17       	cp	r18, r24
    364e:	39 07       	cpc	r19, r25
    3650:	78 f0       	brcs	.+30     	; 0x3670 <malloc+0x132>
    3652:	ac 01       	movw	r20, r24
    3654:	4e 5f       	subi	r20, 0xFE	; 254
    3656:	5f 4f       	sbci	r21, 0xFF	; 255
    3658:	24 17       	cp	r18, r20
    365a:	35 07       	cpc	r19, r21
    365c:	48 f0       	brcs	.+18     	; 0x3670 <malloc+0x132>
    365e:	4e 0f       	add	r20, r30
    3660:	5f 1f       	adc	r21, r31
    3662:	50 93 df 02 	sts	0x02DF, r21	; 0x8002df <__brkval+0x1>
    3666:	40 93 de 02 	sts	0x02DE, r20	; 0x8002de <__brkval>
    366a:	81 93       	st	Z+, r24
    366c:	91 93       	st	Z+, r25
    366e:	9f cf       	rjmp	.-194    	; 0x35ae <malloc+0x70>
    3670:	f0 e0       	ldi	r31, 0x00	; 0
    3672:	e0 e0       	ldi	r30, 0x00	; 0
    3674:	9c cf       	rjmp	.-200    	; 0x35ae <malloc+0x70>

00003676 <free>:
free():
    3676:	cf 93       	push	r28
    3678:	df 93       	push	r29
    367a:	00 97       	sbiw	r24, 0x00	; 0
    367c:	e9 f0       	breq	.+58     	; 0x36b8 <free+0x42>
    367e:	fc 01       	movw	r30, r24
    3680:	32 97       	sbiw	r30, 0x02	; 2
    3682:	13 82       	std	Z+3, r1	; 0x03
    3684:	12 82       	std	Z+2, r1	; 0x02
    3686:	a0 91 e0 02 	lds	r26, 0x02E0	; 0x8002e0 <__flp>
    368a:	b0 91 e1 02 	lds	r27, 0x02E1	; 0x8002e1 <__flp+0x1>
    368e:	ed 01       	movw	r28, r26
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	20 e0       	ldi	r18, 0x00	; 0
    3694:	10 97       	sbiw	r26, 0x00	; 0
    3696:	a1 f4       	brne	.+40     	; 0x36c0 <free+0x4a>
    3698:	20 81       	ld	r18, Z
    369a:	31 81       	ldd	r19, Z+1	; 0x01
    369c:	82 0f       	add	r24, r18
    369e:	93 1f       	adc	r25, r19
    36a0:	20 91 de 02 	lds	r18, 0x02DE	; 0x8002de <__brkval>
    36a4:	30 91 df 02 	lds	r19, 0x02DF	; 0x8002df <__brkval+0x1>
    36a8:	28 17       	cp	r18, r24
    36aa:	39 07       	cpc	r19, r25
    36ac:	09 f0       	breq	.+2      	; 0x36b0 <free+0x3a>
    36ae:	61 c0       	rjmp	.+194    	; 0x3772 <free+0xfc>
    36b0:	f0 93 df 02 	sts	0x02DF, r31	; 0x8002df <__brkval+0x1>
    36b4:	e0 93 de 02 	sts	0x02DE, r30	; 0x8002de <__brkval>
    36b8:	df 91       	pop	r29
    36ba:	cf 91       	pop	r28
    36bc:	08 95       	ret
    36be:	ea 01       	movw	r28, r20
    36c0:	ce 17       	cp	r28, r30
    36c2:	df 07       	cpc	r29, r31
    36c4:	e8 f5       	brcc	.+122    	; 0x3740 <free+0xca>
    36c6:	4a 81       	ldd	r20, Y+2	; 0x02
    36c8:	5b 81       	ldd	r21, Y+3	; 0x03
    36ca:	9e 01       	movw	r18, r28
    36cc:	41 15       	cp	r20, r1
    36ce:	51 05       	cpc	r21, r1
    36d0:	b1 f7       	brne	.-20     	; 0x36be <free+0x48>
    36d2:	e9 01       	movw	r28, r18
    36d4:	fb 83       	std	Y+3, r31	; 0x03
    36d6:	ea 83       	std	Y+2, r30	; 0x02
    36d8:	49 91       	ld	r20, Y+
    36da:	59 91       	ld	r21, Y+
    36dc:	c4 0f       	add	r28, r20
    36de:	d5 1f       	adc	r29, r21
    36e0:	ec 17       	cp	r30, r28
    36e2:	fd 07       	cpc	r31, r29
    36e4:	61 f4       	brne	.+24     	; 0x36fe <free+0x88>
    36e6:	80 81       	ld	r24, Z
    36e8:	91 81       	ldd	r25, Z+1	; 0x01
    36ea:	02 96       	adiw	r24, 0x02	; 2
    36ec:	84 0f       	add	r24, r20
    36ee:	95 1f       	adc	r25, r21
    36f0:	e9 01       	movw	r28, r18
    36f2:	99 83       	std	Y+1, r25	; 0x01
    36f4:	88 83       	st	Y, r24
    36f6:	82 81       	ldd	r24, Z+2	; 0x02
    36f8:	93 81       	ldd	r25, Z+3	; 0x03
    36fa:	9b 83       	std	Y+3, r25	; 0x03
    36fc:	8a 83       	std	Y+2, r24	; 0x02
    36fe:	f0 e0       	ldi	r31, 0x00	; 0
    3700:	e0 e0       	ldi	r30, 0x00	; 0
    3702:	12 96       	adiw	r26, 0x02	; 2
    3704:	8d 91       	ld	r24, X+
    3706:	9c 91       	ld	r25, X
    3708:	13 97       	sbiw	r26, 0x03	; 3
    370a:	00 97       	sbiw	r24, 0x00	; 0
    370c:	b9 f5       	brne	.+110    	; 0x377c <free+0x106>
    370e:	2d 91       	ld	r18, X+
    3710:	3c 91       	ld	r19, X
    3712:	11 97       	sbiw	r26, 0x01	; 1
    3714:	cd 01       	movw	r24, r26
    3716:	02 96       	adiw	r24, 0x02	; 2
    3718:	82 0f       	add	r24, r18
    371a:	93 1f       	adc	r25, r19
    371c:	20 91 de 02 	lds	r18, 0x02DE	; 0x8002de <__brkval>
    3720:	30 91 df 02 	lds	r19, 0x02DF	; 0x8002df <__brkval+0x1>
    3724:	28 17       	cp	r18, r24
    3726:	39 07       	cpc	r19, r25
    3728:	39 f6       	brne	.-114    	; 0x36b8 <free+0x42>
    372a:	30 97       	sbiw	r30, 0x00	; 0
    372c:	51 f5       	brne	.+84     	; 0x3782 <free+0x10c>
    372e:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <__flp+0x1>
    3732:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <__flp>
    3736:	b0 93 df 02 	sts	0x02DF, r27	; 0x8002df <__brkval+0x1>
    373a:	a0 93 de 02 	sts	0x02DE, r26	; 0x8002de <__brkval>
    373e:	bc cf       	rjmp	.-136    	; 0x36b8 <free+0x42>
    3740:	d3 83       	std	Z+3, r29	; 0x03
    3742:	c2 83       	std	Z+2, r28	; 0x02
    3744:	40 81       	ld	r20, Z
    3746:	51 81       	ldd	r21, Z+1	; 0x01
    3748:	84 0f       	add	r24, r20
    374a:	95 1f       	adc	r25, r21
    374c:	c8 17       	cp	r28, r24
    374e:	d9 07       	cpc	r29, r25
    3750:	61 f4       	brne	.+24     	; 0x376a <free+0xf4>
    3752:	4e 5f       	subi	r20, 0xFE	; 254
    3754:	5f 4f       	sbci	r21, 0xFF	; 255
    3756:	88 81       	ld	r24, Y
    3758:	99 81       	ldd	r25, Y+1	; 0x01
    375a:	48 0f       	add	r20, r24
    375c:	59 1f       	adc	r21, r25
    375e:	51 83       	std	Z+1, r21	; 0x01
    3760:	40 83       	st	Z, r20
    3762:	8a 81       	ldd	r24, Y+2	; 0x02
    3764:	9b 81       	ldd	r25, Y+3	; 0x03
    3766:	93 83       	std	Z+3, r25	; 0x03
    3768:	82 83       	std	Z+2, r24	; 0x02
    376a:	21 15       	cp	r18, r1
    376c:	31 05       	cpc	r19, r1
    376e:	09 f0       	breq	.+2      	; 0x3772 <free+0xfc>
    3770:	b0 cf       	rjmp	.-160    	; 0x36d2 <free+0x5c>
    3772:	f0 93 e1 02 	sts	0x02E1, r31	; 0x8002e1 <__flp+0x1>
    3776:	e0 93 e0 02 	sts	0x02E0, r30	; 0x8002e0 <__flp>
    377a:	9e cf       	rjmp	.-196    	; 0x36b8 <free+0x42>
    377c:	fd 01       	movw	r30, r26
    377e:	dc 01       	movw	r26, r24
    3780:	c0 cf       	rjmp	.-128    	; 0x3702 <free+0x8c>
    3782:	13 82       	std	Z+3, r1	; 0x03
    3784:	12 82       	std	Z+2, r1	; 0x02
    3786:	d7 cf       	rjmp	.-82     	; 0x3736 <free+0xc0>

00003788 <abort>:
abort():
    3788:	81 e0       	ldi	r24, 0x01	; 1
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	f8 94       	cli
    378e:	0c 94 d0 1b 	jmp	0x37a0	; 0x37a0 <__do_global_dtors>

00003792 <memset>:
memset():
    3792:	dc 01       	movw	r26, r24
    3794:	01 c0       	rjmp	.+2      	; 0x3798 <memset+0x6>
    3796:	6d 93       	st	X+, r22
    3798:	41 50       	subi	r20, 0x01	; 1
    379a:	50 40       	sbci	r21, 0x00	; 0
    379c:	e0 f7       	brcc	.-8      	; 0x3796 <memset+0x4>
    379e:	08 95       	ret

000037a0 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    37a0:	15 e0       	ldi	r17, 0x05	; 5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    37a2:	c3 e9       	ldi	r28, 0x93	; 147
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    37a4:	d5 e0       	ldi	r29, 0x05	; 5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    37a6:	04 c0       	rjmp	.+8      	; 0x37b0 <__do_global_dtors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    37a8:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    37aa:	0e 94 96 1a 	call	0x352c	; 0x352c <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    37ae:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    37b0:	c4 39       	cpi	r28, 0x94	; 148
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    37b2:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    37b4:	c9 f7       	brne	.-14     	; 0x37a8 <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    37b6:	f8 94       	cli

000037b8 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    37b8:	ff cf       	rjmp	.-2      	; 0x37b8 <__stop_program>
